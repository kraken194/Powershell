{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "adf-avenga-analytics-dev"
        },
        "Sftp1_password": {
            "type": "secureString",
            "metadata": "Secure string for 'password' of 'Sftp1'"
        },
        "Hubspot1_clientSecret": {
            "type": "secureString",
            "metadata": "Secure string for 'clientSecret' of 'Hubspot1'"
        },
        "Hubspot1_accessToken": {
            "type": "secureString",
            "metadata": "Secure string for 'accessToken' of 'Hubspot1'"
        },
        "Hubspot1_refreshToken": {
            "type": "secureString",
            "metadata": "Secure string for 'refreshToken' of 'Hubspot1'"
        },
        "IR-SSIS-PowerBI-Refresh_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint": {
            "type": "string",
            "defaultValue": "sql-avenga-analytics-dev.database.windows.net"
        },
        "IR-SSIS-PowerBI-Refresh_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName": {
            "type": "string",
            "defaultValue": "adm1n"
        },
        "IR-SSIS-PowerBI-Refresh_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword": {
            "type": "secureString"
        },
        "Synapse-pause_properties_PL_SynapsePauseResume_parameters_KeyVaultName": {
            "type": "string",
            "defaultValue": "kv-avenga-analytics-dev"
        },
        "Synapse-pause_properties_PL_SynapsePauseResume_parameters_Action": {
            "type": "string",
            "defaultValue": "pause"
        },
        "LS_AF_AvengaAnaliticsFuncApp_properties_typeProperties_functionAppUrl": {
            "type": "string",
            "defaultValue": "https://func-avenga-analytics-dev.azurewebsites.net"
        },
        "LS_AKV_AvengaAnalytics_properties_typeProperties_baseUrl": {
            "type": "string",
            "defaultValue": "https://kv-avenga-analytics-dev.vault.azure.net/"
        },
        "LS_REST_GoogleUsersList_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://www.googleapis.com/admin/directory/v1/users?customer=my_customer&maxResults=50&projection=full"
        },
        "LS_ASQL_ScrambleDataLake_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "ScrambleDataLakeSQLConnectionString"
        },
        "LS_ASQL_DataLake_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "DataLakeSQLConnectionString"
        },
        "LS_ASDW_AnalyticsDWH_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "AnalyticsDWHConnectionString"
        },
        "LS_ASQL_ScrambleDataLakeDev_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "ScrambleDataLakeDevSQLConnectionString"
        },
        "Sftp1_properties_typeProperties_host": {
            "type": "string",
            "defaultValue": "assets.sevenval-fit.com"
        },
        "Sftp1_properties_typeProperties_userName": {
            "type": "string",
            "defaultValue": "avenga-sf-backups"
        },
        "AzureDataLakeStorage1_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://dwhblobdev.dfs.core.windows.net"
        },
        "Hubspot1_properties_typeProperties_clientId": {
            "type": "string",
            "defaultValue": "51bb9557-12f6-4175-9c5c-5f6d17e11372"
        },
        "LS_REST_MicrosoftGraph_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://graph.microsoft.com/"
        },
        "LS_ADLS_DataLakeDWHStorage_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://dwhblobg2dev.dfs.core.windows.net/"
        },
        "LS_REST_CoreBase_TimeOff_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://corebase.cvlabs.net/TimeOff/ExportTimeOffStatusOnDate?date=2022-12-31"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/IR-SSIS-PowerBI-Refresh')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "West Europe",
                        "nodeSize": "Standard_D2_v3",
                        "numberOfNodes": 1,
                        "maxParallelExecutionsPerNode": 1
                    },
                    "ssisProperties": {
                        "catalogInfo": {
                            "catalogServerEndpoint": "[parameters('IR-SSIS-PowerBI-Refresh_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint')]",
                            "catalogAdminUserName": "[parameters('IR-SSIS-PowerBI-Refresh_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName')]",
                            "catalogAdminPassword": {
                                "type": "SecureString",
                                "value": "[parameters('IR-SSIS-PowerBI-Refresh_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword')]"
                            },
                            "catalogPricingTier": "ELASTIC_POOL(name=\"epool-avenga-analytics-dev\")"
                        },
                        "edition": "Standard",
                        "licenseType": "LicenseIncluded"
                    },
                    "customerVirtualNetwork": {
                        "subnetId": "/subscriptions/90288df2-9d9d-4950-bc72-a4c7a04e24a3/resourceGroups/rg-internal-bi-datawarehouse-dev/providers/Microsoft.Network/virtualNetworks/rg-internal-bi-datawarehouse-dev-vnet/subnets/rg-internal-bi-datawarehouse-dev-vnet-subnet1"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_DL_Database')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ASQL_DataLake",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "SchemaName": {
                        "type": "string"
                    },
                    "TableName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "DataLake"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().SchemaName",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().TableName",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DataLake')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ADWH_Database')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ASDW_AnalyticsDWH",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "SchemaName": {
                        "type": "string"
                    },
                    "TableName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "type": "AzureSqlDWTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().SchemaName",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().TableName",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_DLS_DatalakeRep')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ASQL_ScrambleDataLake",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "SchemaName": {
                        "type": "string",
                        "defaultValue": "gsuite"
                    },
                    "TableName": {
                        "type": "string",
                        "defaultValue": "GoogleUsers"
                    }
                },
                "folder": {
                    "name": "DataLakeScramble/Source"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().SchemaName",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().TableName",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASQL_ScrambleDataLake')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_DLD_DatalakeDev')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ASQL_ScrambleDataLakeDev",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "SchemaName": {
                        "type": "string",
                        "defaultValue": "gsuite"
                    },
                    "TableName": {
                        "type": "string",
                        "defaultValue": "GoogleUsers"
                    }
                },
                "folder": {
                    "name": "DataLakeScramble/Sink"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().SchemaName",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().TableName",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASQL_ScrambleDataLakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_API_GoogleAdmin')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_REST_GoogleUsersList",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "API_URL": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "API"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().API_URL",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_REST_GoogleUsersList')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ADLS_CSVFile')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Container": {
                        "type": "string",
                        "defaultValue": "dwhcontainerdev"
                    },
                    "Path": {
                        "type": "string",
                        "defaultValue": "Stage/CSV"
                    },
                    "FileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AzureStorage"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@concat(dataset().FileName, '.csv')",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().Path",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().Container",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_API_MicrosoftGraph')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_REST_MicrosoftGraph",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "RelativeURL": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "API"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().RelativeURL",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_REST_MicrosoftGraph')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ADLS_ParquetFile')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_DataLakeDWHStorage",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "FileName": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "AzureStorage"
                },
                "annotations": [],
                "type": "Parquet",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@concat(dataset().FileName, '.parquet')",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@concat('lakehouse/golden/', toLower(dataset().FileName))",
                            "type": "Expression"
                        },
                        "fileSystem": "synapse-workspace"
                    },
                    "compressionCodec": "snappy"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_DataLakeDWHStorage')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TriggerADWHMainProcess')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "PL_ADWH_ResumePauseProcess",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2020-07-31T14:36:00Z",
                        "timeZone": "UTC",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                7
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_ResumePauseProcess')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Synapse-pause')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "PL_SynapsePauseResume",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "KeyVaultName": "[parameters('Synapse-pause_properties_PL_SynapsePauseResume_parameters_KeyVaultName')]",
                            "Action": "[parameters('Synapse-pause_properties_PL_SynapsePauseResume_parameters_Action')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2020-08-03T18:14:00Z",
                        "timeZone": "UTC",
                        "schedule": {
                            "minutes": [
                                10
                            ],
                            "hours": [
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_SynapsePauseResume')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TriggerScrambleDevProcess')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "PL_DLS_Process",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Week",
                        "interval": 1,
                        "startTime": "2020-09-01T14:34:00Z",
                        "timeZone": "UTC",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                0
                            ],
                            "weekDays": [
                                "Monday"
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_Process')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ProcessAnalysisServices')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Login",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "GetClientID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetClientSecret",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetTenantId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetRegion",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetASServerName",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": true
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://login.microsoftonline.com/',activity('GetTenantId').output.value,'/oauth2/token')",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            "body": {
                                "value": "@concat('grant_type=client_credentials&resource=https://*.asazure.windows.net&client_id=',activity('GetClientID').output.value,'&client_secret=',activity('GetClientSecret').output.value)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "GetRefreshes",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "StartProcessing",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://',activity('GetRegion').output.value,'.asazure.windows.net/servers/',activity('GetASServerName').output.value,'/models/',pipeline().parameters.DatabaseName,'/refreshes')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {
                                "Authorization": {
                                    "value": "@concat(string(activity('Login').output.token_type),' ',string(activity('Login').output.access_token))",
                                    "type": "Expression"
                                }
                            },
                            "body": {
                                "Type": "Full",
                                "CommitMode": "transactional",
                                "MaxParallelism": 2,
                                "RetryCount": 2
                            }
                        }
                    },
                    {
                        "name": "StartProcessing",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Login",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://',activity('GetRegion').output.value,'.asazure.windows.net/servers/',activity('GetASServerName').output.value,'/models/',pipeline().parameters.DatabaseName,'/refreshes')",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {
                                "Authorization": {
                                    "value": "@concat(string(activity('Login').output.token_type),' ',string(activity('Login').output.access_token))",
                                    "type": "Expression"
                                }
                            },
                            "body": {
                                "Type": "Full",
                                "CommitMode": "transactional",
                                "MaxParallelism": 2,
                                "RetryCount": 2
                            }
                        }
                    },
                    {
                        "name": "FilterToCurrentRefresh",
                        "description": "Filter To Current Rfresh",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "GetRefreshes",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@json(activity('GetRefreshes').output.Response)",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@greaterOrEquals(item().startTime,addseconds(activity('StartProcessing').output.startTime,-30))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "UntilRefreshComplete",
                        "type": "Until",
                        "dependsOn": [
                            {
                                "activity": "FilterToCurrentRefresh",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(activity('GetAzureASRefreshStatus').output.status,'inProgress'))",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "GetAzureASRefreshStatus",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Wait30Seconds",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://',activity('GetRegion').output.value,'.asazure.windows.net/servers/',activity('GetASServerName').output.value,'/models/',pipeline().parameters.DatabaseName,'/refreshes/',activity('FilterToCurrentRefresh').output.Value[0].refreshId)",
                                            "type": "Expression"
                                        },
                                        "method": "GET",
                                        "headers": {
                                            "Authorization": {
                                                "value": "@concat(string(activity('Login').output.token_type),' ',string(activity('Login').output.access_token))",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Wait30Seconds",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 30
                                    }
                                }
                            ],
                            "timeout": "7.00:00:00"
                        }
                    },
                    {
                        "name": "IfFailed",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "UntilRefreshComplete",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('GetAzureASRefreshStatus').output.status,'failed')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "ThrowErrorOnFailure",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@string(activity('GetAzureASRefreshStatus').output)",
                                            "type": "Expression"
                                        },
                                        "method": "GET",
                                        "headers": {}
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "GetClientSecret",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/ServicePrincipalClientSecret?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "GetClientID",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/ServicePrincipalClientID?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "GetTenantId",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/AzureTenantId?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "GetRegion",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/AzureRegion?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "GetASServerName",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/AzureASServerName?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "DatabaseName": {
                        "type": "string",
                        "defaultValue": "EmployeeDistribution"
                    },
                    "KeyVaultName": {
                        "type": "string",
                        "defaultValue": "kv-avenga-analytics-dev"
                    }
                },
                "folder": {
                    "name": "Azure"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:21Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_GoogleUsers')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy GoogleUsers",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [id]\n      ,[email]\n      ,[givenName]\n      ,[familyName]\n      ,[fullName]\n      ,[suspended]\n      ,[relations]\n      ,[addresses]\n      ,[organizations]\n      ,[Tier]\n      ,[Competency]\n  FROM [gsuite].[GoogleUsers]\n  WHERE ([organizations] IS NULL OR [organizations] NOT LIKE '%description\":\"Non-employee\"%')",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[GoogleUsers];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "id",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "id",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "email",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "email",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "givenName",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "givenName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "familyName",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "familyName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "fullName",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "fullName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "suspended",
                                            "type": "Boolean"
                                        },
                                        "sink": {
                                            "name": "suspended",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "relations",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "relations",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "addresses",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "addresses",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "organizations",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "organizations",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Tier",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Tier",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Competency",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Competency",
                                            "type": "String"
                                        }
                                    }
                                ]
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleUsers"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "GoogleUsers"
                                }
                            }
                        ]
                    },
                    {
                        "name": "If first day of month",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Copy GoogleUsers",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(dayOfMonth(utcnow()), pipeline().parameters.HistorySaveDay)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Copy GoogleUsers History",
                                    "description": "Save google users history on the first day of month.",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": "SELECT [id]\n      ,[email]\n      ,[givenName]\n      ,[familyName]\n      ,[fullName]\n      ,[suspended]\n      ,[relations]\n      ,[addresses]\n      ,[organizations]\n      ,[Tier]\n      ,[Competency]\n\t  ,[VersionDate] = DATEFROMPARTS (YEAR(GETDATE()), MONTH(GETDATE()), 1)\n  FROM [gsuite].[GoogleUsers]\n  WHERE ([organizations] IS NULL OR [organizations] NOT LIKE '%description\":\"Non-employee\"%')",
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "SqlDWSink",
                                            "preCopyScript": "DELETE FROM [stage].[GoogleUsersHistory]\nWHERE [VersionDate] = DATEFROMPARTS (YEAR(GETDATE()), MONTH(GETDATE()), 1)",
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "name": "id",
                                                        "type": "String",
                                                        "physicalType": "varchar"
                                                    },
                                                    "sink": {
                                                        "name": "id",
                                                        "type": "String",
                                                        "physicalType": "varchar"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "email",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    },
                                                    "sink": {
                                                        "name": "email",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "givenName",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    },
                                                    "sink": {
                                                        "name": "givenName",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "familyName",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    },
                                                    "sink": {
                                                        "name": "familyName",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "fullName",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    },
                                                    "sink": {
                                                        "name": "fullName",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "suspended",
                                                        "type": "Boolean",
                                                        "physicalType": "bit"
                                                    },
                                                    "sink": {
                                                        "name": "suspended",
                                                        "type": "Boolean",
                                                        "physicalType": "bit"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "relations",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    },
                                                    "sink": {
                                                        "name": "relations",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "addresses",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    },
                                                    "sink": {
                                                        "name": "addresses",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "organizations",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    },
                                                    "sink": {
                                                        "name": "organizations",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "Tier",
                                                        "type": "String",
                                                        "physicalType": "varchar"
                                                    },
                                                    "sink": {
                                                        "name": "Tier",
                                                        "type": "String",
                                                        "physicalType": "varchar"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "Competency",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    },
                                                    "sink": {
                                                        "name": "Competency",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "VersionDate",
                                                        "type": "DateTime",
                                                        "physicalType": "date"
                                                    },
                                                    "sink": {
                                                        "name": "VersionDate",
                                                        "type": "DateTime",
                                                        "physicalType": "date"
                                                    }
                                                }
                                            ],
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_DL_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "gsuite",
                                                "TableName": "GoogleUsers"
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADWH_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "stage",
                                                "TableName": "GoogleUsersHistory"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "HistorySaveDay": {
                        "type": "int",
                        "defaultValue": 1
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/GSuite"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DL_GoogleUsers')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get_GSA_PrivateKey",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/GoogleServiceAccountPrivateKey?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_GSA_Auth_Token",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_GSA_PrivateKey",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetGoogleServiceAccountAuthToken",
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "value": "{\"private_key\":\"@{activity('Get_GSA_PrivateKey').output.value}\",\"client_email\":\"@{pipeline().parameters.ParamClientEmail}\",\"user\":\"@{pipeline().parameters.ParamUserEmail}\",\"scopes\":[\"https://www.googleapis.com/auth/admin.directory.user.readonly\"]}",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_AF_AvengaAnaliticsFuncApp",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Copy Google Users",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Get_GSA_Auth_Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET",
                                "additionalHeaders": {
                                    "Authorization": {
                                        "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                        "type": "Expression"
                                    }
                                },
                                "paginationRules": {
                                    "QueryParameters.pageToken": "$.nextPageToken"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [gsuite].[GoogleUsers]",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "path": "[['id']"
                                        },
                                        "sink": {
                                            "name": "id",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['primaryEmail']"
                                        },
                                        "sink": {
                                            "name": "email",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['name']['givenName']"
                                        },
                                        "sink": {
                                            "name": "givenName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['name']['familyName']"
                                        },
                                        "sink": {
                                            "name": "familyName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['name']['fullName']"
                                        },
                                        "sink": {
                                            "name": "fullName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['suspended']"
                                        },
                                        "sink": {
                                            "name": "suspended",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['relations']"
                                        },
                                        "sink": {
                                            "name": "relations",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['organizations']"
                                        },
                                        "sink": {
                                            "name": "organizations",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['addresses']"
                                        },
                                        "sink": {
                                            "name": "addresses",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['customSchemas']['HR-Data']['Tier']"
                                        },
                                        "sink": {
                                            "name": "Tier",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['customSchemas']['HR-Data']['Competency']"
                                        },
                                        "sink": {
                                            "name": "Competency",
                                            "type": "String"
                                        }
                                    }
                                ],
                                "collectionReference": "$['users']",
                                "mapComplexValuesToString": true
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_API_GoogleAdmin",
                                "type": "DatasetReference",
                                "parameters": {
                                    "API_URL": "https://www.googleapis.com/admin/directory/v1/users?customer=my_customer&maxResults=50&projection=full"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleUsers"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "KeyVaultName": {
                        "type": "string",
                        "defaultValue": "kv-avenga-analytics-dev"
                    },
                    "ParamClientEmail": {
                        "type": "string",
                        "defaultValue": "avenga-dwh-account@avengadwh.iam.gserviceaccount.com"
                    },
                    "ParamUserEmail": {
                        "type": "string",
                        "defaultValue": "avenga.dwh.account@avenga.com"
                    }
                },
                "folder": {
                    "name": "DataLake"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AF_AvengaAnaliticsFuncApp')]",
                "[concat(variables('factoryId'), '/datasets/DS_API_GoogleAdmin')]",
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Dim_Employee')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Employee Dimension",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadEmployee]",
                            "storedProcedureParameters": {
                                "EffectiveDate": {
                                    "value": null,
                                    "type": "DateTime"
                                },
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Export to DataLake Storage",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Load Employee Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADLS_Employee",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADLS_Employee')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_GoogleUsers')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled GoogleUsers",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "DECLARE @sj TABLE (id nvarchar(64), [relations] nvarchar(1000), [key] int, [manager] nvarchar(64), rn int, rnd int)\n\nINSERT INTO @sj\nSELECT\n\tgu.[id]\n\t, gu.[relations]\n\t, item.[key]\n\t, CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(mgu.[email], CHARINDEX('@', mgu.[email]) - 1)), 2),\n\t\tCASE\n\t\t\tWHEN RIGHT(mgu.[email], LEN(mgu.[email]) - CHARINDEX('@', mgu.[email])) = 'avenga.com' THEN '@avenga.com.dev'\n\t\t\tELSE RIGHT(mgu.[email], LEN(mgu.[email]) - CHARINDEX('@', mgu.[email]) + 1)\n\t\tEND) AS [manager]\n\t, ROW_NUMBER() OVER (PARTITION BY gu.id ORDER BY item.[key]) AS rn\n\t, ROW_NUMBER() OVER (PARTITION BY gu.id ORDER BY item.[key] desc) AS rnd\nFROM [gsuite].[GoogleUsers]  gu\n\tOUTER APPLY OPENJSON( gu.[relations] ) AS item\n\tOUTER APPLY OPENJSON( item.[value] ) WITH ( [type] nvarchar(64) '$.type', [value] nvarchar(64) '$.value') r \n\tLEFT JOIN [gsuite].[GoogleUsers] mgu ON mgu.[email] = r.[value]\nWHERE r.[type] = 'manager'\n;WITH sm AS(\n  SELECT [id], [rn], [rnd], JSON_MODIFY([relations], CONCAT('$[', CAST([key] AS INT), '].value'), [manager]) as [relations]   \n  FROM @sj WHERE RN = 1\n  UNION ALL\n  SELECT x.[id], x.[rn], x.[rnd], JSON_MODIFY(sm.[relations], CONCAT('$[', CAST(x.[key] AS INT), '].value'), x.[manager]) \n  FROM @sj as x INNER JOIN sm ON x.[id] = sm.[id]  AND x.[rn] = (sm.[rn] + 1)\n)\nSELECT \n\t [id] = u.[id]\n\t,[email] =\n\t\tCONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(u.[email], CHARINDEX('@', u.[email]) - 1)), 2),\n\t\t\tCASE\n\t\t\t\tWHEN RIGHT(u.[email], LEN(u.[email]) - CHARINDEX('@', u.[email])) = 'avenga.com' THEN '@avenga.com.dev'\n\t\t\t\tELSE RIGHT(u.[email], LEN(u.[email]) - CHARINDEX('@', u.[email]) + 1)\n\t\t\tEND)\n\t,[givenName] = CONVERT(NVARCHAR(32), HashBytes('MD5', u.[givenName]), 2)\n\t,[familyName] = CONVERT(NVARCHAR(32), HashBytes('MD5', u.[familyName]), 2)\n\t,[fullName] = CONVERT(NVARCHAR(32), HashBytes('MD5', u.[fullName]), 2)\n\t,[suspended] = u.[suspended]\n\t,[relations] = ISNULL(sm.[relations], u.[relations])\n\t,[addresses] = u.[addresses]\n\t,[organizations] = u.[organizations]\n\t,[Tier] = u.[Tier]\n\t,[Competency] = u.[Competency]\nFROM [gsuite].[GoogleUsers] u\nLEFT JOIN sm ON u.id = sm.id AND sm.rnd = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [gsuite].[GoogleUsers];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleUsers"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleUsers"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Google"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Process')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Employee Dimension",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Forex Currency Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Dim_Employee",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Process AAS EmployeeDistribution Model",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Set DWHLastRefresh parameter",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ProcessAnalysisServices",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "DatabaseName": "EmployeeDistribution",
                                "KeyVaultName": {
                                    "value": "@pipeline().globalParameters.KeyVaultName",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Customer Dimension",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Employee Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Dim_Customer",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Opportunity Dimension",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Customer Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Dim_Opportunity",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Fact OpportunityForecast",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Project Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Fact_OpportunityForecast",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Currency Dimension",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Country Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Dim_Currency",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Process AAS Opportunity Model",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Set DWHLastRefresh parameter",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ProcessAnalysisServices",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "DatabaseName": "Opportunity",
                                "KeyVaultName": {
                                    "value": "@pipeline().globalParameters.KeyVaultName",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Forex Currency Dimension",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Currency Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Time Reporting Type Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Dim_ForexCurrency",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Project Dimension",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Opportunity Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Dim_Project",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Fact BudgetForecast",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fact OpportunityForecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Fact_BudgetForecast",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Fact Revenue",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fact BudgetForecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Fact_Revenue",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Process AAS Sales Model",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Set DWHLastRefresh parameter",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ProcessAnalysisServices",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "DatabaseName": "Sales",
                                "KeyVaultName": {
                                    "value": "@pipeline().globalParameters.KeyVaultName",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Country Dimension",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Load Mapping OpportunityProject",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Competency Matrix English Skills",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Dim_Country",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Load Mapping OpportunityProject",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Process All Stage Tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_MappingOpportunityProject",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Fact Project Forecast",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fact Revenue",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Fact Time Reporting",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Fact Calendar Event",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Fact_ProjectForecast",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Clear Stage Tables",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Set DWHLastRefresh parameter",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[stage].[CleanStageHistory]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Load UserAccess",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Fact Project Forecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadUserReportAccess]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Set DWHLastRefresh parameter",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Load Stage Tables Refresh Log",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Load UserAccess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Execute Check DimensionConsistency",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "IF EXISTS(SELECT TOP 1 1 FROM [dbo].[Parameter] WHERE [ParameterName] = 'DWHLastRefresh')\n\tUPDATE [dbo].[Parameter]\n\tSET [ParameterValue] = CONVERT(NVARCHAR, GETDATE(), 20)\n\tWHERE [ParameterName] = 'DWHLastRefresh'\nELSE \n\tINSERT INTO [dbo].[Parameter] ([ParameterName], [ParameterValue])\n\tSELECT\n\t\t[ParameterName] = 'DWHLastRefresh'\n\t\t,[ParameterValue] = CONVERT(NVARCHAR, GETDATE(), 20);\n\nSELECT [ParameterValue]\nFROM [dbo].[Parameter]\nWHERE [ParameterName] = 'DWHLastRefresh';",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "dbo",
                                    "TableName": "Parameter"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load Stage Tables Refresh Log",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Fact Project Forecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadStageRefreshLog]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Upload Backlog DE into Google Sheets",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fact Project Forecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_GS_UploadBacklogDE",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "MonthBack": 0
                            }
                        }
                    },
                    {
                        "name": "Execute Check DimensionConsistency",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Fact Project Forecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[CheckDimensionConsistency]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Process All Stage Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Process_Stage",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Time Reporting Type Dimension",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Country Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Dim_TimeReportingType",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Fact Time Reporting",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fact Assignment",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Fact_TimeReporting",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Fact Assignment",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fact Language Review",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Fact_Assignment",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Fact Calendar Event",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fact Employee Feedback",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Fact_CalendarEvent",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Fact Employee Feedback",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fact Employee Certification",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Fact_EmployeeFeedback",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Employee Kid Dimension",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Employee Visa Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Dim_EmployeeKid",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Employee Car Dimension",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Employee Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Dim_EmployeeCar",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Fact Employee Certification",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Employee Kid Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Fact_EmployeeCertification",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Employee Passport Dimension",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Employee Car Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Dim_EmployeePassport",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Employee Visa Dimension",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Employee Passport Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Dim_EmployeeVisa",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Process AAS HRAvengaUA Model",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Set DWHLastRefresh parameter",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ProcessAnalysisServices",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "DatabaseName": "HRAvengaUA",
                                "KeyVaultName": {
                                    "value": "@pipeline().globalParameters.KeyVaultName",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Fact Language Review",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Project Dimension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Fact_LanguageReview",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Competency Matrix English Skills",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Process All Stage Tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_CompetencyMatrixEnglishSkills",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Process AAS Resourcing Model",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Set DWHLastRefresh parameter",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ProcessAnalysisServices",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "DatabaseName": "Resourcing",
                                "KeyVaultName": {
                                    "value": "@pipeline().globalParameters.KeyVaultName",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "variables": {
                    "StageTablesToCopy": {
                        "type": "Array",
                        "defaultValue": [
                            {
                                "schema": "UA_1C_staging_dbo",
                                "source_table": "_InfoRg24610",
                                "dest_table": "OneCInfoRg24610"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "source_table": "ForecastingQuota",
                                "dest_table": "SalesforceForecastingQuota"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "source_table": "Forecast__History",
                                "dest_table": "SalesforceForecastHistory"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "source_table": "Project_Team_Member__c",
                                "dest_table": "SalesforceProjectTeamMember"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "source_table": "Sales_Team_Member__c",
                                "dest_table": "SalesforceSalesTeamMember"
                            },
                            {
                                "schema": "DE_datalakesftp",
                                "source_table": "Export_DATA_RAW_2020_DE",
                                "dest_table": "DatalakeSFTPExportDataRaw2020DE"
                            },
                            {
                                "schema": "DE_datalakesftp",
                                "source_table": "RAW_DATEV_ACC_AVD_2021",
                                "dest_table": "DatalakeSFTPRawDatevAccAvd2021"
                            },
                            {
                                "schema": "DE_datalakesftp",
                                "source_table": "RAW_DATEV_ACC_AVG_2021",
                                "dest_table": "DatalakeSFTPRawDatevAccAvg2021"
                            },
                            {
                                "schema": "GLO_AzureAD",
                                "source_table": "AzureGroups",
                                "dest_table": "AzureADGroups"
                            },
                            {
                                "schema": "GLO_AzureAD",
                                "source_table": "AzureGroupMembers",
                                "dest_table": "AzureADGroupMembers"
                            },
                            {
                                "schema": "UA_1C_staging_dbo",
                                "source_table": "_AccumRg24640",
                                "dest_table": "OneCProjectForecast_AccumRg24640"
                            }
                        ]
                    },
                    "BambooHRTablesToCopy": {
                        "type": "Array",
                        "defaultValue": [
                            {
                                "schema": "DE_BambooHR_ADACH",
                                "source_table": "Employees",
                                "dest_table": "BambooHRADACHEmployee"
                            },
                            {
                                "schema": "DE_BambooHR_ADACH",
                                "source_table": "TiersTitles",
                                "dest_table": "BambooHRADACHTierTitle"
                            },
                            {
                                "schema": "PL_BambooHR_SDC",
                                "source_table": "Employees",
                                "dest_table": "BambooHRSDCEmployee"
                            },
                            {
                                "schema": "PL_BambooHR_SDC",
                                "source_table": "TiersTitles",
                                "dest_table": "BambooHRSDCTierTitle"
                            },
                            {
                                "schema": "PL_BambooHR_AITP",
                                "source_table": "Employees",
                                "dest_table": "BambooHRAITPEmployee"
                            },
                            {
                                "schema": "PL_BambooHR_AITP",
                                "source_table": "TiersTitles",
                                "dest_table": "BambooHRAITPTierTitle"
                            }
                        ]
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:28Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Dim_Employee')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ProcessAnalysisServices')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Dim_Customer')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Dim_Opportunity')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Fact_OpportunityForecast')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Dim_Currency')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Dim_ForexCurrency')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Dim_Project')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Fact_BudgetForecast')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Fact_Revenue')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Dim_Country')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_MappingOpportunityProject')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Fact_ProjectForecast')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]",
                "[concat(variables('factoryId'), '/pipelines/PL_GS_UploadBacklogDE')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Process_Stage')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Dim_TimeReportingType')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Fact_TimeReporting')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Fact_Assignment')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Fact_CalendarEvent')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Fact_EmployeeFeedback')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Dim_EmployeeKid')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Dim_EmployeeCar')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Fact_EmployeeCertification')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Dim_EmployeePassport')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Dim_EmployeeVisa')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Fact_LanguageReview')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_CompetencyMatrixEnglishSkills')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_SynapsePauseResume')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Login",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "GetSynDatabaseName",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetSynServerName",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetResourceGroupName",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetSubscriptionId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetTenantId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetClientID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "GetClientSecret",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": true
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://login.microsoftonline.com/',activity('GetTenantId').output.value,'/oauth2/token')",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            "body": {
                                "value": "@concat('grant_type=client_credentials&resource=https://management.azure.com&client_id=',activity('GetClientID').output.value,'&client_secret=',activity('GetClientSecret').output.value)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "GetClientSecret",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/ServicePrincipalClientSecret?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "GetClientID",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/ServicePrincipalClientID?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "GetTenantId",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/AzureTenantId?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "GetSubscriptionId",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/AzureSubscriptionId?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "GetResourceGroupName",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/AzureResourceGroupName?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "GetSynServerName",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/AzureSynapseServerName?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "GetSynDatabaseName",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/AzureSynapseDatabaseName?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "GetDatabaseStatus",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Login",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://management.azure.com/subscriptions/',activity('GetSubscriptionId').output.value,'/resourceGroups/',activity('GetResourceGroupName').output.value,'/providers/Microsoft.Sql/servers/',activity('GetSynServerName').output.value,'/databases/',activity('GetSynDatabaseName').output.value,'?api-version=2014-04-01')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {
                                "Authorization": {
                                    "value": "@concat(string(activity('Login').output.token_type),' ',string(activity('Login').output.access_token))",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Set DatabaseStatus",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetDatabaseStatus",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "DatabaseStatus",
                            "value": {
                                "value": "@activity('GetDatabaseStatus').output.properties.status",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "If Pause or Resume",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Set DatabaseStatus",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@or(and(equals(variables('DatabaseStatus'), 'Paused'), equals(pipeline().parameters.Action, 'resume')), and(equals(variables('DatabaseStatus'), 'Online'), equals(pipeline().parameters.Action, 'pause')))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "PauseResume SynapseDatabase",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://management.azure.com/subscriptions/',activity('GetSubscriptionId').output.value,'/resourceGroups/',activity('GetResourceGroupName').output.value,'/providers/Microsoft.Sql/servers/',activity('GetSynServerName').output.value,'/databases/',activity('GetSynDatabaseName').output.value,'/', pipeline().parameters.Action,'?api-version=2014-04-01')",
                                            "type": "Expression"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Authorization": {
                                                "value": "@concat(string(activity('Login').output.token_type),' ',string(activity('Login').output.access_token))",
                                                "type": "Expression"
                                            }
                                        },
                                        "body": {
                                            "value": "{ }",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "PauseResume SynapseDatabase_copy1",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "PauseResume SynapseDatabase",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://management.azure.com/subscriptions/',activity('GetSubscriptionId').output.value,'/resourceGroups/',activity('GetResourceGroupName').output.value,'/providers/Microsoft.Sql/servers/',activity('GetSynServerName').output.value,'/databases/',activity('GetSynDatabaseName').output.value,'/', pipeline().parameters.Action,'?api-version=2014-04-01')",
                                            "type": "Expression"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Authorization": {
                                                "value": "@concat(string(activity('Login').output.token_type),' ',string(activity('Login').output.access_token))",
                                                "type": "Expression"
                                            }
                                        },
                                        "body": {
                                            "value": "{ }",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "KeyVaultName": {
                        "type": "string",
                        "defaultValue": "kv-avenga-analytics-dev"
                    },
                    "Action": {
                        "type": "string",
                        "defaultValue": "pause"
                    }
                },
                "variables": {
                    "DatabaseStatus": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Azure"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:21Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_RefreshDatabaseSchema')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "GetTables",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@concat('SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = ''BASE TABLE'' ', if(equals(pipeline().parameters.SchemaName, null) , '', concat('AND TABLE_SCHEMA = ''', pipeline().parameters.SchemaName, '''')))",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleUsers"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachTable",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "GetTables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('GetTables').output.value",
                                "type": "Expression"
                            },
                            "batchCount": 50,
                            "activities": [
                                {
                                    "name": "RecreateTableSchema",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "@concat('SELECT * FROM [', item().TABLE_SCHEMA, '].[', item().TABLE_NAME, '] WHERE 1=2')",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "AzureSqlSink",
                                            "preCopyScript": {
                                                "value": "@{concat('IF NOT EXISTS (SELECT * FROM sys.schemas WHERE  name = N''', item().TABLE_SCHEMA, ''') ', 'EXEC(''CREATE SCHEMA [',  item().TABLE_SCHEMA,'] AUTHORIZATION [dbo]''); ','\n', 'IF OBJECT_ID(''', item().TABLE_SCHEMA,'.', item().TABLE_NAME, ''', ''U'') IS NOT NULL DROP TABLE [', item().TABLE_SCHEMA, '].[', item().TABLE_NAME, '];')}",
                                                "type": "Expression"
                                            },
                                            "tableOption": "autoCreate",
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_DLS_DatalakeRep",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": {
                                                    "value": "@item().TABLE_SCHEMA",
                                                    "type": "Expression"
                                                },
                                                "TableName": {
                                                    "value": "@item().TABLE_NAME",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_DLD_DatalakeDev",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": {
                                                    "value": "@item().TABLE_SCHEMA",
                                                    "type": "Expression"
                                                },
                                                "TableName": {
                                                    "value": "@item().TABLE_NAME",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "SchemaName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "DataLakeScramble"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_CopyData')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach Tables",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.Tables",
                                "type": "Expression"
                            },
                            "batchCount": 50,
                            "activities": [
                                {
                                    "name": "Copy Table Data",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 1,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "AzureSqlSink",
                                            "preCopyScript": {
                                                "value": "@{concat('TRUNCATE TABLE [', item().schema, '].[', item().table, ']')}",
                                                "type": "Expression"
                                            },
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_DLS_DatalakeRep",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": {
                                                    "value": "@item().schema",
                                                    "type": "Expression"
                                                },
                                                "TableName": {
                                                    "value": "@item().table",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_DLD_DatalakeDev",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": {
                                                    "value": "@item().schema",
                                                    "type": "Expression"
                                                },
                                                "TableName": {
                                                    "value": "@item().table",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "Tables": {
                        "type": "array",
                        "defaultValue": [
                            {
                                "schema": "GLO_Salesforce",
                                "table": "User"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "table": "Account"
                            }
                        ]
                    }
                },
                "folder": {
                    "name": "DataLakeScramble"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_SalesforceUser')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy SF User",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Id]\n      ,[Username]\n      ,[LastName]\n      ,[FirstName]\n      ,[Name]\n      ,[Department]\n      ,[Title]\n      ,[Email]\n      ,[IsActive]\n      ,[ManagerId]\n      ,[CreatedDate]\n      ,[LastModifiedDate]\n  FROM [GLO_Salesforce].[User]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[SalesforceUser];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "User"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "SalesforceUser"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_SalesforceCurrencyType')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy SF CurrencyType",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Id]\n      ,[IsoCode]\n      ,[ConversionRate]\n      ,[DecimalPlaces]\n      ,[IsActive]\n      ,[IsCorporate]\n      ,[CreatedDate]\n      ,[LastModifiedDate]\n  FROM [GLO_Salesforce].[CurrencyType]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[SalesforceCurrencyType];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "CurrencyType"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "SalesforceCurrencyType"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_SalesforceOpportunityFieldHistory')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy SF OppFieldHistory",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Id]\n      ,[IsDeleted]\n      ,[OpportunityId]\n      ,[CreatedDate]\n      ,[Field]\n      ,[OldValue]\n      ,[NewValue]\n  FROM [GLO_Salesforce].[OpportunityFieldHistory]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[SalesforceOpportunityFieldHistory];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "OpportunityFieldHistory"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "SalesforceOpportunityFieldHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_SalesforceAccount')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy SF Account",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Id]\n      ,[IsDeleted]\n      ,[Name]\n      ,[Type]\n      ,[ParentId]\n      ,[OwnerId]\n      ,[Industry]\n      ,[Account_type__c]\n      ,[Account_Number__c]\n      ,[CreatedDate]\n      ,[LastModifiedDate]\n      ,[Data_Source__c]\n      ,[Bullhorn_Id__c]\n      ,[BillingCountryCode]\n      ,[Projectile_Customer_Code__c]\n      ,[Projectile_Customer_Number__c]\n      ,[Status__c]\n  FROM [GLO_Salesforce].[Account]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[SalesforceAccount];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Account"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "SalesforceAccount"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Dim_Currency')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Currency Dimension",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadCurrency]",
                            "storedProcedureParameters": {
                                "EffectiveDate": {
                                    "value": null,
                                    "type": "DateTime"
                                },
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Dim_Customer')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Customer Dimension",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadCustomer]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "variables": {
                    "CorebaseClientTable": {
                        "type": "Array",
                        "defaultValue": [
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "Client",
                                "dest_table": "CorebaseClient"
                            }
                        ]
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Fact_OpportunityForecast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Forecast Fact SF",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactOpportunityForecastSalesforce]",
                            "storedProcedureParameters": {
                                "EffectiveDate": {
                                    "value": null,
                                    "type": "DateTime"
                                },
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Load Fact Opp Forecast Bullhorn PL",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Load Forecast Fact SF",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactOpportunityForecastBullhornPL]",
                            "storedProcedureParameters": {
                                "EffectiveDate": {
                                    "value": null,
                                    "type": "DateTime"
                                },
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_SalesforceOpportunity')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy SF Opportunity",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Id]\n      ,[Name]\n      ,[OwnerId]\n      ,[AccountId]\n      ,[ContractId]\n      ,[Region__c]\n      ,[StageName]\n      ,[Probability]\n      ,[CurrencyIsoCode]\n      ,[CreatedDate]\n      ,[LastModifiedDate]\n      ,[IsDeleted]\n      ,[Segment__c]\n      ,[Type_of_Services__c]\n      ,[CloseDate] = CAST([CloseDate] AS DATE)\n      ,[Project_Duration__c] = CASE WHEN ISNUMERIC([Project_Duration__c]) = 1 THEN [Project_Duration__c] ELSE NULL END\n      ,[Project_Start__c] = CAST([Project_Start__c] AS DATE)\n      ,[Opportunity_Number__c]\n      ,[Industry_Account__c]\n      ,[Delivery_Country__c]\n      ,[Actual_Deal_Closure__c]\n      ,[Is_On_Hold__c]\n      ,[RecordTypeId]\n      ,[DA_Project_Number__c]\n      ,[Project_End__c]\n      ,[Corebase_Project_ID__c]\n      ,[Opportunity_Status__c]\n      ,[Amount]\n  FROM [GLO_Salesforce].[Opportunity]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[SalesforceOpportunity];",
                                "tableOption": "autoCreate",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Opportunity"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "SalesforceOpportunity"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Dim_Opportunity')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load SF and BH Opportunity",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadOpportunity]",
                            "storedProcedureParameters": {
                                "EffectiveDate": {
                                    "value": null,
                                    "type": "Datetime"
                                },
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_SendMail')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "SendMail",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://prod-60.westeurope.logic.azure.com:443/workflows/f3eea3577037413b8e5c3650a1a62977/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=z0NOxwS4UJPsX5BPu65tqFGmTU7ji7106z2STM2F59M",
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"title\":\"@{pipeline().parameters.Title}\",\n\"body\":\"@{pipeline().parameters.BodyText}\",\n\"bodyHTML\":\"@{pipeline().parameters.BodyHTML}\",\n\"toAddress\":\"@{pipeline().parameters.TO_Address}\",\n\"ccAddress\":\"@{pipeline().parameters.CC_Address}\",\n\"datafactoryName\":\"@{pipeline().DataFactory}\",\n\"pipelineName\":\"@{pipeline().Pipeline}\",\n\"pipelineRunId\":\"@{pipeline().RunId}\",\n\"time\":\"@{pipeline().TriggerTime}\",\n\"color\":\"@{pipeline().parameters.Color}\"\n}",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "TO_Address": {
                        "type": "string",
                        "defaultValue": "roman.dovhanyk@avenga.com"
                    },
                    "CC_Address": {
                        "type": "string"
                    },
                    "Title": {
                        "type": "string",
                        "defaultValue": "Test mail"
                    },
                    "BodyHTML": {
                        "type": "string",
                        "defaultValue": "<h1>Body text</h1>"
                    },
                    "Color": {
                        "type": "string",
                        "defaultValue": "Green"
                    },
                    "BodyText": {
                        "type": "string",
                        "defaultValue": "Text message"
                    }
                },
                "folder": {
                    "name": "Azure"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:21Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_ResumePauseProcess')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Process DWH",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Log process start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Process",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@activity('Log process start').output.firstRow.ProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Resume Database",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_SynapsePauseResume",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "KeyVaultName": {
                                    "value": "@pipeline().globalParameters.KeyVaultName",
                                    "type": "Expression"
                                },
                                "Action": "resume"
                            }
                        }
                    },
                    {
                        "name": "Log process start",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Resume Database",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "DECLARE\n\t@ProcessID INT,\n\t@ProcessTree NVARCHAR(256);\n\nEXEC [dbo].[LogProcessStart] null, 'ADF Main Process', @ProcessID OUT, @ProcessTree OUT;\n\nSELECT @ProcessID AS ProcessID, @ProcessTree AS ProcessTree;",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "dbo",
                                    "TableName": "parameter"
                                }
                            }
                        }
                    },
                    {
                        "name": "Log process completion",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Process DWH",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LogProcessCompletion]",
                            "storedProcedureParameters": {
                                "ProcessID": {
                                    "value": {
                                        "value": "@int(string(activity('Log process start').output.firstRow.ProcessID))",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Log process failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Process DWH",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LogProcessError]",
                            "storedProcedureParameters": {
                                "ErrorMessage": {
                                    "value": "Error in Data Factory main process.",
                                    "type": "String"
                                },
                                "ProcessID": {
                                    "value": {
                                        "value": "@int(string(activity('Log process start').output.firstRow.ProcessID))",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Pause Database",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Process AAS EmployeeDistribution Model",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_SynapsePauseResume",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "KeyVaultName": {
                                    "value": "@pipeline().globalParameters.KeyVaultName",
                                    "type": "Expression"
                                },
                                "Action": "pause"
                            }
                        }
                    },
                    {
                        "name": "Process AAS EmployeeDistribution Model",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Log process completion",
                                "dependencyConditions": [
                                    "Succeeded",
                                    "Skipped"
                                ]
                            },
                            {
                                "activity": "Log process failure",
                                "dependencyConditions": [
                                    "Succeeded",
                                    "Skipped"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ProcessAnalysisServices",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "DatabaseName": "EmployeeDistribution",
                                "KeyVaultName": {
                                    "value": "@pipeline().globalParameters.KeyVaultName",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Process')]",
                "[concat(variables('factoryId'), '/pipelines/PL_SynapsePauseResume')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ProcessAnalysisServices')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_Process')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Refresh Salesforce Schema",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Refresh PL BambooHR SDC Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_RefreshDatabaseSchema",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "SchemaName": "GLO_Salesforce"
                            }
                        }
                    },
                    {
                        "name": "Copy Data",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Convert To Array",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_CopyData",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "Tables": {
                                    "value": "@variables('TablesArr')",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Copy Scrambled Google Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_GoogleAllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Refresh Corebase Schema",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Refresh Salesforce Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_RefreshDatabaseSchema",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "SchemaName": "UA_CoreBase_staging_dbo"
                            }
                        }
                    },
                    {
                        "name": "Convert To Array",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Refresh 1C Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Refresh Projectile Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "TablesArr",
                            "value": {
                                "value": "@array(pipeline().parameters.TablesToCopy)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Refresh 1C Schema",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_RefreshDatabaseSchema",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "SchemaName": "UA_1C_staging_dbo"
                            }
                        }
                    },
                    {
                        "name": "Copy Scrambled 1C Tables",
                        "description": "1C table - [UA_1C_staging_dbo].[_InfoRg24484]",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled CorporateUser",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_Scramble1C_AllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Refresh Bullhorn Schema Stage_dbo",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Refresh Corebase Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_RefreshDatabaseSchema",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "SchemaName": "PL_Bullhorn_staging_dbo"
                            }
                        }
                    },
                    {
                        "name": "Copy Scrambled DE DATEV Tables",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleDatevAllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled wusr_TBL_ObrotyWKNew",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled CorporateUser",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleWusrTBLObrotyWKNew",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Projectile tables",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ProjectileAllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Salesforce Tables",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleSalesforceAllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Corebase Tables",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleCorebaseAllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Refresh Bullhorn Schema_dbo",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Refresh Bullhorn Schema Stage_dbo",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_RefreshDatabaseSchema",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "SchemaName": "PL_Bullhorn_dbo"
                            }
                        }
                    },
                    {
                        "name": "Refresh Projectile Schema",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Refresh Bullhorn Schema_dbo",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_RefreshDatabaseSchema",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "SchemaName": "projectile"
                            }
                        }
                    },
                    {
                        "name": "Copy Scrambled CorporateUser",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled AzureAD Tables",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "Copy Scrambled Corebase Tables",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "Copy Scrambled BambooHR Employee",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "Copy Scrambled Google Tables",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "Copy Scrambled DE DATEV Tables",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "Copy Scrambled Projectile tables",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "Copy Scrambled Salesforce Tables",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleBullhornCorporateUser",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Refresh DE BambooHR ADACH Schema",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_RefreshDatabaseSchema",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "SchemaName": "DE_BambooHR_ADACH"
                            }
                        }
                    },
                    {
                        "name": "Refresh PL BambooHR SDC Schema",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Refresh PL BambooHR AITP Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_RefreshDatabaseSchema",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "SchemaName": "PL_BambooHR_SDC"
                            }
                        }
                    },
                    {
                        "name": "Refresh PL BambooHR AITP Schema",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Refresh DE BambooHR ADACH Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_RefreshDatabaseSchema",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "SchemaName": "PL_BambooHR_AITP"
                            }
                        }
                    },
                    {
                        "name": "Copy Scrambled BambooHR Employee",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleBambooHRAllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled AzureAD Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_AzureADAllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "TablesToCopy": {
                        "type": "string",
                        "defaultValue": [
                            {
                                "schema": "projectile",
                                "table": "ttimebit"
                            },
                            {
                                "schema": "projectile",
                                "table": "tworkingtime"
                            },
                            {
                                "schema": "projectile",
                                "table": "tjob"
                            },
                            {
                                "schema": "projectile",
                                "table": "agroup"
                            },
                            {
                                "schema": "projectile",
                                "table": "axref"
                            },
                            {
                                "schema": "PL_Bullhorn_dbo",
                                "table": "ClientCorporation"
                            },
                            {
                                "schema": "PL_Bullhorn_dbo",
                                "table": "Candidate"
                            },
                            {
                                "schema": "PL_Bullhorn_dbo",
                                "table": "ClientContact"
                            },
                            {
                                "schema": "PL_Bullhorn_dbo",
                                "table": "Lead"
                            },
                            {
                                "schema": "PL_Bullhorn_dbo",
                                "table": "Opportunity"
                            },
                            {
                                "schema": "PL_Bullhorn_dbo",
                                "table": "JobOrder"
                            },
                            {
                                "schema": "PL_Bullhorn_dbo",
                                "table": "Placement"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "table": "Contact"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "table": "CurrencyType"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "table": "OpportunityFieldHistory"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "table": "RecordType"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "table": "Sales_Team_Member__c"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "TimeReport"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "LanguageReview"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "Visa"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "VisaType"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "Country"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "FreeTimeManagement"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "FreeTimeManagementRequest"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "Calendar"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "ProjectPositionPeriod"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "ProjectPosition"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "Assignment"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "EmployeeCertifications"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "Position"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "EmployeePosition"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "EmployeePositionTiers"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "EmployeeRecordType"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "EmployeeRecordStatus"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "EmployeeEmployment"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "EmployeeCars"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "EmployeeCertifications"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "Technology"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "Department"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "DepartmentTiers"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "DepartmentTierTitles"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "ListItem"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "Branche"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "SOWPosition"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "table": "SysFTMType"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "Appointment"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "AppointmentAttendees"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "Branch"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "BusinessSector"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "Candidate"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CandidateBusinessSectors"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CandidateCategories"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CandidateCertifications"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CandidateEducation"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CandidateEncryptedData"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CandidateReference"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CandidateSecondaryOwners"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CandidateSkills"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CandidateSpecialties"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CandidateWorkHistory"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "Category"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CategoryPrivateLabels"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CategorySkills"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CertificationGroup"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CertificationGroupCertifications"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "ClientContact"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "ClientContactBusinessSectors"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "ClientContactCategories"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "ClientContactSecondaryOwners"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "ClientContactSkills"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "ClientCorporation"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "ClientCorporationCertification"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "ClientCorporationCertificationGroups"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "ClientCorporationCustomObjectInstance"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "ClientCorporationLeads"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "ClientCorporationRequirements"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CorporateUser"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CorporateUserBranches"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CorporateUserDepartments"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "CorporateUserPrivateLabels"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryAppointment"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryCandidate"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryCandidateCertification"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryClientContact"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryClientCorporation"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryClientCorporationCustomObjectInstance"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryCorporateUser"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryJobOrder"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryJobOrderCustomObjectInstance"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryJobSubmission"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryLead"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryOpportunity"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryOpportunityCustomObjectInstance"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryPersonCustomObjectInstance"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryPlacement"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryPlacementCertification"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryPlacementCustomObjectInstance"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "EditHistoryTask"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "FieldMaps"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "JobOrder"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "JobOrderAssignedUsers"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "JobOrderBusinessSectors"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "JobOrderCategories"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "JobOrderCertificationGroups"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "JobOrderCertifications"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "JobOrderCustomObjectInstance"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "JobOrderSkill"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "JobOrderSpecialties"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "JobSubmission"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "Lead"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "LeadAssignedTo"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "LeadCandidates"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "LeadCategories"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "LeadClientContacts"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "LeadSkills"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "LeadSpecialties"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "Note"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "NoteEntity"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "Opportunity"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "OpportunityAssignedUsers"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "OpportunityBusinessSectors"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "OpportunityCertifications"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "OpportunityCustomObjectInstance"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "OpportunitySkills"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "Placement"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "PlacementCertifications"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "PlacementChangeRequest"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "PlacementChangeRequestEncryptedData"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "PlacementCommission"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "PlacementCustomObjectInstance"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "PlacementEncryptedData"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "PrivateLabel"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "Sendout"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "Skill"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "Specialty"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "Tearsheet"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "TearsheetContacts"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "TearsheetJobs"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "TearsheetLeads"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "TearsheetOpportunities"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "UserHousingComplexUnit"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "WorkersCompensation"
                            },
                            {
                                "schema": "PL_Bullhorn_staging_dbo",
                                "table": "WorkersCompensationRate"
                            },
                            {
                                "schema": "UA_1C_staging_dbo",
                                "table": "_InfoRg24610"
                            },
                            {
                                "schema": "gsuite",
                                "table": "GoogleGroups"
                            },
                            {
                                "schema": "GLO_AzureAD",
                                "table": "AzureGroups"
                            }
                        ]
                    }
                },
                "variables": {
                    "TablesArr": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "DataLakeScramble"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-24T10:49:04Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_RefreshDatabaseSchema')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_CopyData')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_GoogleAllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_Scramble1C_AllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleDatevAllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleWusrTBLObrotyWKNew')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ProjectileAllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleSalesforceAllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleCorebaseAllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleBullhornCorporateUser')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleBambooHRAllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_AzureADAllTables')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_CorebaseEmployeeData')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase Employee Data",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "with cte_EmpPositions as \n(\n\tSELECT ep.[Id] -- Id Employee\n\t,ep.[EmployeeId]\n\t,ep.[StartDate]\n\t,dtt.[name] as [PositionName]\n\t,ep.[TechnologyId]\n\t,ep.[EmploymentType]\n\t,ep.[Billable]\n\t,ep.[FullTimeEquivalent]\n\t,ep.[CreatedOn]\n\t,ep.[CreatedBy]\n\t,ep.[ModifiedOn]\n\t,ep.[ModifiedBy]\n\t,ep.[DeletedOn]\n\t,ept.DepartmentId as IdDepartment\n\t,ROW_NUMBER() over (partition by ep.EmployeeId order by ep.StartDate desc) as row_id\n\tFROM [UA_CoreBase_staging_dbo].[EmployeePosition] ep\n\t\t--left join [UA_CoreBase_staging_dbo].[Position] p on p.id = ep.PositionId\n\t\tLEFT OUTER JOIN [UA_CoreBase_staging_dbo].[EmployeePositionTiers] AS ept ON ep.[Id] = ept.[EmployeePositionId]\n\t\tLEFT OUTER JOIN [UA_CoreBase_staging_dbo].[DepartmentTierTitles] AS dtt ON ept.[DepartmentTierTitleId] = dtt.[Id]\n\twhere ep.[DeletedOn] is null\n),\ncte_EmploymentHistory AS \n(\n\tSELECT \n\t\tEmployeeID,\n\t\tEndDate,\n\t\tROW_NUMBER() OVER(PARTITION by EmployeeID ORDER BY StartDate DESC) AS RowNum\n\tFROM [UA_CoreBase_staging_dbo].[EmployeeEmployment]\n)\nSELECT\n\t Email = e.[Email],\n\t FirstName = e.[FirstName], \n\t LastName = e.[LastName], \n\t FullName = e.[FullName], \n\t TechnologyName = tli.Name,\n\t TierName = dt.[Value],\n\t SeniorityName = case when dt.Value = 1 then 'Trainee' when dt.Value in (2,3) then 'Junior' when dt.Value in (4,5) then 'Middle' when dt.Value in (6,7) then 'Senior' else NULL end,\n\t CompetencyName = tli.Name,\n\t CountryName = 'Ukraine',\n\t BranchName = b.BrancheName,\n\t DepartmentName = d.DepartmentName,\n\t Gender = CASE WHEN e.[Gender] = 1 THEN 'Male' ELSE 'Female' END,\n\t IsCertified = CASE  WHEN EXISTS(SELECT 1 FROM [UA_CoreBase_staging_dbo].[EmployeeCertifications] c WHERE c.[EmployeeId] = e.Id)  THEN 'Yes' ELSE 'No'  END,\n\t StartDate = e.[StartDate],\n\t EndDate = eh.[EndDate],\n\t IsActive = e.[IsActive],\n\t ExternalId = e.[Id],\n\t EmploymentType = cast(CASE WHEN ep.[EmploymentType] = 0 THEN 'Employee' WHEN ep.[EmploymentType] = 1 THEN 'Contractor' WHEN ep.[EmploymentType] = 2 THEN 'Consultant' WHEN ep.[EmploymentType] = 3 THEN 'SupportStaff' END AS NVARCHAR(100)),\n\t HrPartnerId = e.[HrPartnerId],\n\t ManagerId = e.IdSuperior,\n\t Billable = ep.Billable,\n\t FullTimeEquivalent = ep.[FullTimeEquivalent],\n\t PositionName = SUBSTRING(ep.[PositionName], 1, 250),\n\t UserLogin = e.[UserLogin],\n\t Address = e.[Address],\n\t PhoneNumber = e.[PhoneNumber],\n\t Birthday = e.[Birthday],\n\t EmployeePositionRow_id = ep.row_id,\n\t EmployeePositionCreatedOn = ep.CreatedOn\nFROM [UA_CoreBase_staging_dbo].[Employee] e\n\tinner join cte_EmpPositions ep on e.[Id] = ep.[EmployeeId] --and ep.[row_id] = 1 /*move historical data to synapse*/\n\tleft join [UA_CoreBase_staging_dbo].[EmployeePositionTiers] ept on ept.[EmployeePositionId] = ep.[id]\n\tleft join [UA_CoreBase_staging_dbo].[DepartmentTiers] dt on dt.[id] = ept.[DepartmentTierId]\n\tleft join [UA_CoreBase_staging_dbo].[DepartmentTierTitles] dtt on dtt.[id] = dt.[TitleId]\n\tleft join [UA_CoreBase_staging_dbo].[DepartmentTierTitles] dtt1 on dtt1.[id] = ept.[DepartmentTierTitleId]\n\tleft join [UA_CoreBase_staging_dbo].[Technology] tli on tli.id = ep.[TechnologyId]\n\t--left join [UA_CoreBase_staging_dbo].[ListItem] tli on tli.id = ISNULL(ep.[TechnologyId], e.[TechnologyId]) -- this is depricated and get from the Tehnology table which above\n\tleft join [UA_CoreBase_staging_dbo].Department d on d.Id = ISNULL(ISNULL( ept.[DepartmentId], dt.[DepartmentId]),ep.IdDepartment)\n\tleft join [UA_CoreBase_staging_dbo].Branche b on b.Id = e.[IdBranch]\n\tleft join cte_EmploymentHistory eh on eh.[EmployeeID] = e.[ID] and eh.[RowNum] = 1\nWHERE  e.[Id] <> 0 and ep.[DeletedOn] is NULL -- and e.IsActive = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[CorebaseEmployeeData];",
                                "tableOption": "autoCreate",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "Employee"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "CorebaseEmployeeData"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-03T16:27:29Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_CorebaseProject')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase Project",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Id]\n      ,[Name]\n      ,[StartDate]\n      ,[EndDate]\n      ,[Status]\n      ,[ClientId]\n      ,[DepartmentId]\n      ,[ParentId]\n      ,[Description]\n      ,[CreatedOn]\n  FROM [UA_CoreBase_staging_dbo].[Project]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[CorebaseProject];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "Project"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "CorebaseProject"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_1C_InfoRg24484')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy 1C InfoRg24484",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [_Fld24485]\n      ,[_Fld24500]\n      ,[_Fld24504]\n      ,[_Fld24522]\n      ,[_Fld24526]\n      ,[_Fld24538]\n  FROM [UA_1C_staging_dbo].[_InfoRg24484]\nWHERE 1=1\nAND [_Fld24526] = N'000001001'\nAND [_Fld24489] = N'ДДО'",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[OneCInfoRg24484];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_1C_staging_dbo",
                                    "TableName": "_InfoRg24484"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "OneCInfoRg24484"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/1C"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Dim_ForexCurrency')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Forex Currency Dimension",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadForexCurrency]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Dim_Project')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Ukraine and Germany Projects",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadProject]",
                            "storedProcedureParameters": {
                                "EffectiveDate": {
                                    "value": null,
                                    "type": "Datetime"
                                },
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Fact_Revenue')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Ukraine Revenue",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactRevenue1CUA]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Load Germany Revenue",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Load Ukraine Revenue",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactRevenueDatevDE]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Load Poland Revenue",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Load Germany Revenue",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactRevenueAssecoPL]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Fact_BudgetForecast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Budget Forecast Fact",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactBudgetForecast]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Dim_Country')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Country Dimension",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadCountry]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleExportDATARAW2020DE')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Export_DATA_RAW_2020_DE",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Konto]\n      ,[Gegenkonto]\n      ,[Umsatz Soll] = CASE WHEN ISNULL(TRY_PARSE([Umsatz Soll] AS DECIMAL(19, 4) USING 'de-DE'), 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 99000) + 1000 ELSE 0 END\n      ,[Umsatz Haben] = CASE WHEN ISNULL(TRY_PARSE([Umsatz Haben] AS DECIMAL(19, 4) USING 'de-DE'), 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 99000) + 1000 ELSE 0 END\n      ,[Kurs]\n      ,[Belegdatum]\n      ,[Belegfeld 1]\n      ,[Belegfeld 2]\n      ,[Buchungstext]\n      ,[F�lligkeit]\n      ,[KOST1 - Kostenstelle]\n      ,[KOST2 - Kostenstelle]\n      ,[Steuersatz] = CASE WHEN ISNULL(TRY_PARSE([Steuersatz] AS DECIMAL(19, 4) USING 'de-DE'), 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 99000) + 1000 ELSE 0 END\n      ,[EU-Land]\n      ,[Stapel-Nr.]\n      ,[MandantenNr]\n      ,[Wirtschaftsjahr]\n      ,[Monat]\n  FROM [DE_datalakesftp].[Export_DATA_RAW_2020_DE]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [DE_datalakesftp].[Export_DATA_RAW_2020_DE];",
                                "writeBehavior": "insert",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_datalakesftp",
                                    "TableName": "Export_DATA_RAW_2020_DE"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_datalakesftp",
                                    "TableName": "Export_DATA_RAW_2020_DE"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Datev"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleWusrTBLObrotyWKNew')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled wusr_TBL_ObrotyWKNew",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT \n\t[gniazdo;KL], \n\t[kwota] = CASE WHEN [kwota] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 9900) + 100 ELSE 0 END, \n\t[symwl], \n\t[gi], \n\t[konto], \n\t[gniazdo;TP],\n\t[gniazdo;PD], \n\t[DataRRMM],\n\t[Nazwa1],\n\t[id], \n\t[Gniazdo;PR]\nFROM [PL_Asseco_staging_dbo].[wusr_TBL_ObrotyWKNew]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [PL_Asseco_staging_dbo].[wusr_TBL_ObrotyWKNew];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "id",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "id",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "gniazdo;KL",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "gniazdo;KL",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "kwota",
                                            "type": "Int32"
                                        },
                                        "sink": {
                                            "name": "kwota",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "symwl",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "symwl",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "gi",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "GI",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "konto",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "konto",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "gniazdo;TP",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "gniazdo;TP",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "gniazdo;PD",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "gniazdo;PD",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "DataRRMM",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "DataRRMM",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Nazwa1",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Nazwa1",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Gniazdo;PR",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "gniazdo;PR",
                                            "type": "String"
                                        }
                                    }
                                ]
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Asseco_staging_dbo",
                                    "TableName": "wusr_TBL_ObrotyWKNew"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Asseco_staging_dbo",
                                    "TableName": "wusr_TBL_ObrotyWKNew"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_MappingOpportunityProject')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Refresh Corebase Mapping",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT DISTINCT\n\t [OpportunityId] = o.id \n\t,[ExternalId] = [_fld24615]\n\t,[SourceSystemName] = 'Corebase'\nFROM [UA_1C_staging_dbo].[_InfoRg24610] m \n\tINNER JOIN [GLO_Salesforce].[Opportunity] o ON m.[_fld24614] = o.[Opportunity_Number__c]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "DELETE FROM [stage].[MappingOpportunityProject] WHERE [SourceSystemName] = 'Corebase';",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_1C_staging_dbo",
                                    "TableName": "_InfoRg24610"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "MappingOpportunityProject"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Refresh Projectile Mapping",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Refresh Corebase Mapping",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT \n\tId as OpportunityId,\n\tDA_Project_Number__c as ExternalId,\n\t'Projecttile' as SourceSystemName \nFROM \n\t[GLO_Salesforce].[Opportunity]  \nWHERE \nISNULL(TRIM(DA_Project_Number__c), '') <> ''",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "DELETE FROM [stage].[MappingOpportunityProject] WHERE [SourceSystemName] = 'Projecttile';",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Opportunity"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "MappingOpportunityProject"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleTproject')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled tproject",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [sysNoTs]\n      ,[sysClientId]\n      ,[sysUnique]\n      ,[sysAccess]\n      ,[sysAccessRights]\n      ,[sysCreated]\n      ,[sysCreatedBy]\n      ,[sysChanged]\n      ,[sysChangedBy]\n      ,[pProject]\n      ,[pNumber]\n      ,[pDescription] = 'Project' + [pNumber]\n      ,[pProjectBeginDatePlanning]\n      ,[pProjectEndDatePlanning]\n      ,[pExternal]\n      ,[pProductionEffort]\n      ,[pCustomer]\n      ,[capCustomer] = 'Client' + [pCustomer]\n      ,[pContact]\n      ,[capContact]\n      ,[pUnit]\n      ,[capUnit]\n      ,[pParentProject]\n      ,[capParentProject]\n      ,[pContact2]\n      ,[capContact2]\n      ,[pContact3]\n      ,[capContact3]\n      ,[pResponsible]\n      ,[capResponsible]\n      ,[pBeginTime]\n      ,[pEndTime]\n      ,[pTargetTime]\n      ,[pProjectTimePlanning]\n      ,[pActualTime]\n      ,[pActive]\n      ,[pResourceClearance]\n      ,[pLastActivityChange]\n      ,[pLastActivityChangePassive]\n      ,[pLastActivityChangeActive]\n      ,[pLastActivityChangeClosed]\n      ,[pPriority]\n      ,[pPortfolio]\n      ,[capPortfolio]\n      ,[pPrograms]\n      ,[capPrograms]\n      ,[pCurrency]\n      ,[capCurrency]\n      ,[pRate]\n      ,[pHourlyPrice] = CASE WHEN [pHourlyPrice] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 100) + 30 ELSE 0 END\n      ,[pJobPriceExternal]\n      ,[capJobPriceExternal]\n      ,[pHoursPerManDay]\n      ,[pTradeDiscount]\n      ,[pSurchargeForWorkCost]\n      ,[pOfferValueRevenue]\n      ,[pOfferValueCosts]\n      ,[pOfferValueProfit]\n      ,[pOfferValueProfitP]\n      ,[pOrderValueRevenue]\n      ,[pOrderValueCosts]\n      ,[pOrderValueProfit]\n      ,[pOrderValueProfitP]\n      ,[pTypeCommision]\n      ,[pBudget] = CASE WHEN [pBudget] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 90000) + 10000 ELSE 0 END\n      ,[pOrderNumber]\n      ,[pFixPriceShare]\n      ,[pProjectBudget] = CASE WHEN [pProjectBudget] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 90000) + 10000 ELSE 0 END\n      ,[pProjectWorkCost] = CASE WHEN [pProjectWorkCost] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 49900) + 100 ELSE 0 END\n      ,[pProjectMiscCost] = CASE WHEN [pProjectMiscCost] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 49900) + 100 ELSE 0 END\n      ,[pProjectCostPlanning] = CASE WHEN [pProjectCostPlanning] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 90000) + 10000 ELSE 0 END\n      ,[pCurrentOfferAmountBrutto] = CASE WHEN [pCurrentOfferAmountBrutto] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 90000) + 10000 ELSE 0 END\n      ,[pCurrentInvoiceAmountBrutto] = CASE WHEN [pCurrentInvoiceAmountBrutto] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 90000) + 10000 ELSE 0 END\n      ,[pActualCost] = CASE WHEN [pActualCost] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 90000) + 10000 ELSE 0 END\n      ,[pTrackedCost] = CASE WHEN [pTrackedCost] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 90000) + 10000 ELSE 0 END\n      ,[pDiffPlanActual]\n      ,[pProfitability]\n      ,[pCostUnit]\n      ,[pOrderDate]\n      ,[pPaymentTerms]\n      ,[pCostCenter]\n      ,[pBillingType]\n      ,[pBillingFlatAmount]\n      ,[pDailyFlatAmount]\n      ,[pCategory]\n      ,[pCategory2]\n      ,[pCategory3]\n      ,[pCategory4]\n      ,[pCategory5]\n      ,[pProbability]\n      ,[pTopProject]\n      ,[capTopProject]\n      ,[pCostUnitProject]\n      ,[pCategory6]\n      ,[pCategory7]\n      ,[pCurrentOrderAmountNetto]\n      ,[pCurrentOrderAmountBrutto]\n      ,[pBilledTime]\n      ,[pTimeToCompletion]\n      ,[pLimitTimeTracking]\n      ,[pFixed]\n      ,[pMSProjectId]\n      ,[pMSProjectDuration]\n      ,[pSortIndex]\n      ,[pPreventProjectPlanning]\n      ,[pFlatProjectAccess]\n      ,[pCheckedAssessTime]\n      ,[pCheckedTrackedTime]\n      ,[pLimitTimeProcess]\n      ,[pLimitTrackBegin]\n      ,[pLimitTrackEnd]\n      ,[pNote]\n      ,[pOrderCompany]\n      ,[pOOInvoiceTemplate]\n      ,[ReportSelTimeSheet]\n      ,[pIncomingOrder]\n      ,[pPaymentPeriod]\n      ,[pSurchargeProjectManagement]\n      ,[pSurchargeRisk]\n      ,[pSurchargeFixedPrice]\n      ,[pSumProjectSurcharges]\n      ,[pRevenuePrim]\n      ,[pCostsPrim]\n      ,[pProfitPrim]\n      ,[pProfitPercentPrim]\n      ,[pRevenueInternalPrim]\n      ,[pCostsInternalPrim]\n      ,[pProfitInternalPrim]\n      ,[pProfitPercentInternalPrim]\n      ,[pRevenueExternalPrim]\n      ,[pCostsExternalPrim]\n      ,[pProfitExternalPrim]\n      ,[pProfitPercentExternalPrim]\n      ,[pRevenueTotal]\n      ,[pCostsTotal]\n      ,[pProfitTotal]\n      ,[pProfitPercentTotal]\n      ,[pSurchargeFixedPriceAbs]\n      ,[pSurchargeRiskAbs]\n      ,[pSurchargeManagementAbs]\n      ,[pRevenueTotalFinal]\n      ,[pProfitTotalFinal]\n      ,[pCurrentOfferAmountNetto]\n      ,[pCurrentInvoiceAmountNetto]\n      ,[pProfitPercentTotalFinal]\n      ,[pOriginalCampaign]\n      ,[capOriginalCampaign]\n      ,[pStartBudget]\n      ,[pExternalCosts]\n      ,[pInternalCosts]\n      ,[pFreeBudget]\n      ,[pRiskTotalSum]\n      ,[pRiskCSTSum]\n      ,[pRiskCST001]\n      ,[pRiskCST002]\n      ,[pRiskCST003]\n      ,[pRiskCST004]\n      ,[pRiskCST005]\n      ,[pRiskECOSum]\n      ,[pRiskECO001]\n      ,[pRiskECO002]\n      ,[pRiskECO003]\n      ,[pRiskECO004]\n      ,[pRiskECO005]\n      ,[pRiskRESSum]\n      ,[pRiskRES001]\n      ,[pRiskRES002]\n      ,[pRiskRES003]\n      ,[pRiskRES004]\n      ,[pRiskRES005]\n      ,[pRiskIMPSum]\n      ,[pRiskIMP001]\n      ,[pRiskIMP002]\n      ,[pRiskIMP003]\n      ,[pRiskIMP004]\n      ,[pRiskIMP005]\n      ,[pCashDiscount]\n      ,[pRestTimeState]\n      ,[pOrderNumber2]\n      ,[pNumberOld]\n      ,[pInventoryTurnover]\n      ,[pPotConfValue]\n      ,[pContingent]\n      ,[pAddCopyOfReceipts]\n      ,[pBsmFlag]\n      ,[pLimitTimeProject]\n      ,[pCreatedBaseline]\n      ,[capCreatedBaseline]\n      ,[pEffortEstimationCheck]\n      ,[pEffortEstimationDescription]\n      ,[pOfferCheck]\n      ,[pOfferDescription]\n      ,[pPOCheck]\n      ,[pPODescription]\n      ,[pInternalKikOffCheck]\n      ,[pInternalKickOffDescription]\n      ,[pIBPChecklistCheck]\n      ,[pIBPChecklistDescription]\n      ,[pExternalKickOffCheck]\n      ,[pExternalKickOffDescription]\n      ,[pUXConceptCheck]\n      ,[pUXConceptDescription]\n      ,[pDecreasedTechnicalConceptCheck]\n      ,[pDecreasedTechnicalConceptDescription]\n      ,[pBacklogCheck]\n      ,[pBacklogDescription]\n      ,[pTestplanCheck]\n      ,[pTestplanDescription]\n      ,[pQSRealeaseCheck]\n      ,[pQSRealeaseDescription]\n      ,[pCustomerAcceptanceCheck]\n      ,[pCustomerAcceptanceDescription]\n      ,[pFinishedProjectReportCheck]\n      ,[pFinishedProjectReportDescription]\n      ,[pKeyAccountManager]\n      ,[capKeyAccountManager]\n      ,[pReporting]\n      ,[pHideTimeline]\n      ,[pLastTrackingRestriction]\n      ,[pSurchargeManagement]\n      ,[pBudgetSubInternalSum]\n      ,[pBudgetSubExternalSum]\n      ,[pBudgetSubDifference]\n      ,[pSurchargeSubFixedPriceAbs]\n      ,[pSurchargeSubRiskAbs]\n      ,[pSurchargeSubManagementAbs]\n      ,[pSurchargeFixedPriceAbsSum]\n      ,[pSurchargeRiskAbsSum]\n      ,[pSurchargeManagementAbsSum]\n      ,[pProjectCategory]\n  FROM [projectile].[tproject]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [projectile].[tproject];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "projectile",
                                    "TableName": "tproject"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "projectile",
                                    "TableName": "tproject"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Projectile"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSalesforceUser')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Salesforce User",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[Id]\n\t,[Username] = \n\t\tCASE WHEN COALESCE([Username], '') = ''\n\t\t\t\tTHEN [Username]\n\t\t\t WHEN CHARINDEX('@', [Username]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([Username])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([Username]), CHARINDEX('@', [Username]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([Username], LEN([Username]) - CHARINDEX('@', [Username])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([Username], LEN([Username]) - CHARINDEX('@', [Username]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n\t,[LastName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [LastName]), 2)\n\t,[FirstName] = CONVERT(NVARCHAR(32), HashBytes('MD5',[FirstName]), 2)\n\t,[Name] = CONVERT(NVARCHAR(32), HashBytes('MD5', [Name]), 2)\n\t,[CompanyName]\n\t,[Division]\n\t,[Department]\n\t,[Title]\n\t,[Street]\n\t,[City]\n\t,[State]\n\t,[PostalCode]\n\t,[Country]\n\t,[StateCode]\n\t,[CountryCode]\n\t,[Latitude]\n\t,[Longitude]\n\t,[GeocodeAccuracy]\n\t,[Email] =\n\t\tCASE WHEN COALESCE([Email], '') = ''\n\t\t\t\tTHEN [Email]\n\t\t\t WHEN CHARINDEX('@', [Email]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([Email])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([Email]), CHARINDEX('@', [Email]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([Email], LEN([Email]) - CHARINDEX('@', [Email])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([Email], LEN([Email]) - CHARINDEX('@', [Email]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n\t,[EmailPreferencesAutoBcc]\n\t,[EmailPreferencesAutoBccStayInTouch]\n\t,[EmailPreferencesStayInTouchReminder]\n\t,[SenderEmail]\n\t,[SenderName]\n\t,[Signature]\n\t,[StayInTouchSubject]\n\t,[StayInTouchSignature]\n\t,[StayInTouchNote]\n\t,[Phone]\n\t,[Fax]\n\t,[MobilePhone]\n\t,[Alias]\n\t,[CommunityNickname]\n\t,[BadgeText]\n\t,[IsActive]\n\t,[TimeZoneSidKey]\n\t,[UserRoleId]\n\t,[LocaleSidKey]\n\t,[ReceivesInfoEmails]\n\t,[ReceivesAdminInfoEmails]\n\t,[EmailEncodingKey]\n\t,[DefaultCurrencyIsoCode]\n\t,[CurrencyIsoCode]\n\t,[ProfileId]\n\t,[UserType]\n\t,[LanguageLocaleKey]\n\t,[EmployeeNumber]\n\t,[DelegatedApproverId]\n\t,[ManagerId]\n\t,[LastLoginDate]\n\t,[LastPasswordChangeDate]\n\t,[CreatedDate]\n\t,[CreatedById]\n\t,[LastModifiedDate]\n\t,[LastModifiedById]\n\t,[SystemModstamp]\n\t,[NumberOfFailedLogins]\n\t,[OfflineTrialExpirationDate]\n\t,[OfflinePdaTrialExpirationDate]\n\t,[UserPermissionsMarketingUser]\n\t,[UserPermissionsOfflineUser]\n\t,[UserPermissionsAvantgoUser]\n\t,[UserPermissionsCallCenterAutoLogin]\n\t,[UserPermissionsSFContentUser]\n\t,[UserPermissionsInteractionUser]\n\t,[UserPermissionsSupportUser]\n\t,[ForecastEnabled]\n\t,[UserPreferencesActivityRemindersPopup]\n\t,[UserPreferencesEventRemindersCheckboxDefault]\n\t,[UserPreferencesTaskRemindersCheckboxDefault]\n\t,[UserPreferencesReminderSoundOff]\n\t,[UserPreferencesDisableAllFeedsEmail]\n\t,[UserPreferencesDisableFollowersEmail]\n\t,[UserPreferencesDisableProfilePostEmail]\n\t,[UserPreferencesDisableChangeCommentEmail]\n\t,[UserPreferencesDisableLaterCommentEmail]\n\t,[UserPreferencesDisProfPostCommentEmail]\n\t,[UserPreferencesContentNoEmail]\n\t,[UserPreferencesContentEmailAsAndWhen]\n\t,[UserPreferencesApexPagesDeveloperMode]\n\t,[UserPreferencesReceiveNoNotificationsAsApprover]\n\t,[UserPreferencesReceiveNotificationsAsDelegatedApprover]\n\t,[UserPreferencesHideCSNGetChatterMobileTask]\n\t,[UserPreferencesDisableMentionsPostEmail]\n\t,[UserPreferencesDisMentionsCommentEmail]\n\t,[UserPreferencesHideCSNDesktopTask]\n\t,[UserPreferencesHideChatterOnboardingSplash]\n\t,[UserPreferencesHideSecondChatterOnboardingSplash]\n\t,[UserPreferencesDisCommentAfterLikeEmail]\n\t,[UserPreferencesDisableLikeEmail]\n\t,[UserPreferencesSortFeedByComment]\n\t,[UserPreferencesDisableMessageEmail]\n\t,[UserPreferencesDisableBookmarkEmail]\n\t,[UserPreferencesDisableSharePostEmail]\n\t,[UserPreferencesEnableAutoSubForFeeds]\n\t,[UserPreferencesDisableFileShareNotificationsForApi]\n\t,[UserPreferencesShowTitleToExternalUsers]\n\t,[UserPreferencesShowManagerToExternalUsers]\n\t,[UserPreferencesShowEmailToExternalUsers]\n\t,[UserPreferencesShowWorkPhoneToExternalUsers]\n\t,[UserPreferencesShowMobilePhoneToExternalUsers]\n\t,[UserPreferencesShowFaxToExternalUsers]\n\t,[UserPreferencesShowStreetAddressToExternalUsers]\n\t,[UserPreferencesShowCityToExternalUsers]\n\t,[UserPreferencesShowStateToExternalUsers]\n\t,[UserPreferencesShowPostalCodeToExternalUsers]\n\t,[UserPreferencesShowCountryToExternalUsers]\n\t,[UserPreferencesShowProfilePicToGuestUsers]\n\t,[UserPreferencesShowTitleToGuestUsers]\n\t,[UserPreferencesShowCityToGuestUsers]\n\t,[UserPreferencesShowStateToGuestUsers]\n\t,[UserPreferencesShowPostalCodeToGuestUsers]\n\t,[UserPreferencesShowCountryToGuestUsers]\n\t,[UserPreferencesHideInvoicesRedirectConfirmation]\n\t,[UserPreferencesHideStatementsRedirectConfirmation]\n\t,[UserPreferencesHideS1BrowserUI]\n\t,[UserPreferencesDisableEndorsementEmail]\n\t,[UserPreferencesPathAssistantCollapsed]\n\t,[UserPreferencesCacheDiagnostics]\n\t,[UserPreferencesShowEmailToGuestUsers]\n\t,[UserPreferencesShowManagerToGuestUsers]\n\t,[UserPreferencesShowWorkPhoneToGuestUsers]\n\t,[UserPreferencesShowMobilePhoneToGuestUsers]\n\t,[UserPreferencesShowFaxToGuestUsers]\n\t,[UserPreferencesShowStreetAddressToGuestUsers]\n\t,[UserPreferencesLightningExperiencePreferred]\n\t,[UserPreferencesPreviewLightning]\n\t,[UserPreferencesHideEndUserOnboardingAssistantModal]\n\t,[UserPreferencesHideLightningMigrationModal]\n\t,[UserPreferencesHideSfxWelcomeMat]\n\t,[UserPreferencesHideBiggerPhotoCallout]\n\t,[UserPreferencesGlobalNavBarWTShown]\n\t,[UserPreferencesGlobalNavGridMenuWTShown]\n\t,[UserPreferencesCreateLEXAppsWTShown]\n\t,[UserPreferencesFavoritesWTShown]\n\t,[UserPreferencesRecordHomeSectionCollapseWTShown]\n\t,[UserPreferencesRecordHomeReservedWTShown]\n\t,[UserPreferencesFavoritesShowTopFavorites]\n\t,[UserPreferencesExcludeMailAppAttachments]\n\t,[UserPreferencesSuppressTaskSFXReminders]\n\t,[UserPreferencesSuppressEventSFXReminders]\n\t,[UserPreferencesPreviewCustomTheme]\n\t,[UserPreferencesHasCelebrationBadge]\n\t,[UserPreferencesUserDebugModePref]\n\t,[UserPreferencesSRHOverrideActivities]\n\t,[UserPreferencesNewLightningReportRunPageEnabled]\n\t,[UserPreferencesNativeEmailClient]\n\t,[UserPreferencesSendListEmailThroughExternalService]\n\t,[UserPreferencesHideBrowseProductRedirectConfirmation]\n\t,[UserPreferencesHideOnlineSalesAppWelcomeMat]\n\t,[ContactId]\n\t,[AccountId]\n\t,[CallCenterId]\n\t,[Extension]\n\t,[FederationIdentifier] = \n\t\tCASE WHEN COALESCE([FederationIdentifier], '') = ''\n\t\t\t\tTHEN [FederationIdentifier]\n\t\t\t WHEN CHARINDEX('@', [FederationIdentifier]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([FederationIdentifier])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([FederationIdentifier]), CHARINDEX('@', [FederationIdentifier]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([FederationIdentifier], LEN([FederationIdentifier]) - CHARINDEX('@', [FederationIdentifier])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([FederationIdentifier], LEN([FederationIdentifier]) - CHARINDEX('@', [FederationIdentifier]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\t,[AboutMe]\n\t,[FullPhotoUrl]\n\t,[SmallPhotoUrl]\n\t,[IsExtIndicatorVisible]\n\t,[OutOfOfficeMessage]\n\t,[MediumPhotoUrl]\n\t,[DigestFrequency]\n\t,[DefaultGroupNotificationFrequency]\n\t,[LastViewedDate]\n\t,[LastReferencedDate]\n\t,[BannerPhotoUrl]\n\t,[SmallBannerPhotoUrl]\n\t,[MediumBannerPhotoUrl]\n\t,[IsProfilePhotoActive]\n\t,[IndividualId]\n\t,[Data_Source__c]\n\t,[External_Id__c]\n\t,[Region__c]\nFROM [GLO_Salesforce].[User]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_Salesforce].[User];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "User"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "User"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleCorebaseProject')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase Project",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Id]\n      ,[Name] = 'Project-' + CAST([Id] AS NVARCHAR(16))\n      ,[StartDate]\n      ,[EndDate]\n      ,[Status]\n      ,[ClientId]\n      ,[DepartmentId]\n      ,[ParentId]\n      ,[Description]\n      ,[GraphId]\n      ,[IncludeInTimeOffRequest]\n      ,[ContractSigned]\n      ,[AllowedEditAssignment]\n      ,[CreatedOn]\n      ,[CreatedBy]\n      ,[ModifiedOn]\n      ,[ModifiedBy]\n      ,[DeletedOn]\nFROM [UA_CoreBase_staging_dbo].[Project]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [UA_CoreBase_staging_dbo].[Project];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "Project"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "Project"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSalesforceOpportunity')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Salesforce Opportunity",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[Id]\n\t,[IsDeleted]\n\t,[AccountId]\n\t,[RecordTypeId]\n\t,[IsPrivate]\n    ,[Name] = 'Opportunity-' + RIGHT([Opportunity_Number__c], 6)\n\t,[Description]\n\t,[StageName]\n\t,[Amount]\n\t,[Probability]\n\t,[ExpectedRevenue]\n\t,[TotalOpportunityQuantity]\n\t,[CloseDate]\n\t,[Type]\n\t,[NextStep]\n\t,[LeadSource]\n\t,[IsClosed]\n\t,[IsWon]\n\t,[ForecastCategory]\n\t,[ForecastCategoryName]\n\t,[CurrencyIsoCode]\n\t,[CampaignId]\n\t,[HasOpportunityLineItem]\n\t,[Pricebook2Id]\n\t,[OwnerId]\n\t,[CreatedDate]\n\t,[CreatedById]\n\t,[LastModifiedDate]\n\t,[LastModifiedById]\n\t,[SystemModstamp]\n\t,[LastActivityDate]\n\t,[LastStageChangeDate]\n\t,[FiscalQuarter]\n\t,[FiscalYear]\n\t,[Fiscal]\n\t,[ContactId]\n\t,[LastViewedDate]\n\t,[LastReferencedDate]\n\t,[ContractId]\n\t,[HasOpenActivity]\n\t,[HasOverdueTask]\n\t,[LastAmountChangedHistoryId]\n\t,[LastCloseDateChangedHistoryId]\n\t,[Budget_Confirmed__c]\n\t,[Discovery_Completed__c]\n\t,[ROI_Analysis_Completed__c]\n\t,[Actual_Deal_Closure__c]\n\t,[Existing_Opportunity__c]\n\t,[BID_Type__c]\n\t,[Costs__c]\n\t,[DPM__c]\n\t,[Data_Source__c]\n\t,[Existing_Project__c]\n\t,[External_Id__c]\n\t,[Historical_Owner__c]\n\t,[Reason_Of_Loss_Details__c]\n\t,[Lead_Source_Comments__c]\n\t,[Project_Duration__c]\n\t,[Project_Start__c]\n\t,[Project_Type__c]\n\t,[Reason_Of_Loss__c]\n\t,[Region__c]\n\t,[Segment__c]\n\t,[Skills__c]\n\t,[Technical_capabilities__c]\n\t,[Technology__c]\n\t,[Email_DPM__c]\n\t,[Weighted_Amount__c]\n\t,[Id_15__c]\n\t,[Account_Status__c]\n\t,[Pre_Sales_Lead__c]\n\t,[Converted_Lead_Name__c]\n\t,[Next_Step__c]\n\t,[Opportunity_Number__c]\n\t,[Google_Drive_Legacy_Id__c]\n\t,[Google_Drive_Link__c]\n\t,[Sign_Off__c]\n\t,[Lead_ID__c]\n\t,[Number_of_Placements__c]\n\t,[Number_of_vacancies__c]\n\t,[Year_Is_Created__c]\n\t,[Open_Is_Created__c]\n\t,[DA_Project_Number__c]\n\t,[Closed_Is_Created__c]\n\t,[Won_Amount__c]\n\t,[Active_Risks__c]\n\t,[Exclude_From_RM__c]\n\t,[Google_Drive_Id__c]\n\t,[Latest_RM_Stage_Completed__c]\n\t,[Pre_sale_files__c]\n\t,[Project_End__c]\n\t,[RM_Completed__c]\n\t,[RM_Passed__c]\n\t,[RM__c]\n\t,[Risks_Accepted__c]\n\t,[X1st_Year_Revenue__c]\n\t,[Delivery_Country_Approved__c]\n\t,[Delivery_Country_Status__c]\n\t,[Delivery_Country__c]\n\t,[Exclude_from_DC_validation__c]\n\t,[IsLegacyOpp__c]\n\t,[Round_Projected_Cost__c]\n\t,[Round_Projected_Revenue__c]\n\t,[Projected_Cost__c]\n\t,[Projected_Revenue__c]\n\t,[Project_Decomposition_Count__c]\n\t,[Type_of_Services__c]\n\t,[Backlog_type__c]\n\t,[Delivery_Approval_Status__c]\n\t,[Delivery_Rejection_Reason__c]\n\t,[Engineering_Approval_Status__c]\n\t,[Engineering_Rejection_Reason__c]\n\t,[Industry_Account__c]\n\t,[Latest_Sign_Off__c]\n\t,[Project_Team_Approval_Needed__c]\n\t,[Is_On_Hold__c]\n\t,[Opportunity_Status__c]\n\t,[Opportunity_Is_Created__c]\n\t,[Assets_Is_Created__c]\n\t,[Contract_Is_Created__c]\n\t,[Corebase_Project_ID__c]\n\t,[Google_Drive_Assets_Id__c]\n\t,[Opportunity_Gdrive_folder__c]\n\t,[Lead_Converted__c]\n\t,[ProjectTeamMemberNumber__c]\n\t,[Number_of_openings__c]\n\t,[isProjectCountry__c]\n\t,[Original_Project_s_Country__c]\nFROM [GLO_Salesforce].[Opportunity]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_Salesforce].[Opportunity];",
                                "writeBehavior": "insert",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Opportunity"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Opportunity"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Fact_ProjectForecast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy German Project Manager",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Load Germany Fact Project Forecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT\n\tfpf.[ProjectForecastKey]\n\t,fpf.[ProjectKey]\n\t,fpf.[ProjectID]\n\t,[ProjectManager] = LTRIM(value)\nFROM [dbo].[FactProjectForecast] fpf\n\tINNER JOIN [dbo].[Project] p ON fpf.[ProjectKey] = p.[ProjectKey] AND p.[IsCurrent] = 1\n    CROSS APPLY STRING_SPLIT(p.[ProjectManager], ';')\nWHERE RTRIM(value) <> ''",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [silver].[ProjectileProjectManager]",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "dbo",
                                    "TableName": "FactProjectForecast"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "silver",
                                    "TableName": "ProjectileProjectManager"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Load Germany Fact Project Forecast",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Load Ukraine Fact Project Forecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactProjectForecastProjectileDE]",
                            "storedProcedureParameters": {
                                "ForecastMonthsBack": {
                                    "value": "1",
                                    "type": "Int16"
                                },
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Set Backlog Last Refresh parameter",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Copy German Project Manager",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "IF EXISTS(SELECT TOP 1 1 FROM [dbo].[Parameter] WHERE [ParameterName] = 'BacklogLastRefresh')\n\tUPDATE [dbo].[Parameter]\n\tSET [ParameterValue] = CONVERT(NVARCHAR, GETDATE(), 20)\n\tWHERE [ParameterName] = 'BacklogLastRefresh'\nELSE \n\tINSERT INTO [dbo].[Parameter] ([ParameterName], [ParameterValue])\n\tSELECT\n\t\t[ParameterName] = 'BacklogLastRefresh'\n\t\t,[ParameterValue] = CONVERT(NVARCHAR, GETDATE(), 20);\n\nSELECT [ParameterValue]\nFROM [dbo].[Parameter]\nWHERE [ParameterName] = 'BacklogLastRefresh';",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "dbo",
                                    "TableName": "Parameter"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load Ukraine Fact Project Forecast",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactProjectForecast1CUA]",
                            "storedProcedureParameters": {
                                "ForecastMonthsBack": {
                                    "value": "0",
                                    "type": "Int16"
                                },
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSalesforceForecast__c')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Salesforce Forecast__c",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[Id]\n\t,[IsDeleted]\n\t,[Name]\n\t,[CurrencyIsoCode]\n\t,[CreatedDate]\n\t,[CreatedById]\n\t,[LastModifiedDate]\n\t,[LastModifiedById]\n\t,[SystemModstamp]\n\t,[Opportunity__c]\n\t,[Active_Months__c]\n\t,[Apr__c] = CASE WHEN [Apr__c] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 ELSE 0.0 END\n\t,[Aug__c] = CASE WHEN [Aug__c] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 ELSE 0.0 END\n\t,[Dec__c] = CASE WHEN [Dec__c] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 ELSE 0.0 END\n\t,[Feb__c] = CASE WHEN [Feb__c] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 ELSE 0.0 END\n\t,[First_Year__c]\n\t,[Jan__c] = CASE WHEN [Jan__c] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 ELSE 0.0 END\n\t,[July__c] = CASE WHEN [July__c] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 ELSE 0.0 END\n\t,[June__c] = CASE WHEN [June__c] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 ELSE 0.0 END\n\t,[Mar__c] = CASE WHEN [Mar__c] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 ELSE 0.0 END\n\t,[May__c] = CASE WHEN [May__c] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 ELSE 0.0 END\n\t,[Nov__c] = CASE WHEN [Nov__c] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 ELSE 0.0 END\n\t,[Oct__c] = CASE WHEN [Oct__c] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 ELSE 0.0 END\n\t,[Sept__c] = CASE WHEN [Sept__c] <> 0 THEN (ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 ELSE 0.0 END\n\t,[Total_Amount__c]\n\t,[Year__c]\n\t,[Forecast_Year__c]\nFROM [GLO_Salesforce].[Forecast__c]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_Salesforce].[Forecast__c];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Forecast__c"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Forecast__c"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleCorebaseClient')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase Client",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Id]\n      ,[Name] = 'Client-' + CAST([Id] AS NVARCHAR(16))\n      ,[Status]\n  FROM [UA_CoreBase_staging_dbo].[Client]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [UA_CoreBase_staging_dbo].[Client];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "Client"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "Client"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSalesforceAccount')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Salesforce Account",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[Id]\n\t,[IsDeleted]\n\t,[MasterRecordId]\n\t,[Name] = 'Customer-' + RIGHT(Account_Number__c, 6)\n\t,[Type]\n\t,[RecordTypeId]\n\t,[ParentId]\n\t,[BillingStreet]\n\t,[BillingCity]\n\t,[BillingState]\n\t,[BillingPostalCode]\n\t,[BillingCountry]\n\t,[BillingStateCode]\n\t,[BillingCountryCode]\n\t,[BillingLatitude]\n\t,[BillingLongitude]\n\t,[BillingGeocodeAccuracy]\n\t,[ShippingStreet]\n\t,[ShippingCity]\n\t,[ShippingState]\n\t,[ShippingPostalCode]\n\t,[ShippingCountry]\n\t,[ShippingStateCode]\n\t,[ShippingCountryCode]\n\t,[ShippingLatitude]\n\t,[ShippingLongitude]\n\t,[ShippingGeocodeAccuracy]\n\t,[Phone]\n\t,[Fax]\n\t,[AccountNumber]\n\t,[Website] = CAST(NULL AS NVARCHAR(765))\n\t,[PhotoUrl]\n\t,[Sic]\n\t,[Industry]\n\t,[AnnualRevenue]\n\t,[NumberOfEmployees]\n\t,[Ownership]\n\t,[TickerSymbol]\n\t,[Description] = CAST(NULL AS NVARCHAR(MAX))\n\t,[Rating]\n\t,[Site]\n\t,[CurrencyIsoCode]\n\t,[OwnerId]\n\t,[CreatedDate]\n\t,[CreatedById]\n\t,[LastModifiedDate]\n\t,[LastModifiedById]\n\t,[SystemModstamp]\n\t,[LastActivityDate]\n\t,[LastViewedDate]\n\t,[LastReferencedDate]\n\t,[Jigsaw]\n\t,[JigsawCompanyId]\n\t,[AccountSource]\n\t,[SicDesc]\n\t,[Account_Source_Comments__c]\n\t,[Billing_Contact__c]\n\t,[Billing_Phone__c]\n\t,[Data_Source__c]\n\t,[Email_Domain__c] = CAST(NULL AS NVARCHAR(765))\n\t,[External_Id__c]\n\t,[Facebook__c]\n\t,[GDPR_Agreement__c]\n\t,[Historical_Owner__c] = CAST(NULL AS NVARCHAR(765))\n\t,[Internal_Group_Id__c]\n\t,[LinkedIn__c] = CAST(NULL AS NVARCHAR(765))\n\t,[OFF_Limits_Reason__c]\n\t,[OFF_Limits__c]\n\t,[Tax_Id_Number__c]\n\t,[Twitter__c]\n\t,[Number_of_Employees__c]\n\t,[Account_type__c]\n\t,[Active_Risks__c]\n\t,[Exclude_From_RM__c]\n\t,[Lead_ID__c]\n\t,[RM_Completed__c]\n\t,[RM_Passed__c]\n\t,[RM__c]\n\t,[Risks_Accepted__c]\n\t,[Bad_Debt__c]\n\t,[Benefit__c]\n\t,[Challenge__c]\n\t,[Competitor__c]\n\t,[Expose_Opportunities__c]\n\t,[New_Opportunities__c]\n\t,[Possible_Changes__c]\n\t,[Product_Service_Weakness__c]\n\t,[RM_Expired__c]\n\t,[RM_Expiring_Soon__c]\n\t,[Reason_of_Not_buying__c]\n\t,[Status_Track__c]\n\t,[Status_Update_Date__c]\n\t,[Status__c]\n\t,[Uniqueness__c]\n\t,[DOZISF__ZoomInfo_First_Updated__c]\n\t,[DOZISF__ZoomInfo_Id__c]\n\t,[DOZISF__ZoomInfo_Last_Updated__c]\n\t,[Number_Of_Won_Opportunities__c]\n\t,[First_Contract_Date__c]\n\t,[Owned_By_My__c]\n\t,[Account_Number__c]\n\t,[Bullhorn_Id__c]\n\t,[Projectile_Customer_Code__c]\n\t,[Projectile_Customer_Number__c]\n\t,[Annual_Employee_Growth__c]\n\t,[Annual_Revenue__c]\n\t,[Funding__c]\n\t,[Google_Drive_Id__c]\n\t,[Google_Drive_Link__c]\n\t,[Account_Gdrive_folder__c]\n\t,[Lead_Converted__c]\n\t,[Executive_Sponsor__c]\n\t,[Revenue_Exposure__c]\n\t,[Growth_Potential__c]\n\t,[Tier__c]\nFROM [GLO_Salesforce].[Account]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_Salesforce].[Account];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Account"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Account"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_SalesforceRecordType')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy SF RecordType",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Id]\n      ,[Name]\n      ,[BusinessProcessId]\n      ,[SobjectType]\n      ,[IsActive]\n  FROM [GLO_Salesforce].[RecordType]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[SalesforceRecordType];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "RecordType"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "SalesforceRecordType"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_BullhornLead')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Lead",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select \n\t[clientCorporationID],\n\t[companyName],\n\t[customText1], \n\t[occupation],\n        [stageCreatedDate] = CAST(GETDATE() AS DATE),\n\t[stageCreatedDateTime] = GETDATE(),\n\t[dateLastModified]\nfrom \n\t[PL_Bullhorn_dbo].[Lead]\n",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "DELETE FROM [stage].[BullhornLeadHistory]\nWHERE stageCreatedDate = cast(getdate() as date)\n",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Bullhorn_dbo",
                                    "TableName": "Lead"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "BullhornLeadHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Bullhorn"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_Projectile_Project')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Project",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [sysNoTs]\n      ,[sysClientId]\n      ,[sysUnique]\n      ,[sysAccess]\n      ,[sysAccessRights]\n      ,[sysCreated]\n      ,[sysCreatedBy]\n      ,[sysChanged]\n      ,[sysChangedBy]\n      ,[pProject]\n      ,[pNumber]\n      ,[pDescription]\n      ,[pProjectBeginDatePlanning]\n      ,[pProjectEndDatePlanning]\n      ,[pExternal]\n      ,[pProductionEffort]\n      ,[pCustomer]\n      ,[capCustomer]\n      ,[pContact]\n      ,[capContact]\n      ,[pUnit]\n      ,[capUnit]\n      ,[pParentProject]\n      ,[capParentProject]\n      ,[pContact2]\n      ,[capContact2]\n      ,[pContact3]\n      ,[capContact3]\n      ,[pResponsible]\n      ,[capResponsible]\n      ,[pBeginTime]\n      ,[pEndTime]\n      ,[pTargetTime]\n      ,[pProjectTimePlanning]\n      ,[pActualTime]\n      ,[pActive]\n      ,[pResourceClearance]\n      ,[pLastActivityChange]\n      ,[pLastActivityChangePassive]\n      ,[pLastActivityChangeActive]\n      ,[pLastActivityChangeClosed]\n      ,[pPriority]\n      ,[pPortfolio]\n      ,[capPortfolio]\n      ,[pPrograms]\n      ,[capPrograms]\n      ,[pCurrency]\n      ,[capCurrency]\n      ,[pRate]\n      ,[pHourlyPrice]\n      ,[pJobPriceExternal]\n      ,[capJobPriceExternal]\n      ,[pHoursPerManDay]\n      ,[pTradeDiscount]\n      ,[pSurchargeForWorkCost]\n      ,[pOfferValueRevenue]\n      ,[pOfferValueCosts]\n      ,[pOfferValueProfit]\n      ,[pOfferValueProfitP]\n      ,[pOrderValueRevenue]\n      ,[pOrderValueCosts]\n      ,[pOrderValueProfit]\n      ,[pOrderValueProfitP]\n      ,[pTypeCommision]\n      ,[pBudget]\n      ,[pOrderNumber]\n      ,[pFixPriceShare]\n      ,[pProjectBudget]\n      ,[pProjectWorkCost]\n      ,[pProjectMiscCost]\n      ,[pProjectCostPlanning]\n      ,[pCurrentOfferAmountBrutto]\n      ,[pCurrentInvoiceAmountBrutto]\n      ,[pActualCost]\n      ,[pTrackedCost]\n      ,[pDiffPlanActual]\n      ,[pProfitability]\n      ,[pCostUnit]\n      ,[pOrderDate]\n      ,[pPaymentTerms]\n      ,[pCostCenter]\n      ,[pBillingType]\n      ,[pBillingFlatAmount]\n      ,[pDailyFlatAmount]\n      ,[pCategory]\n      ,[pCategory2]\n      ,[pCategory3]\n      ,[pCategory4]\n      ,[pCategory5]\n      ,[pProbability]\n      ,[pTopProject]\n      ,[capTopProject]\n      ,[pCostUnitProject]\n      ,[pCategory6]\n      ,[pCategory7]\n      ,[pCurrentOrderAmountNetto]\n      ,[pCurrentOrderAmountBrutto]\n      ,[pBilledTime]\n      ,[pTimeToCompletion]\n      ,[pLimitTimeTracking]\n      ,[pFixed]\n      ,[pMSProjectId]\n      ,[pMSProjectDuration]\n      ,[pSortIndex]\n      ,[pPreventProjectPlanning]\n      ,[pFlatProjectAccess]\n      ,[pCheckedAssessTime]\n      ,[pCheckedTrackedTime]\n      ,[pLimitTimeProcess]\n      ,[pLimitTrackBegin]\n      ,[pLimitTrackEnd]\n      ,[pNote]\n      ,[pOrderCompany]\n      ,[pOOInvoiceTemplate]\n      ,[ReportSelTimeSheet]\n      ,[pIncomingOrder]\n      ,[pPaymentPeriod]\n      ,[pSurchargeProjectManagement]\n      ,[pSurchargeRisk]\n      ,[pSurchargeFixedPrice]\n      ,[pSumProjectSurcharges]\n      ,[pRevenuePrim]\n      ,[pCostsPrim]\n      ,[pProfitPrim]\n      ,[pProfitPercentPrim]\n      ,[pRevenueInternalPrim]\n      ,[pCostsInternalPrim]\n      ,[pProfitInternalPrim]\n      ,[pProfitPercentInternalPrim]\n      ,[pRevenueExternalPrim]\n      ,[pCostsExternalPrim]\n      ,[pProfitExternalPrim]\n      ,[pProfitPercentExternalPrim]\n      ,[pRevenueTotal]\n      ,[pCostsTotal]\n      ,[pProfitTotal]\n      ,[pProfitPercentTotal]\n      ,[pSurchargeFixedPriceAbs]\n      ,[pSurchargeRiskAbs]\n      ,[pSurchargeManagementAbs]\n      ,[pRevenueTotalFinal]\n      ,[pProfitTotalFinal]\n      ,[pCurrentOfferAmountNetto]\n      ,[pCurrentInvoiceAmountNetto]\n      ,[pProfitPercentTotalFinal]\n      ,[pOriginalCampaign]\n      ,[capOriginalCampaign]\n      ,[pStartBudget]\n      ,[pExternalCosts]\n      ,[pInternalCosts]\n      ,[pFreeBudget]\n      ,[pRiskTotalSum]\n      ,[pRiskCSTSum]\n      ,[pRiskCST001]\n      ,[pRiskCST002]\n      ,[pRiskCST003]\n      ,[pRiskCST004]\n      ,[pRiskCST005]\n      ,[pRiskECOSum]\n      ,[pRiskECO001]\n      ,[pRiskECO002]\n      ,[pRiskECO003]\n      ,[pRiskECO004]\n      ,[pRiskECO005]\n      ,[pRiskRESSum]\n      ,[pRiskRES001]\n      ,[pRiskRES002]\n      ,[pRiskRES003]\n      ,[pRiskRES004]\n      ,[pRiskRES005]\n      ,[pRiskIMPSum]\n      ,[pRiskIMP001]\n      ,[pRiskIMP002]\n      ,[pRiskIMP003]\n      ,[pRiskIMP004]\n      ,[pRiskIMP005]\n      ,[pCashDiscount]\n      ,[pRestTimeState]\n      ,[pOrderNumber2]\n      ,[pNumberOld]\n      ,[pInventoryTurnover]\n      ,[pPotConfValue]\n      ,[pContingent]\n      ,[pAddCopyOfReceipts]\n      ,[pBsmFlag]\n      ,[pLimitTimeProject]\n      ,[pCreatedBaseline]\n      ,[capCreatedBaseline]\n      ,[pEffortEstimationCheck]\n      ,[pEffortEstimationDescription]\n      ,[pOfferCheck]\n      ,[pOfferDescription]\n      ,[pPOCheck]\n      ,[pPODescription]\n      ,[pInternalKikOffCheck]\n      ,[pInternalKickOffDescription]\n      ,[pIBPChecklistCheck]\n      ,[pIBPChecklistDescription]\n      ,[pExternalKickOffCheck]\n      ,[pExternalKickOffDescription]\n      ,[pUXConceptCheck]\n      ,[pUXConceptDescription]\n      ,[pDecreasedTechnicalConceptCheck]\n      ,[pDecreasedTechnicalConceptDescription]\n      ,[pBacklogCheck]\n      ,[pBacklogDescription]\n      ,[pTestplanCheck]\n      ,[pTestplanDescription]\n      ,[pQSRealeaseCheck]\n      ,[pQSRealeaseDescription]\n      ,[pCustomerAcceptanceCheck]\n      ,[pCustomerAcceptanceDescription]\n      ,[pFinishedProjectReportCheck]\n      ,[pFinishedProjectReportDescription]\n      ,[pKeyAccountManager]\n      ,[capKeyAccountManager]\n      ,[pReporting]\n      ,[pHideTimeline]\n      ,[pLastTrackingRestriction]\n      ,[pSurchargeManagement]\n      ,[pBudgetSubInternalSum]\n      ,[pBudgetSubExternalSum]\n      ,[pBudgetSubDifference]\n      ,[pSurchargeSubFixedPriceAbs]\n      ,[pSurchargeSubRiskAbs]\n      ,[pSurchargeSubManagementAbs]\n      ,[pSurchargeFixedPriceAbsSum]\n      ,[pSurchargeRiskAbsSum]\n      ,[pSurchargeManagementAbsSum]\n      ,[pProjectCategory]\n\t  ,cast(getdate() as date) as [stageCreatedDate]\n\t  ,getdate() as [stageCreatedDateTime]\n  FROM [projectile].[tproject]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": " DELETE FROM [stage].[ProjectileTprojectHistory]\nWHERE cast([stageCreatedDate] as Date) = cast(GETDATE() as Date)",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "projectile",
                                    "TableName": "tproject"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "ProjectileTprojectHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Projecttile"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_Projectile_TimeBit')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy ttimebit",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT  [sysNoTs]\n      ,[sysClientId]\n      ,[sysUnique]\n      ,[sysAccess]\n      ,[sysAccessRights]\n      ,[sysCreated]\n      ,[sysCreatedBy]\n      ,[sysChanged]\n      ,[sysChangedBy]\n      ,[pId]\n      ,[pDate]\n      ,[pJob]\n      ,[capJob]\n      ,[pTime]\n      ,[pStart]\n      ,[pEnd]\n      ,substring([pNote],1, 4000) as [pNote]\n      ,substring([pInternalNote], 1, 4000) as [pInternalNote] \n      ,[pChecked]\n      ,[pBilled]\n      ,[pRunning]\n      ,[pIndustrialTime]\n      ,[pAssessableTime]\n      ,[pNormalizedTime]\n      ,[pInvoiceHeader]\n      ,[capInvoiceHeader]\n      ,[pInvoiceLine]\n      ,[capInvoiceLine]\n      ,[pCustomer]\n      ,[capCustomer]\n      ,[pOccupation]\n      ,[capOccupation]\n      ,[pTicket]\n      ,[capTicket]\n      ,[pLocation]\n      ,[pCostUnit]\n      ,[capCostUnit]\n      ,[pContract]\n      ,[capContract]\n      ,[pBsmFlag]\n      ,[pForeignInvoice]\n      ,[capForeignInvoice]\n      ,cast(getdate() as date) as [stageCreatedDate]\n      ,getdate() as [stageCreatedDateTime]\n  FROM [projectile].[ttimebit]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": " DELETE FROM [stage].[ProjectileTtimebitHistory]\nWHERE cast([stageCreatedDate] as Date) = cast(GETDATE() as Date)",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "Projectile",
                                    "TableName": "ttimebit"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "ProjectileTtimebitHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Projecttile"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_BullhornCorporateUser')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy CorporateUser",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [userID]\n      ,[email]\n      ,[email2]\n      ,[email3]\n      ,cast(getdate() as date) as [stageCreatedDate]\n      ,getdate() as [stageCreatedDateTime]\t\n\t  ,[firstName]\n\t  ,[lastName]\n\t  ,[occupation]\n  FROM \n\t[PL_Bullhorn_dbo].[CorporateUser]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "DELETE FROM [stage].[BullhornCorporateUserHistory]\n\tWHERE stageCreatedDate = cast(getdate() as date)",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Bullhorn_dbo",
                                    "TableName": "CorporateUser"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "BullhornCorporateUserHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Bullhorn"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_BullhornCandidate')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Candidate",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select \n\t[companyName],\n\t[customInt10],\n\t[customDate1], \n\t[customDate2], \n\t[customDate7],\n\t[customText1],\n\t[customText2],\n\t[customText3], \n\t[customText7],\n\t[customText8],\n\t[customText9],\n\t[customText10],\n\t[customText11],\n\t[customText12],\n\t[customText13],\n\t[customText14],\n\t[customText15],\n\t[email],\n\t[email2],\n\t[email3],\t\n\t[hourlyRate],\n\t[occupation],\n\t[referredBy],\n\t[salary],\n\t[referredByPersonID],\n\tsubstring([skillSet],1,4000) as [skillSet],\n\tcast(getdate() as date) as [stageCreatedDate],\n\tgetdate() as [stageCreatedDateTime]\nfrom \n\t[PL_Bullhorn_dbo].[Candidate]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "DELETE FROM [stage].[BullhornCandidateHistory]\n\tWHERE [stageCreatedDate] = cast(getdate() as date)",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Bullhorn_dbo",
                                    "TableName": "Candidate"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "BullhornCandidateHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Bullhorn"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_BullhornOpportunity')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Opportunity",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select \n\t[actualCloseDate],\n\t[assignedDate],\n\t[clientCorporationID],\n\t[customText1],\n\t[dealValue],\n\t[estimatedEndDate],\n\t[estimatedStartDate],\n\t[expectedCloseDate],\n\t[numOpenings],\n\t[status],\n\t[type],\n\t[opportunityID],\n\t[title],\n\t[ownerID],\n\t[winProbabilityPercent],\n\t[dateAdded],\n\t[estimatedDuration],\n\t[effectiveDate],\n\t[IsDeleted],\n        [stageCreatedDate] = CAST(GETDATE() AS DATE),\n\t[stageCreatedDateTime] = GETDATE(),\n\t[dateLastModified]\nfrom \n\t[PL_Bullhorn_dbo].[Opportunity]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "DELETE FROM [stage].[BullhornOpportunityHistory]\nWHERE stageCreatedDate = cast(getdate() as date)",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Bullhorn_dbo",
                                    "TableName": "Opportunity"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "BullhornOpportunityHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Bullhorn"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_BullhornClientCorporation')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy ClientCorporation",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT \n\tsubstring(businessSectorList, 1, 4000) as businessSectorList,\n\tcustomInt1,\n\tcustomText1,\n\tcustomText2,\n\tcustomText3,\n\tcustomText4,\n\tcustomText10,\n\tsubstring(notes, 1, 4000) as notes,\n\tparentClientCorporationID,\n\tclientCorporationID,\n\tcountryName,\n\tname,\n\tstatus,\n\t  cast(getdate() as date) as [stageCreatedDate],\n\t  getdate() as [stageCreatedDateTime]\nFROM \n\t[PL_Bullhorn_dbo].[ClientCorporation]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "DELETE FROM [stage].[BullhornClientCorporationHistory]\n\tWHERE stageCreatedDate = cast(getdate() as date)",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Bullhorn_dbo",
                                    "TableName": "ClientCorporation"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "BullhornClientCorporationHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Bullhorn"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_BullhornJobOrder')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy JobOrder",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT \n\t[clientBillRate],\n\t[clientCorporationID],\n\t[correlatedCustomText2],\n\t[customDate1],\n\t[customInt2],\n\t[customText1],\n\t[customText2],\n\t[customText3],\n\t[customText4],\n\t[customText5],\n\t[customText10],\n\t[customText11],\n\tsubstring([degreeList], 1, 4000) as [degreeList],\n\t[employmentType],\n\t[feeArrangement],\n\t[salaryUnit],\n\t[taxRate],\n\t[yearsRequired],\n\tsubstring([skillList], 1, 4000) as [skillList],\n        [stageCreatedDate] = CAST(GETDATE() AS DATE),\n\t[stageCreatedDateTime] = GETDATE(),\n\t[ownerID],\n\t[opportunityID],\n\t[jobOrderID],\n\t[dateAdded],\n\t[dateEnd],\n\t[status],\n\t[startDate],\n\t[title],\n        [isDeleted],\n        [salary],\n        [numOpenings],\n\t[dateLastModified]\n  FROM \n\t[PL_Bullhorn_dbo].[JobOrder]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "DELETE FROM [stage].[BullhornJobOrderHistory]\n\tWHERE stageCreatedDate = cast(getdate() as date)",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Bullhorn_dbo",
                                    "TableName": "JobOrder"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "BullhornJobOrderHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Bullhorn"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_BullhornPlacement')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Placement",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT \n\t    [clientBillRate],\n\t\t[correlatedCustomText1],\n\t\t[customBillRate1],\n\t\t[customBillRate2],\n\t\t[customBillRate4],\n\t\t[customFloat22],\n\t\t[customFloat23],\n\t\t[customPayRate1],\n\t\t[customPayRate2],\n\t\t[customPayRate4],\n\t\t[customText1],\n\t\t[customText2],\n\t\t[customText3],\n\t\t[customText5],\n\t\t[customText6],\n\t\t[customText7],\n\t\t[customText10],\n\t\t[customText20],\n\t\t[customText41],\n\t\t[customText42],\n\t\t[customText43],\n\t\t[customText59],\n\t\t[customText60],\n\t\tsubstring([customTextBlock1], 1, 4000) as [customTextBlock1],\n\t\t[dateBegin],\n\t\t[dateClientEffective],\n\t\t[dateEffective],\n\t\t[dateEnd],\n\t\t[employmentType],\n\t\t[hoursPerDay],\n\t\t[payRate],\n\t\t[reportTo],\n\t\t[salary],\n\t\t[salaryUnit],\n\t\t[status],\n\t\t[taxRate],\n\t\t[billingClientContactID],\n        [stageCreatedDate] = CAST(GETDATE() AS DATE),\n\t[stageCreatedDateTime] = GETDATE(),\n\t[dateLastModified],\n\t[placementID]\n FROM \n\t\t[PL_Bullhorn_dbo].[Placement]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "DELETE FROM [stage].[BullhornPlacementHistory]\nWHERE stageCreatedDate = cast(getdate() as date)",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Bullhorn_dbo",
                                    "TableName": "Placement"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "BullhornPlacementHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Bullhorn"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_BullhornClientContact')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy ClientContact",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select\n\t[division],\n\t[occupation],\n\t[type],\n\t[reportToPersonID],\n        [stageCreatedDate] = CAST(GETDATE() AS DATE),\n\t[stageCreatedDateTime] = GETDATE(),\n\t[dateLastModified]\nfrom \n\t[PL_Bullhorn_dbo].[ClientContact]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "DELETE FROM [stage].[BullhornClientContactHistory]\n\tWHERE stageCreatedDate = cast(getdate() as date)",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Bullhorn_dbo",
                                    "TableName": "ClientContact"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "BullhornClientContactHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Bullhorn"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_Projectile_Job')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Job",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [sysNoTs]\n      ,[sysClientId]\n      ,[sysUnique]\n      ,[sysAccess]\n      ,[sysAccessRights]\n      ,[sysCreated]\n      ,[sysCreatedBy]\n      ,[sysChanged]\n      ,[sysChangedBy]\n      ,[pJob]\n      ,[pProcessNumber]\n      ,[pProcess]\n      ,[capProcess]\n      ,[pProcessId]\n      ,[pNumber]\n      ,[pDescription]\n      ,[pOccupation]\n      ,[capOccupation]\n      ,[pExternalPrice]\n      ,[pInternalPrice]\n      ,[pSourceOfJobExternalPrice]\n      ,[capSourceOfJobExternalPrice]\n      ,[pSourcePrice]\n      ,[capSourceJobExternalPrice]\n      ,[pJobPriceExternal]\n      ,[capJobPriceExternal]\n      ,[pProject]\n      ,[capProject]\n      ,[pTopProject]\n      ,[capTopProject]\n      ,[pExternal]\n      ,[pEmployee]\n      ,[capEmployee]\n      ,[pResourceItem]\n      ,[capResourceItem]\n      ,[pUnit]\n      ,[capUnit]\n      ,[pBeginDatePlanning]\n      ,[pEndDatePlanning]\n      ,[pBeginTime]\n      ,[pEndTime]\n      ,[pProcessEstimatedTime]\n      ,[pClearedEstimatedTime]\n      ,[pClearedBeginDatePlanning]\n      ,[pClearedEndDatePlanning]\n      ,[pTargetTime]\n      ,[pEstimatedTime]\n      ,[pActualTime]\n      ,[pTimeToCompletion]\n      ,[pAssessableTime]\n      ,[pBilledTime]\n      ,[pState]\n      ,[pPriority]\n      ,[pClosed]\n      ,[pFixed]\n      ,[pLimitTimeTracking]\n      ,[pLimitTimeProcess]\n      ,[pLimitTrackBegin]\n      ,[pLimitTrackEnd]\n      ,[pFree]\n      ,[pNote]\n      ,[pMSProjectId]\n      ,[pMSProjectRessourceId]\n      ,[pMSProjectDuration]\n      ,[pMSProjectShare]\n      ,[pSortIndex]\n      ,[pAutoReleaseForTT]\n      ,[pFavorite]\n      ,[pLastTimeTracking]\n      ,[pStandbyMode]\n      ,[pTodoState]\n      ,[pNumberEmployeesProcess]\n      ,[pProcessCapacityMode]\n      ,[pOccupationSkillLevels]\n      ,[capOccupationSkillLevels]\n      ,[pBsmFlag]\n      ,[pWorkdays]\n\t  ,cast(getdate() as date) as [stageCreatedDate]\n\t  ,getdate() as [stageCreatedDateTime]\t  \n  FROM [projectile].[tjob]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": " DELETE FROM [stage].[ProjectileTjobHistory]\nWHERE cast([stageCreatedDate] as Date) = cast(GETDATE() as Date)",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "projectile",
                                    "TableName": "tjob"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "ProjectileTjobHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Projecttile"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_Bullhorn_AllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "PL_ADWH_Stage_BullhornClientCorporation",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_BullhornClientCorporation",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_BullhornClientContact",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_BullhornClientContact",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_BullhornCandidate",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_BullhornCandidate",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_BullhornJobOrder",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_BullhornJobOrder",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_BullhornLead",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_BullhornLead",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_BullhornOpportunity",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_BullhornOpportunity",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_BullhornPlacement",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_BullhornPlacement",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_BullhornCorporateUser",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_BullhornCorporateUser",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Bullhorn"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:26Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_BullhornClientCorporation')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_BullhornClientContact')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_BullhornCandidate')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_BullhornJobOrder')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_BullhornLead')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_BullhornOpportunity')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_BullhornPlacement')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_BullhornCorporateUser')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_Projectile_Customer')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Customer",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [sysNoTs]\n      ,[sysClientId]\n      ,[sysUnique]\n      ,[sysAccess]\n      ,[sysAccessRights]\n      ,[sysCreated]\n      ,[sysCreatedBy]\n      ,[sysChanged]\n      ,[sysChangedBy]\n      ,[pContactNumber]\n      ,[pSpecial]\n      ,[pCustomer1]\n      ,[pCustomer2]\n      ,[pCustomer3]\n      ,[pOldName]\n      ,[pCategory]\n      ,[pOrganization]\n      ,[pDebtor]\n      ,[pCreditor]\n      ,[pParentCustomer]\n      ,[capParentCustomer]\n      ,[pBranch]\n      ,[pNumberEmployees]\n      ,[pTurnover]\n      ,[pTurnoverCategory]\n      ,[pReferenceCustomer]\n      ,[pServiceCustomer]\n      ,[pServicetype]\n      ,[pServiceDate]\n      ,[pFirstContact]\n      ,[pPartner]\n      ,[capPartner]\n      ,[pProvision]\n      ,[pCompanyFormationYear]\n      ,[pAddress]\n      ,[pPostalCode]\n      ,[pCity]\n      ,[pRegion]\n      ,[pCountry]\n      ,[pLanguage]\n      ,[pPhoneNumber]\n      ,[pFaxNumber]\n      ,[pEmail]\n      ,[pWWW]\n      ,[pEmployee]\n      ,[capEmployee]\n      ,[pPaymentPeriod]\n      ,[pPaymentTerms]\n      ,[pCurrency]\n      ,[capCurrency]\n      ,[pValueAddedTax]\n      ,[capValueAddedTax]\n      ,[pValueAddedTaxId]\n      ,[pTaxId]\n      ,[pArranger]\n      ,[capArranger]\n      ,[pRepresentative]\n      ,[capRepresentative]\n      ,[pHourlyPrice]\n      ,[pTradeDiscount]\n      ,[pSurchargeForWorkCost]\n      ,[pAccountNumber]\n      ,[pBankNumber]\n      ,[pBankName]\n      ,[pIBAN]\n      ,[pBIC]\n      ,[pProduct]\n      ,[pOwnSupplierNumber]\n      ,[pCustomerNumber]\n      ,[pDebtorNumber]\n      ,[pCreditorNumber]\n      ,[pBlocked]\n      ,[pReasonForBlocking]\n      ,[pPrivate]\n      ,[pNote]\n      ,[pProbability]\n      ,[pContactType]\n      ,[pSalesPhase]\n      ,[pSalesProbability]\n      ,[pDateOfSales]\n      ,[pCreateUser]\n      ,[capCreateUser]\n      ,[pDatevAccount]\n      ,[pGetsMail]\n      ,[pStateMail]\n      ,[pCashDiscount]\n      ,[pContactNumber2]\n      ,[pKeyAccountManager]\n      ,[capKeyAccountManager]\n\t  ,cast(getdate() as date) as [stageCreatedDate]\n\t  ,getdate() as [stageCreatedDateTime]\t\n  FROM [projectile].[tcustomer]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": " DELETE FROM [stage].[ProjectileTcustomerHistory]\nWHERE cast([stageCreatedDate] as Date) = cast(GETDATE() as Date)",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "Projectile",
                                    "TableName": "tcustomer"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "ProjectileTcustomerHistory"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Projecttile"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_Projectile_AllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "PL_ADWH_Stage_Projectile_TimeBit",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_Projectile_TimeBit",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_Projectile_Project",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_Projectile_Project",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_Projectile_Customer",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_Projectile_Customer",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_Projectile_Job",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_Projectile_Job",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_Projectile_ProjectManager",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_Projectile_ProjectManager",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Projecttile"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:26Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_Projectile_TimeBit')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_Projectile_Project')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_Projectile_Customer')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_Projectile_Job')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_Projectile_ProjectManager')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleTcustomer')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled tcustomer",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT \n\t  [sysNoTs]\n      ,[sysClientId]\n      ,[sysUnique]\n      ,[sysAccess]\n      ,[sysAccessRights]\n      ,[sysCreated]\n      ,[sysCreatedBy]\n      ,[sysChanged]\n      ,[sysChangedBy]\n      ,[pContactNumber]\n      ,[pSpecial]\n      ,[pCustomer1] = 'Customer-' + [pContactNumber]\n      ,[pCustomer2] = 'Customer-' + [pContactNumber]\n      ,[pCustomer3]\n      ,[pOldName]\n      ,[pCategory]\n      ,[pOrganization]\n      ,[pDebtor]\n      ,[pCreditor]\n      ,[pParentCustomer]\n      ,[capParentCustomer] = 'Customer-' + [pParentCustomer]\n      ,[pBranch]\n      ,[pNumberEmployees]\n      ,[pTurnover]\n      ,[pTurnoverCategory]\n      ,[pReferenceCustomer]\n      ,[pServiceCustomer]\n      ,[pServicetype]\n      ,[pServiceDate]\n      ,[pFirstContact]\n      ,[pPartner]\n      ,[capPartner]\n      ,[pProvision]\n      ,[pCompanyFormationYear]\n      ,[pAddress] = 'Address-' + pContactNumber\n      ,[pPostalCode]\n      ,[pCity]\n      ,[pRegion]\n      ,[pCountry]\n      ,[pLanguage]\n      ,[pPhoneNumber]\n      ,[pFaxNumber]\n      ,[pEmail] = CAST(NULL AS NVARCHAR(50))\n      ,[pWWW]\n      ,[pEmployee]\n      ,[capEmployee]\n      ,[pPaymentPeriod]\n      ,[pPaymentTerms]\n      ,[pCurrency]\n      ,[capCurrency]\n      ,[pValueAddedTax]\n      ,[capValueAddedTax]\n      ,[pValueAddedTaxId]\n      ,[pTaxId]\n      ,[pArranger]\n      ,[capArranger]\n      ,[pRepresentative]\n      ,[capRepresentative]\n      ,[pHourlyPrice]\n      ,[pTradeDiscount]\n      ,[pSurchargeForWorkCost]\n      ,[pAccountNumber]\n      ,[pBankNumber]\n      ,[pBankName]\n      ,[pIBAN]\n      ,[pBIC]\n      ,[pProduct]\n      ,[pOwnSupplierNumber]\n      ,[pCustomerNumber]\n      ,[pDebtorNumber]\n      ,[pCreditorNumber]\n      ,[pBlocked]\n      ,[pReasonForBlocking]\n      ,[pPrivate]\n      ,[pNote]\n      ,[pProbability]\n      ,[pContactType]\n      ,[pSalesPhase]\n      ,[pSalesProbability]\n      ,[pDateOfSales]\n      ,[pCreateUser]\n      ,[capCreateUser] = CAST(NULL AS NVARCHAR(255))\n      ,[pDatevAccount]\n      ,[pGetsMail]\n      ,[pStateMail]\n      ,[pCashDiscount]\n      ,[pContactNumber2]\n      ,[pKeyAccountManager]\n      ,[capKeyAccountManager] = CAST(NULL AS NVARCHAR(255))\n  FROM [projectile].[tcustomer]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [projectile].[tcustomer];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "projectile",
                                    "TableName": "tcustomer"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "projectile",
                                    "TableName": "tcustomer"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Projectile"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleAITPEmployee')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy PL_BambooHR_AITP Employee",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [id]\n      ,[displayName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [displayName]), 2)\n      ,[firstName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [firstName]), 2)\n      ,[lastName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [lastName]), 2)\n      ,[jobTitle]\n      ,[workPhone]\n      ,[mobilePhone]\n      ,[workEmail] =\n\t\tCASE WHEN COALESCE([workEmail], '') = ''\n\t\t\t\tTHEN [workEmail]\n\t\t\t WHEN CHARINDEX('@', [workEmail]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([workEmail])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([workEmail]), CHARINDEX('@', [workEmail]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([workEmail], LEN([workEmail]) - CHARINDEX('@', [workEmail])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([workEmail], LEN([workEmail]) - CHARINDEX('@', [workEmail]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n      ,[location]\n      ,[division]\n      ,[supervisor] = CONVERT(NVARCHAR(32), HashBytes('MD5', [supervisor]), 2)\n      ,[department]\n  FROM [PL_BambooHR_AITP].[Employees]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [PL_BambooHR_AITP].[Employees];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_BambooHR_AITP",
                                    "TableName": "Employees"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_BambooHR_AITP",
                                    "TableName": "Employees"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/BambooHR"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleADACHEmployee')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy DE ADACH Employee",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [id]\n      ,[displayName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [displayName]), 2)\n      ,[firstName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [firstName]), 2)\n      ,[lastName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [lastName]), 2)\n      ,[jobTitle]\n      ,[workPhone]\n      ,[mobilePhone]\n      ,[workEmail] =\n\t\tCASE WHEN COALESCE([workEmail], '') = ''\n\t\t\t\tTHEN [workEmail]\n\t\t\tWHEN CHARINDEX('@', [workEmail]) = 0\n\t\t\t\tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([workEmail])), 2), '@avenga.com.dev')\n\t\t\tELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([workEmail]), CHARINDEX('@', [workEmail]) - 1)), 2),\n\t\t\t\t\tCASE WHEN RIGHT([workEmail], LEN([workEmail]) - CHARINDEX('@', [workEmail])) = 'avenga.com' \n\t\t\t\t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t\t\t\tELSE RIGHT([workEmail], LEN([workEmail]) - CHARINDEX('@', [workEmail]) + 1)\n\t\t\t\t\tEND) \n\t\tEND\n      ,[location]\n      ,[division]\n      ,[supervisor] = CONVERT(NVARCHAR(32), HashBytes('MD5', [supervisor]), 2)\n      ,[department]\n  FROM [DE_BambooHR_ADACH].[Employees]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [DE_BambooHR_ADACH].[Employees];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_BambooHR_ADACH",
                                    "TableName": "Employees"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_BambooHR_ADACH",
                                    "TableName": "Employees"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/BambooHR"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSDCEmployee')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy PL SDC Employee",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [id]\n      ,[displayName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [displayName]), 2)\n      ,[firstName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [firstName]), 2)\n      ,[lastName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [lastName]), 2)\n      ,[jobTitle]\n      ,[workPhone]\n      ,[mobilePhone]\n      ,[workEmail] =\n\t\tCASE WHEN COALESCE([workEmail], '') = ''\n\t\t\t\tTHEN [workEmail]\n\t\t\t WHEN CHARINDEX('@', [workEmail]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([workEmail])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([workEmail]), CHARINDEX('@', [workEmail]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([workEmail], LEN([workEmail]) - CHARINDEX('@', [workEmail])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([workEmail], LEN([workEmail]) - CHARINDEX('@', [workEmail]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n      ,[location]\n      ,[division]\n      ,[supervisor] = CONVERT(NVARCHAR(32), HashBytes('MD5', [supervisor]), 2)\n      ,[department]\n  FROM [PL_BambooHR_SDC].[Employees]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [PL_BambooHR_SDC].[Employees];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_BambooHR_SDC",
                                    "TableName": "Employees"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_BambooHR_SDC",
                                    "TableName": "Employees"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/BambooHR"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleCorebaseEmployee')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase Employee",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[Id]\n\t,[FirstName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [FirstName]), 2) \n\t,[LastName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [LastName]), 2) \n\t,[MiddleName]\n\t,[Birthday]\n\t,[SkypeName] = CONCAT('SkypeName', CAST([Id] AS NVARCHAR))\n\t,[IdBranch]\n\t,[IdPosition]\n\t,[Email] = \n\t\tCASE WHEN COALESCE([Email], '') = ''\n\t\t\t\tTHEN [Email]\n\t\t\t WHEN CHARINDEX('@', [Email]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([Email])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([Email]), CHARINDEX('@', [Email]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([Email], LEN([Email]) - CHARINDEX('@', [Email])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([Email], LEN([Email]) - CHARINDEX('@', [Email]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n\t,[PhoneNumber]\n\t,[StartDate]\n\t,[IsActive]\n\t,[UserLogin] = CONCAT('UserLogin', CAST([Id] AS NVARCHAR))\n\t,[IdSuperior]\n\t,[PictureFileName] = CONCAT('PictureFileName', CAST([Id] AS NVARCHAR))\n\t,[GraphId]\n\t,[Nickname] = CONCAT('Nickname', CAST([Id] AS NVARCHAR))\n\t--,[SittingAreaId]\n\t,[FullName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [FullName]), 2) \n\t,[Gender]\n\t,[GitHubUserName] = CONCAT('GitHubUserName', CAST([Id] AS NVARCHAR))\n\t,[Billable]\n\t,[TechnologyId]\n\t,[EmploymentType]\n\t,[Address] = CONCAT('Address', CAST([Id] AS NVARCHAR))\n\t,[TshirtSize]\n\t,[HasDriverLicense]\n\t,[IsSuperiorPeak]\n\t,[HrPartnerId]\n\t,[CreatedOn]\n\t,[ModifiedOn]\n\t,[DeletedOn]\n\t,[ModifiedBy]\n\t,[CreatedBy]\nFROM [UA_CoreBase_staging_dbo].[Employee]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [UA_CoreBase_staging_dbo].[Employee];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "Employee"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "Employee"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSalesforceForecastingQuota')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Forecasting Quota",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[Id]\n\t,[PeriodId]\n\t,[StartDate]\n\t,[ProductFamily]\n\t,[CurrencyIsoCode]\n\t,[QuotaAmount] = CASE WHEN ISNULL([QuotaAmount], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 900000) + 100000 ELSE 0 END\n\t,[QuotaQuantity]\n\t,[QuotaOwnerId]\n\t,[IsQuantity]\n\t,[IsAmount]\n\t,[CreatedDate]\n\t,[CreatedById]\n\t,[LastModifiedDate]\n\t,[LastModifiedById]\n\t,[SystemModstamp]\n\t,[ForecastingTypeId]\nFROM [GLO_Salesforce].[ForecastingQuota]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_Salesforce].[ForecastingQuota];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "ForecastingQuota"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "ForecastingQuota"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_SimpleCopy')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach Table",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.TablesToCopy",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Copy Table from DL into DWH stage",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "SqlDWSink",
                                            "preCopyScript": {
                                                "value": "@{concat('IF OBJECT_ID(N''stage.', item().dest_table, ''', N''U'') IS NOT NULL DROP TABLE [stage].[', item().dest_table, ']')}",
                                                "type": "Expression"
                                            },
                                            "tableOption": "autoCreate",
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_DL_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": {
                                                    "value": "@item().schema",
                                                    "type": "Expression"
                                                },
                                                "TableName": {
                                                    "value": "@item().source_table",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADWH_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "stage",
                                                "TableName": {
                                                    "value": "@item().dest_table",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "TablesToCopy": {
                        "type": "array",
                        "defaultValue": [
                            {
                                "schema": "PL_BambooHR_AITP",
                                "source_table": "TiersTitles",
                                "dest_table": "BambooHRAITPTierTitle"
                            }
                        ]
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-24T11:14:41Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleRawDatevAccAvg2021')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled RAW_DATEV_ACC_AVG_2021",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Konto]\n      ,[Gegenkonto]\n      ,[Umsatz Soll] = CASE WHEN ISNULL(TRY_PARSE([Umsatz Soll] AS DECIMAL(19, 4) USING 'de-DE'), 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 99000) + 1000 ELSE 0 END\n      ,[Umsatz Haben] = CASE WHEN ISNULL(TRY_PARSE([Umsatz Haben] AS DECIMAL(19, 4) USING 'de-DE'), 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 99000) + 1000 ELSE 0 END\n      ,[Kurs]\n      ,[Belegdatum]\n      ,[Belegfeld 1]\n      ,[Belegfeld 2]\n      ,[Buchungstext]\n      ,[F�lligkeit]\n      ,[KOST1 - Kostenstelle]\n      ,[KOST2 - Kostenstelle]\n      ,[Steuersatz] = CASE WHEN ISNULL(TRY_PARSE([Steuersatz] AS DECIMAL(19, 4) USING 'de-DE'), 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 99000) + 1000 ELSE 0 END\n      ,[EU-Land (Bestimmung)]\n      ,[Stapel-Nr.]\n      ,[MandantenNr]\n      ,[Wirtschaftsjahr]\n      ,[Monat]\n  FROM [DE_datalakesftp].[RAW_DATEV_ACC_AVG_2021]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [DE_datalakesftp].[RAW_DATEV_ACC_AVG_2021];",
                                "writeBehavior": "insert",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_datalakesftp",
                                    "TableName": "RAW_DATEV_ACC_AVG_2021"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_datalakesftp",
                                    "TableName": "RAW_DATEV_ACC_AVG_2021"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Datev"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleRawDatevAccAvd2021')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled RAW_DATEV_ACC_AVD_2021",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Konto]\n      ,[Gegenkonto]\n      ,[Umsatz Soll] = CASE WHEN ISNULL(TRY_PARSE([Umsatz Soll] AS DECIMAL(19, 4) USING 'de-DE'), 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 99000) + 1000 ELSE 0 END\n      ,[Umsatz Haben] = CASE WHEN ISNULL(TRY_PARSE([Umsatz Haben] AS DECIMAL(19, 4) USING 'de-DE'), 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 99000) + 1000 ELSE 0 END\n      ,[Kurs]\n      ,[Belegdatum]\n      ,[Belegfeld 1]\n      ,[Belegfeld 2]\n      ,[Buchungstext]\n      ,[F�lligkeit]\n      ,[KOST1 - Kostenstelle]\n      ,[KOST2 - Kostenstelle]\n      ,[Steuersatz] = CASE WHEN ISNULL(TRY_PARSE([Steuersatz] AS DECIMAL(19, 4) USING 'de-DE'), 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 99000) + 1000 ELSE 0 END\n      ,[EU-Land (Bestimmung)]\n      ,[Stapel-Nr.]\n      ,[MandantenNr]\n      ,[Wirtschaftsjahr]\n      ,[Monat]\n  FROM [DE_datalakesftp].[RAW_DATEV_ACC_AVD_2021]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [DE_datalakesftp].[RAW_DATEV_ACC_AVD_2021];",
                                "writeBehavior": "insert",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_datalakesftp",
                                    "TableName": "RAW_DATEV_ACC_AVD_2021"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_datalakesftp",
                                    "TableName": "RAW_DATEV_ACC_AVD_2021"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Datev"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleDatevAllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Scramble Export_DATA_RAW_2020_DE",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleExportDATARAW2020DE",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Scramble RAW_DATEV_ACC_AVD_2021",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Scramble Export_DATA_RAW_2020_DE",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleRawDatevAccAvd2021",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Scramble RAW_DATEV_ACC_AVG_2021",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Scramble RAW_DATEV_ACC_AVD_2021",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleRawDatevAccAvg2021",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Datev"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:26Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleExportDATARAW2020DE')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleRawDatevAccAvd2021')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleRawDatevAccAvg2021')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_GoogleGroupMembers')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Group Members",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t [GroupID]\n    ,[MemberID]\n    ,[Email] =\n\t\tCASE\n\t\t\tWHEN [MemberType] = 'USER' \n\t\t\t\tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT([Email], CHARINDEX('@', [Email]) - 1)), 2),\n\t\t\t\t\tCASE\n\t\t\t\t\t\tWHEN RIGHT([Email], LEN([Email]) - CHARINDEX('@', [Email])) = 'avenga.com' THEN '@avenga.com.dev'\n\t\t\t\t\t\tELSE RIGHT([Email], LEN([Email]) - CHARINDEX('@', [Email]) + 1)\n\t\t\t\t\tEND)\n\t\t\tELSE [Email]\n\t\tEND\n    ,[MemberRole]\n    ,[MemberType]\n    ,[MemberStatus]\n    ,[Etag]\nFROM [gsuite].[GoogleGroupMembers]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [gsuite].[GoogleGroupMembers];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleGroupMembers"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleGroupMembers"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Google"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_GoogleAllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Google Users",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_GoogleUsers",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Group Members",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled Google Users",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_GoogleGroupMembers",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Calendar Events",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled Group Members",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_GoogleCalendarEvents",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Google"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_GoogleUsers')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_GoogleGroupMembers')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_GoogleCalendarEvents')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DL_GoogleGroups')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get_GSA_PrivateKey",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/GoogleServiceAccountPrivateKey?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_GSA_Auth_Token",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_GSA_PrivateKey",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetGoogleServiceAccountAuthToken",
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "value": "{\"private_key\":\"@{activity('Get_GSA_PrivateKey').output.value}\",\"client_email\":\"@{pipeline().parameters.ParamClientEmail}\",\"user\":\"@{pipeline().parameters.ParamUserEmail}\",\"scopes\":[\"https://www.googleapis.com/auth/admin.directory.group.readonly\"]}",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_AF_AvengaAnaliticsFuncApp",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Copy Google Groups",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Get_GSA_Auth_Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET",
                                "additionalHeaders": {
                                    "Authorization": {
                                        "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                        "type": "Expression"
                                    }
                                },
                                "paginationRules": {
                                    "QueryParameters.pageToken": "$.nextPageToken"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [gsuite].[GoogleGroups];\nTRUNCATE TABLE [gsuite].[GoogleGroupMembers]",
                                "tableOption": "autoCreate",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "path": "[['id']"
                                        },
                                        "sink": {
                                            "name": "GroupID",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['email']"
                                        },
                                        "sink": {
                                            "name": "Email",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['name']"
                                        },
                                        "sink": {
                                            "name": "GroupName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['directMembersCount']"
                                        },
                                        "sink": {
                                            "name": "DirectMembersCount",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['description']"
                                        },
                                        "sink": {
                                            "name": "GroupDescription",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['adminCreated']"
                                        },
                                        "sink": {
                                            "name": "AdminCreated",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['aliases']"
                                        },
                                        "sink": {
                                            "name": "Aliases",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['nonEditableAliases']"
                                        },
                                        "sink": {
                                            "name": "NonEditableAliases",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['etag']"
                                        },
                                        "sink": {
                                            "name": "Etag",
                                            "type": "String"
                                        }
                                    }
                                ],
                                "collectionReference": "$['groups']",
                                "mapComplexValuesToString": true
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_API_GoogleAdmin",
                                "type": "DatasetReference",
                                "parameters": {
                                    "API_URL": "https://www.googleapis.com/admin/directory/v1/groups?customer=my_customer"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleGroups"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Get Group IDs",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Copy Google Groups",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT DISTINCT GroupID\nFROM [gsuite].[GoogleGroups]\nWHERE DirectMembersCount <> '0'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleGroups"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachGroup",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Group IDs",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Group IDs').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Copy Google Group Members",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "additionalColumns": [
                                                {
                                                    "name": "GroupID",
                                                    "value": {
                                                        "value": "@item().GroupID",
                                                        "type": "Expression"
                                                    }
                                                }
                                            ],
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "QueryParameters.pageToken": "$.nextPageToken"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureSqlSink",
                                            "tableOption": "autoCreate",
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "$['GroupID']"
                                                    },
                                                    "sink": {
                                                        "name": "GroupID",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "MemberID",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['email']"
                                                    },
                                                    "sink": {
                                                        "name": "Email",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['role']"
                                                    },
                                                    "sink": {
                                                        "name": "MemberRole",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['type']"
                                                    },
                                                    "sink": {
                                                        "name": "MemberType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['status']"
                                                    },
                                                    "sink": {
                                                        "name": "MemberStatus",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['etag']"
                                                    },
                                                    "sink": {
                                                        "name": "Etag"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['members']",
                                            "mapComplexValuesToString": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_API_GoogleAdmin",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "API_URL": {
                                                    "value": "@concat('https://www.googleapis.com/admin/directory/v1/groups/', item().GroupID, '/members')",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_DL_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "gsuite",
                                                "TableName": "GoogleGroupMembers"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "KeyVaultName": {
                        "type": "string",
                        "defaultValue": "kv-avenga-analytics-dev"
                    },
                    "ParamClientEmail": {
                        "type": "string",
                        "defaultValue": "avenga-dwh-account@avengadwh.iam.gserviceaccount.com"
                    },
                    "ParamUserEmail": {
                        "type": "string",
                        "defaultValue": "avenga.dwh.account@avenga.com"
                    }
                },
                "variables": {
                    "ID": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "DataLake"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AF_AvengaAnaliticsFuncApp')]",
                "[concat(variables('factoryId'), '/datasets/DS_API_GoogleAdmin')]",
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleBullhornCorporateUser')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy scrambled CorporateUser",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n       [userID]\n      ,[email] = \n\t\t\tCASE WHEN COALESCE([firstName], '') != '' AND COALESCE([lastName], '') != ''\n\t\t\t\t\tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER(CONCAT([firstName], '.', [lastName]))), 2), '@avenga.com.dev')\n\t\t\t\t ELSE NULL\n\t\t\tEND\n      ,[email2]\n      ,[email3]\n      ,[firstName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [firstName]), 2)\n      ,[lastName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [lastName]), 2)\n      ,[occupation]\n  FROM [PL_Bullhorn_dbo].[CorporateUser]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [PL_Bullhorn_dbo].[CorporateUser]",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Bullhorn_dbo",
                                    "TableName": "CorporateUser"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Bullhorn_dbo",
                                    "TableName": "CorporateUser"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Bullhorn"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_Projectile_ProjectManager')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy ProjectManager",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "DECLARE @agroup TABLE ([ProjectID] nvarchar(100), [rID] integer)\n\nINSERT INTO @agroup ([ProjectID], [rID])\nSELECT\n\t[ProjectID] = LEFT(g.rName, CHARINDEX('_', g.rName)-1)\n\t,[rID]\nFROM projectile.agroup g\nWHERE SUBSTRING(g.rName, CHARINDEX('_', g.rName)+1, LEN(g.rName)) = 'ProjectManagers'\n\nDECLARE @axref TABLE (sysDocument nvarchar(100), sysValue nvarchar(100))\n\nINSERT INTO @axref (sysDocument, sysValue)\nSELECT\n\tsysDocument = RIGHT(r.sysDocument ,CHARINDEX('|',REVERSE(r.sysDocument))-1)\n\t,sysValue = RIGHT(r.sysValue ,CHARINDEX('|',REVERSE(r.sysValue))-1)\nFROM projectile.axref r\nWHERE r.sysCollection = 'Users'\n\nSELECT\n\tg.[ProjectID]\n\t,[ProjectManager] = STRING_AGG(CONCAT(e.pName, ' ', e.pFirstName), '; ')\nFROM @agroup g\nINNER JOIN @axref r ON r.sysDocument = g.rId\nINNER JOIN projectile.auser u ON u.rId = r.sysValue\nINNER JOIN (SELECT pEmployee, pName, pFirstName FROM projectile.temployee) e ON e.pEmployee = u.rName\nGROUP BY g.[ProjectID]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[ProjectileProjectManagers]",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "projectile",
                                    "TableName": "temployee"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "ProjectileProjectManagers"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Projecttile"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleAuser')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled auser",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[sysNoTs]\n\t,[sysClientId]\n\t,[sysUnique]\n\t,[sysAccess]\n\t,[sysAccessRights]\n\t,[sysCreated]\n\t,[sysCreatedBy]\n\t,[sysChanged]\n\t,[sysChangedBy]\n\t,[rId]\n\t,[rName]\n\t,[rLogin] = CONCAT('rLogin-', CAST([rId] AS NVARCHAR))\n\t,[rPassword]\n\t,[rDescription] = CONVERT(NVARCHAR(32), HashBytes('MD5', [rDescription]), 2)\n\t,[rDefaultRole]\n\t,[capDefaultRole]\n\t,[rActive]\n\t,[rAdministrativeAccess]\n\t,[rEmail] = \n\t\tCASE WHEN COALESCE([rEmail], '') = ''\n\t\t\t\tTHEN [rEmail]\n\t\t\t WHEN CHARINDEX('@', [rEmail]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([rEmail])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([rEmail]), CHARINDEX('@', [rEmail]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([rEmail], LEN([rEmail]) - CHARINDEX('@', [rEmail])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([rEmail], LEN([rEmail]) - CHARINDEX('@', [rEmail]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n\t,[rLanguage]\n\t,[rLocale]\n\t,[rIsLoggedIn]\n\t,[rPasswordChanged]\n\t,[rLastLogin]\n\t,[rSSOKey]\n\t,[rClientAccessMask]\n\t,[rIntroTemplate]\n\t,[rForceIntroTemplate]\n\t,[rSalt]\n\t,[rPortalTemplate]\n\t,[rForcePortalTemplate]\n\t,[rSamlNameId]\nFROM [projectile].[auser]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [projectile].[auser];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "projectile",
                                    "TableName": "auser"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "projectile",
                                    "TableName": "auser"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Projectile"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleTemployee')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled temployee",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[sysNoTs]\n\t,[sysClientId]\n\t,[sysUnique]\n\t,[sysAccess]\n\t,[sysAccessRights]\n\t,[sysCreated]\n\t,[sysCreatedBy]\n\t,[sysChanged]\n\t,[sysChangedBy]\n\t,[pEmployee]\n\t,[pPersonalNumber]\n\t,[pActive]\n\t,[pUsergroup]\n\t,[pDefaultRole]\n\t,[capDefaultRole]\n\t,[pMainUnit]\n\t,[capMainUnit]\n\t,[pRepresentedUnit]\n\t,[capRepresentedUnit]\n\t,[pLogin] = CONCAT('pLogin-', CAST([pEmployee] AS NVARCHAR))\n\t,[pStatus]\n\t,[pFiliale]\n\t,[pGender]\n\t,[pTitle]\n\t,[pName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [pName]), 2)\n\t,[pFirstName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [pFirstName]), 2)\n\t,[pLanguage]\n\t,[pLocale]\n\t,[pAddress] = CONCAT('Address-', CAST([pEmployee] AS NVARCHAR))\n\t,[pPostalCode]\n\t,[pCity]\n\t,[pCountry]\n\t,[pWorkPhone]\n\t,[pHomePhone]\n\t,[pHandy]\n\t,[pEmail] = \n\t\tCASE WHEN COALESCE([pEmail], '') = ''\n\t\t\t\tTHEN [pEmail]\n\t\t\t WHEN CHARINDEX('@', [pEmail]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([pEmail])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([pEmail]), CHARINDEX('@', [pEmail]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([pEmail], LEN([pEmail]) - CHARINDEX('@', [pEmail])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([pEmail], LEN([pEmail]) - CHARINDEX('@', [pEmail]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n\t,[pDepartment]\n\t,[pFunction]\n\t,[pPop3Username]\n\t,[pPop3Password]\n\t,[pImportUseDefault]\n\t,[pPop3Server]\n\t,[pPop3Port]\n\t,[pPop3Ssl]\n\t,[pOnReceiption]\n\t,[pImportSizeLimit]\n\t,[pDefaultSignature]\n\t,[pSignature]\n\t,[pCostCenter]\n\t,[pPricePlanningOnly]\n\t,[pCostRate]\n\t,[pSalary]\n\t,[pInternalPrice]\n\t,[pExternalPrice]\n\t,[pMonthlySalary]\n\t,[pYearlySalary]\n\t,[pNumberYearlySalaries]\n\t,[pJobPriceExternal]\n\t,[capJobPriceExternal]\n\t,[pBirthdate]\n\t,[pDateHired]\n\t,[pDateFired]\n\t,[pMaxCapability]\n\t,[pWorkTime]\n\t,[pOvertime]\n\t,[pOvertimeTopical]\n\t,[pHoliday]\n\t,[pHolidayTopical]\n\t,[pFlexibleTime]\n\t,[pSpecialTime]\n\t,[pTimeStorage]\n\t,[pPayedOffTime]\n\t,[pDateEntry]\n\t,[pDateContractEnd]\n\t,[pDateEntryOvertime]\n\t,[pDateEntryHoliday]\n\t,[pDateEntryFlexibleTime]\n\t,[pDateEntrySpecialTime]\n\t,[pTrackingRestriction]\n\t,[pTrackingRestrictionPrev]\n\t,[pNote]\n\t,[pOrderCompany]\n\t,[pSSOKey]\n\t,[pClientAccessMask]\n\t,[pTrackesTime]\n\t,[pGUI]\n\t,[pForceGUI]\n\t,[pCandidate]\n\t,[capCandidate]\n\t,[pFaxNumber]\n\t,[pDatabases]\n\t,[pProgramming]\n\t,[pNetwork]\n\t,[pAdministration]\n\t,[pSubjectSkills]\n\t,[pManageSkills]\n\t,[pReceivesICal]\n\t,[pEmergencyContact]\n\t,[capEmergencyContact]\n\t,[pAssignmentOccupation]\n\t,[capAssignmentOccupation]\n\t,[pBsmFlag]\n\t,[pEmailPrivate]\n\t,[pTimeTrackerConfig]\n\t,[capTimeTrackerConfig]\n\t,[pOvertimeRegulation]\n\t,[capOvertimeRegulation]\n\t,[pLastConfirmedPeriodEnd]\n\t,[pTrackingConfirmationStarted]\n\t,[pSupplier]\n\t,[capSupplier]\n\t,[pSamlNameId]\nFROM [projectile].[temployee]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [projectile].[temployee];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "projectile",
                                    "TableName": "temployee"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "projectile",
                                    "TableName": "temployee"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Projectile"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ProjectileAllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Projectile Auser",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleAuser",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Projectile Tcustomer",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleTcustomer",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Projectile Tproject",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleTproject",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Projectile Temployee",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleTemployee",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Projectile"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleAuser')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleTcustomer')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleTproject')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleTemployee')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_MI_AllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Stage CutomerMappingMI",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_MIBullhornCustomerMapping",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Load Stage ProjectForecastMI",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_MIProjectForecast",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Load Stage Competency Matrix English Skills",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_CompetencyMatrixEnglishSkills",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/ManualInput"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_MIBullhornCustomerMapping')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_MIProjectForecast')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_CompetencyMatrixEnglishSkills')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_CorebaseFreeTimeManagement')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase FreeTimeManagement",
                        "description": "Dependent on:\n- [stage].[CorebaseCalendar]",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Get start processing date",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@concat('\nSELECT\n\tftm.[Id]\n\t,ftm.[IdEmployee]\n\t,ftm.[Hours]\n\t,ftm.[IdCalendar]\n\t,ftm.[FromTime]\n\t,ftm.[ToTime]\n\t,ftm.[CreatedBy]\n\t,ftm.[IdTMRequest]\n\t,ftm.[IdFTMType]\n\t,ftm.[CreatedOn]\n\t,ftm.[ModifiedOn]\n\t,ftm.[ModifiedBy]\n\t,ftm.[DeletedOn]\nFROM [UA_CoreBase_staging_dbo].[FreeTimeManagement] ftm\n\tINNER JOIN [UA_CoreBase_staging_dbo].[Calendar] c ON ftm.IdCalendar = c.Id\nWHERE c.[Date] > ''', activity('Get start processing date').output.firstRow.StartDate, ''';')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": {
                                    "value": "@{concat('\nDELETE ftm\nFROM [stage].[CorebaseFreeTimeManagement] ftm\n\tINNER JOIN [stage].[CorebaseCalendar] c ON ftm.IdCalendar = c.Id\nWHERE c.[Date] > ''', activity('Get start processing date').output.firstRow.StartDate, ''';')}",
                                    "type": "Expression"
                                },
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "FreeTimeManagement"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "CorebaseFreeTimeManagement"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Get start processing date",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@concat('SELECT StartDate = CONVERT(CHAR(10), EOMONTH(DATEADD(month, -', string(pipeline().parameters.MonthBack), ', CAST(GETDATE() AS DATE))) , 120);')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "FreeTimeManagement"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "MonthBack": {
                        "type": "int",
                        "defaultValue": 2
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_GS_UploadBacklogDE')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get_GSA_PrivateKey",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/GoogleServiceAccountPrivateKey?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_GSA_Auth_Token",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_GSA_PrivateKey",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetGoogleServiceAccountAuthToken",
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "value": "{\"private_key\":\"@{activity('Get_GSA_PrivateKey').output.value}\",\"client_email\":\"@{pipeline().parameters.ParamClientEmail}\",\"user\":\"@{pipeline().parameters.ParamUserEmail}\",\"scopes\":[\"https://www.googleapis.com/auth/spreadsheets\"]}",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_AF_AvengaAnaliticsFuncApp",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Get current date",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Upload previous months",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "DECLARE @CurrentDate DATE = GETDATE();\nSELECT \n\t[Today] = @CurrentDate\n\t,[MonthName] = DATENAME(month,@CurrentDate)\n\t,[PreviousMonthName] = DATENAME(month, DATEADD(month, -1, @CurrentDate))\n\t,[DayNumber] = DATEPART(day, @CurrentDate)\n\t,[WorkingDayNumber] = MAX([BusinessDayNo])\nFROM [pbi].[vCalendar]\nWHERE [Date] <= @CurrentDate\n\tAND [LastDayOfMonth] = EOMONTH(@CurrentDate)",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "pbi",
                                    "TableName": "vCalendar"
                                }
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "Upload current month",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get current date",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@less(activity('Get current date').output.firstRow.WorkingDayNumber, 6)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Get data from DWH",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Clear spreadsheet",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": "WITH CTE_ProjectForecast AS\n(\nSELECT\n\t[Const] = 1\n\t,[ArrayValue] = CAST(\n\tCONCAT(\n\t\t'[\"', ISNULL([Customer as reported (grouped)], '')\n\t\t,'\", \"', ISNULL([Customer (as reported)], '')\n\t\t,'\", \"', REPLACE([ProjectName], '\"', '\\\"')\n\t\t,'\", \"', [ProjectID]\n\t\t,'\", \"', ISNULL([ProjectManager], '')\n\t\t,'\", \"', DATEADD(day, -1, fpf.[Date])\n\t\t--,'\", \"', [Currency]\n\t\t,'\", ', ISNULL([Actuals MD rate (calc.)], 0)\n\t\t,', ', ISNULL([ManDaysRemaining], 0)\n\t\t,', ', ISNULL([ManDaysSpent], 0)\n\t\t--,'\", \"', [Code]\n\t\t,', \"=H2-SUM(R2:AH2)\"' -- Divergence\n\t\t,', ', ISNULL([January], 0)\n\t\t,', ', ISNULL([February], 0)\n\t\t,', ', ISNULL([March], 0)\n\t\t,', ', ISNULL([April], 0)\n\t\t,', ', ISNULL([May], 0)\n\t\t,', ', ISNULL([June], 0)\n\t\t,', ', ISNULL([July], 0)\n\t\t,', ', ISNULL([August], 0)\n\t\t,', ', ISNULL([September], 0)\n\t\t,', ', ISNULL([October], 0)\n\t\t,', ', ISNULL([November], 0)\n\t\t,', ', ISNULL([December], 0)\n\t\t,', ', ISNULL([Next FY January], 0)\n\t\t,', ', ISNULL([Next FY February], 0)\n\t\t,', ', ISNULL([Next FY March], 0)\n\t\t,', ', ISNULL([Next FY April], 0)\n\t\t,', ', ISNULL([Next FY May], 0)\n\t\t,', ', ISNULL([Next FY June], 0)\n\t\t,', ', ISNULL([Next FY July], 0)\n\t\t,', ', ISNULL([Next FY August], 0)\n\t\t,', ', ISNULL([Next FY September], 0)\n\t\t,', ', ISNULL([Next FY October], 0)\n\t\t,', ', ISNULL([Next FY November], 0)\n\t\t,', ', ISNULL([Next FY December], 0)\n\t\t--,'\", \"', [ManDaysPlanningTotal]\n\t\t, ']'\n\t) AS NVARCHAR(MAX))\nFROM [pbi].[vFactProjectForecastMI] fpf\n\tINNER JOIN [dbo].[Calendar] c ON fpf.[Date] = c.[Date]\nWHERE c.[LastDayOfMonth] = EOMONTH(GETDATE())\n)\nSELECT [ArrayList] = STRING_AGG([ArrayValue], ',')\nFROM CTE_ProjectForecast\nGROUP BY [Const]\n",
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_ADWH_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "pbi",
                                                "TableName": "vFactProjectForecastMI"
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "Insert data into Google Sheets",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Get data from DWH",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://sheets.googleapis.com/v4/spreadsheets/', activity('Get_Google_Sheet_ID').output.value, '/values/', activity('Get current date').output.firstRow.PreviousMonthName, '!A2%3AZZ999999?valueInputOption=RAW')",
                                            "type": "Expression"
                                        },
                                        "method": "PUT",
                                        "headers": {
                                            "Authorization": {
                                                "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                "type": "Expression"
                                            },
                                            "valueInputOption": "RAW"
                                        },
                                        "body": {
                                            "value": "@concat('{\n    \"values\": [',\nactivity('Get data from DWH').output.firstRow.ArrayList,\n    ']\n}')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Clear spreadsheet",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://sheets.googleapis.com/v4/spreadsheets/', activity('Get_Google_Sheet_ID').output.value, '/values/', activity('Get current date').output.firstRow.PreviousMonthName, '!A2%3AZZ999999:clear')",
                                            "type": "Expression"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Authorization": {
                                                "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                "type": "Expression"
                                            }
                                        },
                                        "body": {
                                            "value": "{}",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Upload previous months",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get_GSA_Auth_Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Get_Google_Sheet_ID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@range(1, int(pipeline().parameters.MonthBack))",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Get previous month name",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "@concat('DECLARE @PreviousMonth DATE = DATEADD(month, -', string(add(item(), 1)), ', GETDATE());\nSELECT \n    [Date] = @PreviousMonth\n    ,[MonthName] = DATENAME(month, @PreviousMonth)')",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_ADWH_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "dbo",
                                                "TableName": "parameter"
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "Get previous month data from DWH",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Clear previous month sheet",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "@concat(variables('SubSelectQuery'), \n'WHERE c.[LastDayOfMonth] = EOMONTH(DATEADD(month, -', item(), ', GETDATE()))\n)',\nvariables('SelectQuery'))",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_ADWH_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "dbo",
                                                "TableName": "FactProjectForecastMI"
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "Insert prev month data into Google Sheets",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Get previous month data from DWH",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://sheets.googleapis.com/v4/spreadsheets/', activity('Get_Google_Sheet_ID').output.value, '/values/', activity('Get previous month name').output.firstRow.MonthName, '!A2%3AZZ999999?valueInputOption=RAW')",
                                            "type": "Expression"
                                        },
                                        "method": "PUT",
                                        "headers": {
                                            "Authorization": {
                                                "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                "type": "Expression"
                                            },
                                            "valueInputOption": "RAW"
                                        },
                                        "body": {
                                            "value": "@concat('{\n    \"values\": [',\nactivity('Get previous month data from DWH').output.firstRow.ArrayList,\n    ']\n}')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Clear previous month sheet",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Get previous month name",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://sheets.googleapis.com/v4/spreadsheets/', activity('Get_Google_Sheet_ID').output.value, '/values/', activity('Get previous month name').output.firstRow.MonthName, '!A2%3AZZ999999:clear')",
                                            "type": "Expression"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Authorization": {
                                                "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                "type": "Expression"
                                            }
                                        },
                                        "body": {
                                            "value": "{}",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get_Google_Sheet_ID",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/GoogleSheetIDBacklogDE?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "MonthBack": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "ParamClientEmail": {
                        "type": "string",
                        "defaultValue": "avenga-dwh-account@avengadwh.iam.gserviceaccount.com"
                    },
                    "ParamUserEmail": {
                        "type": "string",
                        "defaultValue": "avenga.dwh.account@avenga.com"
                    }
                },
                "variables": {
                    "SubSelectQuery": {
                        "type": "String",
                        "defaultValue": "WITH CTE_ProjectForecast AS ( SELECT [Const] = 1 ,[ArrayValue] = CAST( CONCAT('[\"', ISNULL([Customer as reported (grouped)], '')   ,'\", \"', ISNULL([Customer (as reported)], '')   ,'\", \"', REPLACE([ProjectName], '\"', '\\\"')   ,'\", \"', [ProjectID]   ,'\", \"', ISNULL([ProjectManager], '')   ,'\", \"', DATEADD(day, -1, fpf.[Date])   ,'\", ', ISNULL([Actuals MD rate (calc.)], '0')   ,', ', ISNULL([ManDaysRemaining], '0')   ,', ', ISNULL([ManDaysSpent], '0')   ,', \"=H2-SUM(R2:AH2)\", ', ISNULL([January], '0')   ,', ', ISNULL([February], '0')   ,', ', ISNULL([March], '0')   ,', ', ISNULL([April], '0')   ,', ', ISNULL([May], '0')   ,', ', ISNULL([June], '0')   ,', ', ISNULL([July], '0')   ,', ', ISNULL([August], '0')   ,', ', ISNULL([September], '0')   ,', ', ISNULL([October], '0')   ,', ', ISNULL([November], '0')   ,', ', ISNULL([December], '0')   ,', ', ISNULL([Next FY January], '0')   ,', ', ISNULL([Next FY February], '0')   ,', ', ISNULL([Next FY March], '0')   ,', ', ISNULL([Next FY April], '0')   ,', ', ISNULL([Next FY May], '0')   ,', ', ISNULL([Next FY June], '0')   ,', ', ISNULL([Next FY July], '0')   ,', ', ISNULL([Next FY August], '0')   ,', ', ISNULL([Next FY September], '0')   ,', ', ISNULL([Next FY October], '0')   ,', ', ISNULL([Next FY November], '0')   ,', ', ISNULL([Next FY December], '0')   , ']'  ) AS NVARCHAR(MAX)) FROM [dbo].[vFactProjectForecastMI] fpf  INNER JOIN [dbo].[Calendar] c ON fpf.[Date] = c.[Date] "
                    },
                    "SelectQuery": {
                        "type": "String",
                        "defaultValue": " SELECT [ArrayList] = STRING_AGG([ArrayValue], ',') FROM CTE_ProjectForecast GROUP BY [Const] "
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH/Export/GoogleSheets"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AF_AvengaAnaliticsFuncApp')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_Salesforce_AllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "PL_ADWH_Stage_Salesforce Account",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_SalesforceAccount",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_Salesforce CurrencyType",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_SalesforceCurrencyType",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_Salesforce Forecast__c",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_SalesforceForecast",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_Salesforce Opportunity",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_SalesforceOpportunity",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_Salesforce RecordType",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_SalesforceRecordType",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_ADWH_Stage_Salesforce User",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_SalesforceUser",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:26Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_SalesforceAccount')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_SalesforceCurrencyType')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_SalesforceForecast')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_SalesforceOpportunity')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_SalesforceRecordType')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_SalesforceUser')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_Corebase_AllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase Project",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_CorebaseProject",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Corebase Employee Data",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_CorebaseEmployeeData",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Corebase FreeTimeManagement",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Corebase Stage Tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_CorebaseFreeTimeManagement",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "MonthBack": 2
                            }
                        }
                    },
                    {
                        "name": "Copy Corebase Stage Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_SimpleCopy",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "TablesToCopy": {
                                    "value": "@variables('CorebaseTablesToCopy')",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Copy Corebase TimeReport",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_CorebaseTimeReport",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "MonthBack": 2
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "variables": {
                    "CorebaseTablesToCopy": {
                        "type": "Array",
                        "defaultValue": [
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "EmployeeRecord",
                                "dest_table": "CorebaseEmployeeRecord"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "Assignment",
                                "dest_table": "CorebaseAssignment"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "Client",
                                "dest_table": "CorebaseClient"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "Calendar",
                                "dest_table": "CorebaseCalendar"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "EmployeeEmployment",
                                "dest_table": "CorebaseEmployeeEmployment"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "FreeTimeManagementRequest",
                                "dest_table": "CorebaseFreeTimeManagementRequest"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "ProjectPositionPeriod",
                                "dest_table": "CorebaseProjectPositionPeriod"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "ProjectPosition",
                                "dest_table": "CorebaseProjectPosition"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "SOWPosition",
                                "dest_table": "CorebaseSOWPosition"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "SysFTMType",
                                "dest_table": "CorebaseSysFTMType"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "EmployeeRecordType",
                                "dest_table": "CorebaseEmployeeRecordType"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "EmployeeRecordStatus",
                                "dest_table": "CorebaseEmployeeRecordStatus"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "EmployeeCars",
                                "dest_table": "CorebaseEmployeeCars"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "EmployeeKids",
                                "dest_table": "CorebaseEmployeeKids"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "EmployeeCertifications",
                                "dest_table": "CorebaseEmployeeCertifications"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "Visa",
                                "dest_table": "CorebaseVisa"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "VisaType",
                                "dest_table": "CorebaseVisaType"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "Passport",
                                "dest_table": "CorebasePassport"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "Country",
                                "dest_table": "CorebaseCountry"
                            },
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "LanguageReview",
                                "dest_table": "CorebaseLanguageReview"
                            }
                        ]
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:26Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_CorebaseProject')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_CorebaseEmployeeData')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_CorebaseFreeTimeManagement')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_SimpleCopy')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_CorebaseTimeReport')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_Asseco_wusr_TBL_ObrotyWKNew')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy wusr_TBL_ObrotyWKNew",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT \n\t [Gniazdo;PR]\n\t,[konto]\n\t,[GI]\n\t,[DataRRMM]\n\t,[symwl]\n\t,[kwota]\n       ,[gniazdo;KL]\n       ,[data]\nFROM [PL_Asseco_staging_dbo].[wusr_TBL_ObrotyWKNew]\nWHERE ([Gniazdo;PR] <> 'NOM' OR [Gniazdo;PR] IS NULL)\nAND [konto] IN ('700-100','700-110','701-100')\nAND [Gniazdo;TP] = 'ND'\nAND [status] = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[Asseco_wusr_TBL_ObrotyWKNew];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Asseco_staging_dbo",
                                    "TableName": "wusr_TBL_ObrotyWKNew"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "Asseco_wusr_TBL_ObrotyWKNew"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Asseco"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_1C_AllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "PL_ADWH_Stage_1C InfoRg24484",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_1C_InfoRg24484",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/1C"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_1C_InfoRg24484')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_GSuite_AllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Stage GoogleUsers",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_GoogleUsers",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Stage GoogleCalendarEvents",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Stage GoogleUsers",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_SimpleCopy",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "TablesToCopy": {
                                    "value": "@variables('GoogleTables')",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "variables": {
                    "GoogleTables": {
                        "type": "Array",
                        "defaultValue": [
                            {
                                "schema": "gsuite",
                                "source_table": "GoogleCalendarEvents",
                                "dest_table": "GoogleCalendarEvents"
                            }
                        ]
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/GSuite"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_GoogleUsers')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_SimpleCopy')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_Asseco_AllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Asseco wusr_TBL ObrotyWKNew",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_Asseco_wusr_TBL_ObrotyWKNew",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Asseco"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_Asseco_wusr_TBL_ObrotyWKNew')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_ProcessBacklog')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Fact Project Forecast",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read Google Sheets",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Fact_ProjectForecast",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@pipeline().parameters.LogProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Process AAS Sales Model",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fact Project Forecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ProcessAnalysisServices",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "DatabaseName": "Sales",
                                "KeyVaultName": {
                                    "value": "@pipeline().globalParameters.KeyVaultName",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Upload Backlog DE into Google Sheets",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fact Project Forecast",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_GS_UploadBacklogDE",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "MonthBack": 0
                            }
                        }
                    },
                    {
                        "name": "Read Google Sheets",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_MIProjectForecast",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Fact_ProjectForecast')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ProcessAnalysisServices')]",
                "[concat(variables('factoryId'), '/pipelines/PL_GS_UploadBacklogDE')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_MIProjectForecast')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleBambooHRAllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled PL AITP Employee",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleAITPEmployee",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled PL SDC Employee",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled PL AITP Employee",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleSDCEmployee",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled DE ADACH Employee",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled PL SDC Employee",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleADACHEmployee",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled DE ADACH TierTitle",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled DE ADACH Employee",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleADACHTierTitle",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled PL AITP TierTitle",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled DE ADACH Employment Status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleAITPTierTitle",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled PL SDC TierTitle",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled PL AITP TierTitle",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleSDCTierTitle",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled DE ADACH Employment Status",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled DE ADACH TierTitle",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleADACHEmployeeEmploymentStatus",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/BambooHR"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-24T10:49:04Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleAITPEmployee')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleSDCEmployee')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleADACHEmployee')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleADACHTierTitle')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleAITPTierTitle')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleSDCTierTitle')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleADACHEmployeeEmploymentStatus')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSalesforceProjectTeamMember')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Project Team Member",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "WITH ScrambledCTE AS\n(\n\tSELECT\n\t\t[Id]\n\t\t,[Adjusted_Rate__c] = CASE WHEN ISNULL([Adjusted_Rate__c], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 61) + 40 ELSE 0 END\n\t\t,[Default_Org_Adjusted_Amount__c] = CASE WHEN ISNULL([Default_Org_Adjusted_Amount__c], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 61) + 40 ELSE 0 END\n\t\t,[Default_Org_Cost_Amount__c] = CASE WHEN ISNULL([Default_Org_Cost_Amount__c], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 61) + 40 ELSE 0 END\n\t\t,[Default_Org_Rate_Amount__c] = CASE WHEN ISNULL([Default_Org_Rate_Amount__c], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 61) + 40 ELSE 0 END\n\t\t,[Hourly_Cost__c] = CASE WHEN ISNULL([Hourly_Cost__c], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 61) + 40 ELSE 0 END\n\t\t,[Hourly_Rate__c] = CASE WHEN ISNULL([Hourly_Rate__c], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 61) + 40 ELSE 0 END\n\t\t,[Duration_Hours] =\n\t\t\tCASE\n\t\t\t\tWHEN [Duration_Unit__c] = 'Days' THEN CAST([Duration__c] AS DECIMAL(9,2)) * 8\n\t\t\t\tWHEN [Duration_Unit__c] = 'Months' THEN CAST([Duration__c] AS DECIMAL(9,2)) * 168\n\t\t\t\tELSE CAST([Duration__c] AS DECIMAL(9,2))\n\t\t\tEND\n\tFROM [GLO_Salesforce].[Project_Team_Member__c]\n)\nSELECT\n\tp.[Id]\n    ,[IsDeleted]\n    ,[Name]\n    ,[CurrencyIsoCode]\n    ,[CreatedDate]\n    ,[CreatedById]\n    ,[LastModifiedDate]\n    ,[LastModifiedById]\n    ,[SystemModstamp]\n    ,[LastActivityDate]\n    ,[Opportunity__c]\n    ,s.[Adjusted_Rate__c]\n    ,[Comment__c]\n    ,[Contribution__c]\n    ,s.[Default_Org_Adjusted_Amount__c]\n    ,s.[Default_Org_Cost_Amount__c]\n    ,s.[Default_Org_Rate_Amount__c]\n    ,[Duration_Unit__c]\n    ,[Duration__c]\n    ,s.[Hourly_Cost__c]\n    ,s.[Hourly_Rate__c]\n    ,[Is_Invalid_Duration__c]\n    ,[Location__c]\n    ,[Opportunity_Stage__c]\n    ,[Project_Start__c]\n    ,[Quantity__c]\n    ,[Senioryty__c]\n    ,[Technology__c]\n    ,[Tier__c]\n    ,[Total_Adjusted_Rate__c] = s.[Adjusted_Rate__c] * s.[Duration_Hours]\n    ,[Total_Cost__c] = s.[Hourly_Cost__c] * s.[Duration_Hours]\n    ,[Total_Rate__c] = s.[Hourly_Rate__c] * s.[Duration_Hours]\nFROM [GLO_Salesforce].[Project_Team_Member__c] p\n\tINNER JOIN ScrambledCTE s ON p.Id = s.Id",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_Salesforce].[Project_Team_Member__c];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Project_Team_Member__c"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Project_Team_Member__c"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleCorebaseAllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Corebase Client",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleCorebaseClient",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Corebase Project",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled Corebase Client",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleCorebaseProject",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Corebase Employee",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled Corebase Project",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleCorebaseEmployee",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Corebase EmployeeRecord",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled Corebase Employee",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleCorebaseEmployeeRecord",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Corebase EmployeeKids",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled Corebase EmployeeRecord",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleCorebaseEmployeeKids",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Passport",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleCorebasePassport",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:26Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleCorebaseClient')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleCorebaseProject')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleCorebaseEmployee')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleCorebaseEmployeeRecord')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleCorebaseEmployeeKids')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleCorebasePassport')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSalesforceAllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Salesforce User",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleSalesforceUser",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Salesforce Account",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled Salesforce User",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleSalesforceAccount",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Salesforce Opportunity",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled Salesforce Account",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleSalesforceOpportunity",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Salesforce Forecast__c",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled Salesforce Opportunity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleSalesforceForecast__c",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Forecasting Quota",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled Salesforce Forecast__c",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleSalesforceForecastingQuota",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Project Team Member",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled Forecasting Quota",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleSalesforceProjectTeamMember",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy Scrambled Forecast History",
                        "description": "",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy Scrambled Project Team Member",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_ScrambleSalesforceForecastHistory",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:26Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleSalesforceUser')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleSalesforceAccount')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleSalesforceOpportunity')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleSalesforceForecast__c')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleSalesforceForecastingQuota')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleSalesforceProjectTeamMember')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_ScrambleSalesforceForecastHistory')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_AzureADGroupMembers')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Group Members",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[OdataType]\n\t,[OdataID]\n\t,[MemberID]\n\t,[BusinessPhones]\n\t,[DisplayName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [DisplayName]), 2)\n\t,[GivenName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [GivenName]), 2)\n\t,[JobTitle]\n\t,[Mail] = NULLIF(CONCAT(\n\t\tCONVERT(NVARCHAR(32), HashBytes('MD5', LEFT([Mail], CHARINDEX('@', [Mail]) - 1)), 2),\n\t\tCASE\n\t\t\tWHEN RIGHT([Mail], LEN([Mail]) - CHARINDEX('@', [Mail])) = 'avenga.com' THEN '@avenga.com.dev'\n\t\t\tELSE RIGHT([Mail], LEN([Mail]) - CHARINDEX('@', [Mail]) + 1)\n\t\tEND), '')\n\t,[MobilePhone]\n\t,[OfficeLocation]\n\t,[PreferredLanguage]\n\t,[Surname] = CONVERT(NVARCHAR(32), HashBytes('MD5', [Surname]), 2)\n\t,[UserPrincipalName] = NULLIF(CONCAT(\n\t\tCONVERT(NVARCHAR(32), HashBytes('MD5', LEFT([UserPrincipalName], CHARINDEX('@', [UserPrincipalName]) - 1)), 2),\n\t\tCASE\n\t\t\tWHEN RIGHT([UserPrincipalName], LEN([UserPrincipalName]) - CHARINDEX('@', [UserPrincipalName])) = 'avenga.com' THEN '@avenga.com.dev'\n\t\t\tELSE RIGHT([UserPrincipalName], LEN([UserPrincipalName]) - CHARINDEX('@', [UserPrincipalName]) + 1)\n\t\tEND), '')\n\t,[GroupID]\nFROM [GLO_AzureAD].[AzureGroupMembers]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_AzureAD].[AzureGroupMembers];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_AzureAD",
                                    "TableName": "AzureGroupMembers"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_AzureAD",
                                    "TableName": "AzureGroupMembers"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/AzureAD"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DL_AzureADGroups')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get_App_ClientID",
                        "description": "Get Azure application (client) ID",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/ServicePrincipalClientID?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Copy AAD Groups",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Get_Bearer_Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET",
                                "additionalHeaders": {
                                    "Authorization": {
                                        "value": "@concat('Bearer ', activity('Get_Bearer_Token').output.access_token)",
                                        "type": "Expression"
                                    }
                                },
                                "paginationRules": {
                                    "AbsoluteURL": "$['@odata.nextLink']"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_AzureAD].[AzureGroups];\n--TRUNCATE TABLE [GLO_AzureAD].[AzureGroupMembers]",
                                "tableOption": "autoCreate",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "path": "[['@odata.id']"
                                        },
                                        "sink": {
                                            "name": "OdataID",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['id']"
                                        },
                                        "sink": {
                                            "name": "GroupID",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['deletedDateTime']"
                                        },
                                        "sink": {
                                            "name": "DeletedDateTime",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['classification']"
                                        },
                                        "sink": {
                                            "name": "Classification",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['createdDateTime']"
                                        },
                                        "sink": {
                                            "name": "CreatedDateTime",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['creationOptions']"
                                        },
                                        "sink": {
                                            "name": "CreationOptions",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['description']"
                                        },
                                        "sink": {
                                            "name": "Description",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['displayName']"
                                        },
                                        "sink": {
                                            "name": "DisplayName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['expirationDateTime']"
                                        },
                                        "sink": {
                                            "name": "ExpirationDateTime",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['groupTypes']"
                                        },
                                        "sink": {
                                            "name": "GroupTypes",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['isAssignableToRole']"
                                        },
                                        "sink": {
                                            "name": "IsAssignableToRole",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['mail']"
                                        },
                                        "sink": {
                                            "name": "Mail",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['mailEnabled']"
                                        },
                                        "sink": {
                                            "name": "MailEnabled",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['mailNickname']"
                                        },
                                        "sink": {
                                            "name": "MailNickname",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['membershipRule']"
                                        },
                                        "sink": {
                                            "name": "MembershipRule",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['membershipRuleProcessingState']"
                                        },
                                        "sink": {
                                            "name": "MembershipRuleProcessingState",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesDomainName']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesDomainName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesLastSyncDateTime']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesLastSyncDateTime",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesNetBiosName']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesNetBiosName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesSamAccountName']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesSamAccountName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesSecurityIdentifier']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesSecurityIdentifier",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesSyncEnabled']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesSyncEnabled",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['preferredDataLocation']"
                                        },
                                        "sink": {
                                            "name": "PreferredDataLocation",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['preferredLanguage']"
                                        },
                                        "sink": {
                                            "name": "PreferredLanguage",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['proxyAddresses']"
                                        },
                                        "sink": {
                                            "name": "ProxyAddresses",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['renewedDateTime']"
                                        },
                                        "sink": {
                                            "name": "RenewedDateTime",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['resourceBehaviorOptions']"
                                        },
                                        "sink": {
                                            "name": "ResourceBehaviorOptions",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['resourceProvisioningOptions']"
                                        },
                                        "sink": {
                                            "name": "ResourceProvisioningOptions",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['securityEnabled']"
                                        },
                                        "sink": {
                                            "name": "SecurityEnabled",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['securityIdentifier']"
                                        },
                                        "sink": {
                                            "name": "SecurityIdentifier",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['theme']"
                                        },
                                        "sink": {
                                            "name": "Theme",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['visibility']"
                                        },
                                        "sink": {
                                            "name": "Visibility",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesProvisioningErrors']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesProvisioningErrors",
                                            "type": "String"
                                        }
                                    }
                                ],
                                "collectionReference": "$['value']",
                                "mapComplexValuesToString": true
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_API_MicrosoftGraph",
                                "type": "DatasetReference",
                                "parameters": {
                                    "RelativeURL": "v1.0/groups"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_AzureAD",
                                    "TableName": "AzureGroups"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Get_App_ClientSecret",
                        "description": "Get Azure app client secret",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/ServicePrincipalClientSecret?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_Tenant_ID",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/AzureTenantId?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_Bearer_Token",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_Tenant_ID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Get_App_ClientSecret",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Get_App_ClientID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": true
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://login.microsoftonline.com/', activity('Get_Tenant_ID').output.value, '/oauth2/v2.0/token')",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            "body": {
                                "value": "@concat('grant_type=client_credentials&scope=https%3A%2F%2Fgraph.microsoft.com%2F.default&client_id=', activity('Get_App_ClientID').output.value, '&client_secret=', activity('Get_App_ClientSecret').output.value)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Get Group IDs",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Copy AAD Groups",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT DISTINCT GroupID\nFROM [GLO_AzureAD].[AzureGroups]",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_AzureAD",
                                    "TableName": "AzureGroups"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachGroup",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Group IDs",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Group IDs').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Copy Azure Group Members",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "additionalColumns": [
                                                {
                                                    "name": "GroupID",
                                                    "value": {
                                                        "value": "@item().GroupID",
                                                        "type": "Expression"
                                                    }
                                                }
                                            ],
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@concat('Bearer ', activity('Get_Bearer_Token').output.access_token)",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "AbsoluteURL": "$['@odata.nextLink']"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureSqlSink",
                                            "tableOption": "autoCreate",
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['@odata.type']"
                                                    },
                                                    "sink": {
                                                        "name": "OdataType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['@odata.id']"
                                                    },
                                                    "sink": {
                                                        "name": "OdataID",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "MemberID",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['businessPhones']"
                                                    },
                                                    "sink": {
                                                        "name": "BusinessPhones",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['displayName']"
                                                    },
                                                    "sink": {
                                                        "name": "DisplayName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['givenName']"
                                                    },
                                                    "sink": {
                                                        "name": "GivenName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['jobTitle']"
                                                    },
                                                    "sink": {
                                                        "name": "JobTitle",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['mail']"
                                                    },
                                                    "sink": {
                                                        "name": "Mail",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['mobilePhone']"
                                                    },
                                                    "sink": {
                                                        "name": "MobilePhone",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['officeLocation']"
                                                    },
                                                    "sink": {
                                                        "name": "OfficeLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['preferredLanguage']"
                                                    },
                                                    "sink": {
                                                        "name": "PreferredLanguage",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['surname']"
                                                    },
                                                    "sink": {
                                                        "name": "Surname",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['userPrincipalName']"
                                                    },
                                                    "sink": {
                                                        "name": "UserPrincipalName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['GroupID']"
                                                    },
                                                    "sink": {
                                                        "name": "GroupID",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']",
                                            "mapComplexValuesToString": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_API_MicrosoftGraph",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "RelativeURL": {
                                                    "value": "@concat('v1.0/groups/', item().GroupID, '/members')",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_DL_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "GLO_AzureAD",
                                                "TableName": "AzureGroupMembers"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLake"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_API_MicrosoftGraph')]",
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_AzureADAllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Group Members",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_AzureADGroupMembers",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/AzureAD"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_AzureADGroupMembers')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_MIBullhornCustomerMapping')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Customer Mapping",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Wait 60 seconds",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "maxConcurrentConnections": 0,
                                    "recursive": false,
                                    "wildcardFolderPath": "Stage/CSV/CustomerMapping",
                                    "wildcardFileName": "CustomerMapping_*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[BullhornCustomerMappingMI]",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "ABBR",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "CustomerCode",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Projectile_x0020_customer_x0020_name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Debtor_x0020_No_x002e_",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "CustomerID",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Customer_x0020_as_x0020_reported_x0020_(grouped)",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "CustomerGroup",
                                            "type": "String"
                                        }
                                    }
                                ]
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_ADLS_CSVFile",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().globalParameters.DWHContainerName",
                                        "type": "Expression"
                                    },
                                    "Path": "Stage/CSV/CustomerMapping",
                                    "FileName": "CustomerMapping_*"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "BullhornCustomerMappingMI"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Execute Logic App",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_Logic_App_URL",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Get_Google_Sheet_ID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@activity('Get_Logic_App_URL').output.value",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "value": "@concat('{\"googleSheetID\":\"', activity('Get_Google_Sheet_ID').output.value, '\",\"storageFolder\":\"CustomerMapping\",\t\"sheetList\": [\n                \"mapping\"\n        ]}')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Get_Logic_App_URL",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/LogicAppReadGoogleSheetsURL?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_Google_Sheet_ID",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/GoogleSheetIDCustomerMappingDE?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Wait 60 seconds",
                        "type": "Wait",
                        "dependsOn": [
                            {
                                "activity": "Execute Logic App",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "waitTimeInSeconds": 60
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/ManualInput"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_CSVFile')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_MIProjectForecast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Project Forecast Manual Adjustments",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Wait 60 seconds",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 2,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "maxConcurrentConnections": 0,
                                    "recursive": false,
                                    "wildcardFolderPath": "Stage/CSV/ProjectForecastMI",
                                    "wildcardFileName": "ProjectForecastMI_*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[ProjectForecastMI]",
                                "maxConcurrentConnections": 0,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "Customer_x0020_(Grouped)",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "CustomerGroup",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Customer",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "CustomerName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Project_x0020_Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ProjectName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Project_x0020_Code",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ProjectID",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Project_x0020_Manager",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ProjectManager",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Backlog_x0020_Reporting_x0020_Month",
                                            "type": "DateTime"
                                        },
                                        "sink": {
                                            "name": "ReportingMonth",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Actuals_x0020_MD_x0020_rate_x0020_(calc_x002e_)",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ActualsMDRateCalc"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Man_x0020_Days_x0020_Remaining",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ManDaysRemaining",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Man_x0020_Days_x0020_Spent",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ManDaysSpent",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "PT_x0020_to_x0020_be_x0020_planned",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Divergence",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "January",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "January",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "February",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "February",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "March",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "March",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "April",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "April",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "May",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "May",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "June",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "June",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "July",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "July",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "August",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "August",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "September",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "September",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "October",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "October",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "November",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "November",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "December",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "December",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_January",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYJanuary",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_February",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYFebruary",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_March",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYMarch",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_April",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYApril",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_May",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYMay",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_June",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYJune",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_July",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYJuly",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_August",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYAugust",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_September",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYSeptember",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_October",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYOctober",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_November",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYNovember",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_December",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYDecember",
                                            "type": "Decimal"
                                        }
                                    }
                                ]
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_ADLS_CSVFile",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().globalParameters.DWHContainerName",
                                        "type": "Expression"
                                    },
                                    "Path": "Stage/CSV/ProjectForecastMI",
                                    "FileName": "ProjectForecastMI_*"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "ProjectForecastMI"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Execute Logic App",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_Logic_App_URL",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Get_Google_Sheet_ID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@activity('Get_Logic_App_URL').output.value",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "value": "@concat('{\"googleSheetID\":\"', activity('Get_Google_Sheet_ID').output.value, '\",\"storageFolder\":\"ProjectForecastMI\",\t\"sheetList\": [\n\t\"January\",\n\t\"February\",\n\t\"March\",\n\t\"April\",\n\t\"May\",\n\t\"June\",\n\t\"July\",\n\t\"August\",\n\t\"September\",\n\t\"October\",\n\t\"November\",\n\t\"December\"\n        ]}')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Get_Logic_App_URL",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/LogicAppReadGoogleSheetsURL?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_Google_Sheet_ID",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/GoogleSheetIDBacklogDE?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Wait 60 seconds",
                        "type": "Wait",
                        "dependsOn": [
                            {
                                "activity": "Execute Logic App",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "waitTimeInSeconds": 60
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/ManualInput"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_CSVFile')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_SalesforceForecast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy SF Forecast__c",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Id]\n      ,[IsDeleted]\n      ,[Name]\n      ,[CurrencyIsoCode]\n      ,[CreatedDate]\n      ,[LastModifiedDate]\n      ,[Opportunity__c]\n      ,[Active_Months__c]\n      ,[Apr__c]\n      ,[Aug__c]\n      ,[Dec__c]\n      ,[Feb__c]\n      ,[First_Year__c]\n      ,[Jan__c]\n      ,[July__c]\n      ,[June__c]\n      ,[Mar__c]\n      ,[May__c]\n      ,[Nov__c]\n      ,[Oct__c]\n      ,[Sept__c]\n      ,[Total_Amount__c]\n      ,[Year__c]\n  FROM [GLO_Salesforce].[Forecast__c]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[SalesforceForecast__c];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Forecast__c"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "SalesforceForecast__c"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_ResumePauseProcessBacklog')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Resume Database",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_SynapsePauseResume",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "KeyVaultName": {
                                    "value": "@pipeline().globalParameters.KeyVaultName",
                                    "type": "Expression"
                                },
                                "Action": "resume"
                            }
                        }
                    },
                    {
                        "name": "Process Backlog",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Log process start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_ProcessBacklog",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "LogProcessTree": {
                                    "value": "@activity('Log process start').output.firstRow.ProcessTree",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Log process start",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Resume Database",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "DECLARE\n\t@ProcessID INT,\n\t@ProcessTree NVARCHAR(256);\n\nEXEC [dbo].[LogProcessStart] null, 'ADF Backlog Process', @ProcessID OUT, @ProcessTree OUT;\n\nSELECT @ProcessID AS ProcessID, @ProcessTree AS ProcessTree;",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "dbo",
                                    "TableName": "parameter"
                                }
                            }
                        }
                    },
                    {
                        "name": "Log process completion",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Process Backlog",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LogProcessCompletion]",
                            "storedProcedureParameters": {
                                "ProcessID": {
                                    "value": {
                                        "value": "@int(string(activity('Log process start').output.firstRow.ProcessID))",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Log process failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Process Backlog",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LogProcessError]",
                            "storedProcedureParameters": {
                                "ErrorMessage": {
                                    "value": "Error in Data Factory main process.",
                                    "type": "String"
                                },
                                "ProcessID": {
                                    "value": {
                                        "value": "@int(string(activity('Log process start').output.firstRow.ProcessID))",
                                        "type": "Expression"
                                    },
                                    "type": "Int32"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Pause Database on completion",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Log process completion",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_SynapsePauseResume",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "KeyVaultName": {
                                    "value": "@pipeline().globalParameters.KeyVaultName",
                                    "type": "Expression"
                                },
                                "Action": "pause"
                            }
                        }
                    },
                    {
                        "name": "Pause Database on failure",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Log process failure",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_SynapsePauseResume",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "KeyVaultName": {
                                    "value": "@pipeline().globalParameters.KeyVaultName",
                                    "type": "Expression"
                                },
                                "Action": "pause"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:26Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_SynapsePauseResume')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_ProcessBacklog')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSalesforceForecastHistory')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Salesforce Forecast History",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[Id]\n\t,[IsDeleted]\n\t,[ParentId]\n\t,[CreatedById]\n\t,[CreatedDate]\n\t,[Field]\n\t,[DataType]\n\t,[OldValue]\n\t,[NewValue]\nFROM [GLO_Salesforce].[Forecast__History]\nWHERE [DataType] <> 'Currency'\nUNION\nSELECT\n\t[Id]\n\t,[IsDeleted]\n\t,[ParentId]\n\t,[CreatedById]\n\t,[CreatedDate]\n\t,[Field]\n\t,[DataType]\n\t,[OldValue] = CASE WHEN [OldValue] <> '0' THEN CAST((ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 AS NVARCHAR(765)) ELSE '0' END\n\t,[NewValue] = CASE WHEN [NewValue] <> '0' THEN CAST((ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 AS NVARCHAR(765)) ELSE '0' END\nFROM [GLO_Salesforce].[Forecast__History]\nWHERE [DataType] = 'Currency'",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_Salesforce].[Forecast__History];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Forecast__History"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Forecast__History"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADLS_Employee')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Employee",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT \n      [EmployeeKey]\n      ,[EmployeeID]\n      ,[FirstName]\n      ,[LastName]\n      ,[FullName]\n      ,[Email]\n      ,[IsActive]\n      ,[PositionName]\n      ,[TierName]\n      ,[SeniorityName]\n      ,[CompetencyName]\n      ,[CountryName]\n      ,[BranchName]\n      ,[DepartmentName]\n      ,[WorkPhone]\n      ,[MobilePhone]\n      ,[Gender]\n      ,[IsCertified]\n      ,[StartDate]\n      ,[EndDate]\n      ,[ExternalID]\n      ,[ExternalSystemName]\n      ,[EmploymentType]\n      ,[HRPartnerKey]\n      ,[ManagerKey]\n      ,[Billable]\n      ,[FullTimeEquivalent]\n      ,[DepartmentNameSales]\n      ,[BusinessLine]\n      ,[SAMAccountName]\nFROM dbo.Employee\nWHERE IsCurrent = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "dbo",
                                    "TableName": "Employee"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADLS_ParquetFile",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FileName": "Employee"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Export/AzureStorage"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_ParquetFile')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_Scramble1C_InfoRg24484')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled InfoRg24484",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [_Fld24485]\n      ,[_Fld24486]\n      ,[_Fld24487]\n      ,[_Fld24488]\n      ,[_Fld24489]\n      ,[_Fld24490]\n      ,[_Fld24491]\n      ,[_Fld24492]\n      ,[_Fld24493]\n      ,[_Fld24494]\n      ,[_Fld24495]\n      ,[_Fld24496]\n      ,[_Fld24497]\n      ,[_Fld24498]\n      ,[_Fld24499]\n      ,[_Fld24500]\n      ,[_Fld24501]\n      ,[_Fld24502]\n      ,[_Fld24503]\n      ,[_Fld24504]\n      ,[_Fld24505]\n      ,[_Fld24506]\n      ,[_Fld24507]\n      ,[_Fld24508]\n      ,[_Fld24509]\n      ,[_Fld24510]\n      ,[_Fld24511]\n      ,[_Fld24512]\n      ,[_Fld24513]\n      ,[_Fld24514]\n      ,[_Fld24515]\n      ,[_Fld24516]\n      ,[_Fld24517]\n      ,[_Fld24518]\n      ,[_Fld24519]\n      ,[_Fld24520]\n      ,[_Fld24521]\n      ,[_Fld24522]\n      ,[_Fld24523]\n      ,[_Fld24524]\n      ,[_Fld24525]\n      ,[_Fld24526]\n      ,[_Fld24527]\n      ,[_Fld24528]\n      ,[_Fld24529]\n      ,[_Fld24530]\n      ,[_Fld24531]\n      ,[_Fld24532]\n      ,[_Fld24533]\n      ,[_Fld24534]\n      ,[_Fld24535]\n      ,[_Fld24536] = [_Fld24536] * R.RN\n      ,[_Fld24537] = [_Fld24537] * R.RN\n      ,[_Fld24538] = [_Fld24538] * R.RN\n      ,[_Fld24539]\n      ,[_SimpleKey]\n  FROM [UA_1C_staging_dbo].[_InfoRg24484]\n\tCROSS APPLY (SELECT (1.0 * ((ABS(CHECKSUM(NEWID())) % 99) + 1)) / 100 AS RN) R",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [UA_1C_staging_dbo].[_InfoRg24484];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_1C_staging_dbo",
                                    "TableName": "_InfoRg24484"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_1C_staging_dbo",
                                    "TableName": "_InfoRg24484"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/1C"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_Scramble1C_AccumRg24640')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled _AccumRg24640",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[_Period]\n\t,[_RecorderRRef]\n\t,[_LineNo]\n\t,[_Active]\n\t,[_Fld24641RRef]\n\t,[_Fld24642RRef]\n\t,[_Fld24643]\n\t,[_Fld24644]\n\t,[_Fld24647RRef]\n\t,[_Fld24645] = CASE WHEN ISNULL([_Fld24645], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 49000) + 1000 ELSE 0 END\n\t,[_Fld24721]\n\t,[_Fld24722]\n\t,[_Fld24723]\n\t,[_Fld24724]\n\t,[_Fld24725]\n\t,[_Fld24726]\nFROM [UA_1C_staging_dbo].[_AccumRg24640]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [UA_1C_staging_dbo].[_AccumRg24640];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_1C_staging_dbo",
                                    "TableName": "_AccumRg24640"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_1C_staging_dbo",
                                    "TableName": "_AccumRg24640"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/1C"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_Scramble1C_AllTables')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Scramble _InfoRg24484 table",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_Scramble1C_InfoRg24484",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Scramble _AccumRg24640 table",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Scramble _InfoRg24484 table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_Scramble1C_AccumRg24640",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/1C"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_Scramble1C_InfoRg24484')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_Scramble1C_AccumRg24640')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleADACHTierTitle')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy DE ADACH TiersTitles",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT \n\t[id]\n\t,[gid]\n\t,[effectiveDate]\n\t,[Department2]\n\t,[Competency1]\n\t,[Competency2]\n\t,[Competency3]\n\t,[Tier1]\n\t,[Tier2]\n\t,[employeeNumber]\n\t,[status]\n\t,[hire_date]\n\t,[job_title]\n\t,[location]\n\t,[division]\n\t,[department]\n\t,[supervisor_id]\n\t,[termination_date]\n\t,[supervisor_eid]\n\t,[group_manager_email] =\n\t\tCASE WHEN COALESCE([group_manager_email], '') = ''\n\t\t\t\tTHEN [group_manager_email]\n\t\t\t WHEN CHARINDEX('@', [group_manager_email]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([group_manager_email])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([group_manager_email]), CHARINDEX('@', [group_manager_email]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([group_manager_email], LEN([group_manager_email]) - CHARINDEX('@', [group_manager_email])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([group_manager_email], LEN([group_manager_email]) - CHARINDEX('@', [group_manager_email]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n\t,[gm_ad_username] = CONVERT(NVARCHAR(32), HashBytes('MD5', [gm_ad_username]), 2)\nFROM [DE_BambooHR_ADACH].[TiersTitles]\norder by [gm_ad_username]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [DE_BambooHR_ADACH].[TiersTitles];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_BambooHR_ADACH",
                                    "TableName": "TiersTitles"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_BambooHR_ADACH",
                                    "TableName": "TiersTitles"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/BambooHR"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleAITPTierTitle')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy PL_BambooHR_AITP TiersTitles",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[id]\n\t,[gid]\n\t,[status]\n\t,[location]\n\t,[division]\n\t,[department]\n\t,[job_title]\n\t,[supervisor_id]\n\t,[hire_date]\n\t,[termination_date]\n\t,[group_manager_email] =\n\t\tCASE WHEN COALESCE([group_manager_email], '') = ''\n\t\t\t\tTHEN [group_manager_email]\n\t\t\t WHEN CHARINDEX('@', [group_manager_email]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([group_manager_email])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([group_manager_email]), CHARINDEX('@', [group_manager_email]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([group_manager_email], LEN([group_manager_email]) - CHARINDEX('@', [group_manager_email])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([group_manager_email], LEN([group_manager_email]) - CHARINDEX('@', [group_manager_email]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n\t,[gm_ad_username] = CONVERT(NVARCHAR(32), HashBytes('MD5', [gm_ad_username]), 2)\nFROM [PL_BambooHR_AITP].[TiersTitles]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [PL_BambooHR_AITP].[TiersTitles];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_BambooHR_AITP",
                                    "TableName": "TiersTitles"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_BambooHR_AITP",
                                    "TableName": "TiersTitles"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/BambooHR"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSDCTierTitle')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy PL SDC TierTitle",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[employee_id]\n\t,[tier]\n\t,[competency]\n\t,[job_info_date]\n\t,[location]\n\t,[division]\n\t,[department]\n\t,[job_title]\n\t,[id]\n\t,[supervisor_id]\n\t,[status]\n\t,[hire_date]\n\t,[termination_date]\n\t,[payRate]\n\t,[payType]\n\t,[payStartDate]\n\t,[group_manager_email] =\n\t\tCASE WHEN COALESCE([group_manager_email], '') = ''\n\t\t\t\tTHEN [group_manager_email]\n\t\t\t WHEN CHARINDEX('@', [group_manager_email]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([group_manager_email])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([group_manager_email]), CHARINDEX('@', [group_manager_email]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([group_manager_email], LEN([group_manager_email]) - CHARINDEX('@', [group_manager_email])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([group_manager_email], LEN([group_manager_email]) - CHARINDEX('@', [group_manager_email]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n\t,[gm_ad_username] = CONVERT(NVARCHAR(32), HashBytes('MD5', [gm_ad_username]), 2)\n\t,[unified_job_title]\nFROM [PL_BambooHR_SDC].[TiersTitles]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [PL_BambooHR_SDC].[TiersTitles];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_BambooHR_SDC",
                                    "TableName": "TiersTitles"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_BambooHR_SDC",
                                    "TableName": "TiersTitles"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/BambooHR"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-31T16:07:44Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Fact_Assignment')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Fact Assignment",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactAssignmentCorebaseUA]",
                            "storedProcedureParameters": {
                                "MonthBack": {
                                    "value": "1",
                                    "type": "Int32"
                                },
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Fact_TimeReporting')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Fact Time Reporting UA",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactTimeReportingCorebaseUA]",
                            "storedProcedureParameters": {
                                "MonthBack": {
                                    "value": "1",
                                    "type": "Int32"
                                },
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Load Fact Time Reporting DE",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Load Fact Time Reporting UA",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactTimeReportingProjectileDE]",
                            "storedProcedureParameters": {
                                "MonthBack": {
                                    "value": "1",
                                    "type": "Int32"
                                },
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-31T08:51:03Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_CorebaseTimeReport')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase TimeReport",
                        "description": "",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Get start processing date",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@concat('\nSELECT\n\t[Id]\n\t,[ProjectPositionPeriodId]\n\t,[ResourceId]\n\t,[ProjectId]\n\t,[ReportDay]\n\t,[SpentHours]\n\t,[ConfirmedSpentHours]\n\t,[ConfirmedByEmployeeId]\n\t,[ConfirmedByEmployeeDate]\n\t,[ConfirmedByTeamleadId]\n\t,[ConfirmedByTeamleadDate]\n\t,[CasesMask]\n\t,[EmployeeId]\nFROM [UA_CoreBase_staging_dbo].[TimeReport]\nWHERE [ReportDay] > ''', activity('Get start processing date').output.firstRow.StartDate, ''';')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": {
                                    "value": "@{concat('\nDELETE\nFROM [stage].[CorebaseTimeReport]\nWHERE [ReportDay] > ''', activity('Get start processing date').output.firstRow.StartDate, ''';')}",
                                    "type": "Expression"
                                },
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "TimeReport"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "CorebaseTimeReport"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Get start processing date",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@concat('SELECT StartDate = CONVERT(CHAR(10), EOMONTH(DATEADD(month, -', string(pipeline().parameters.MonthBack), ', CAST(GETDATE() AS DATE))) , 120);')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "FreeTimeManagement"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "MonthBack": {
                        "type": "int",
                        "defaultValue": 2
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Dim_TimeReportingType')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Time Reporting Type Dimension",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadTimeReportingTypeCorebaseUA]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_SimpleCopyPolyBase')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach Table",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.TablesToCopy",
                                "type": "Expression"
                            },
                            "batchCount": 50,
                            "activities": [
                                {
                                    "name": "Copy table from DL into DWH stage",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "SqlDWSink",
                                            "preCopyScript": {
                                                "value": "@{concat('IF OBJECT_ID(N''stage.', item().dest_table, ''', N''U'') IS NOT NULL TRUNCATE TABLE [stage].[', item().dest_table, ']')}",
                                                "type": "Expression"
                                            },
                                            "allowPolyBase": true,
                                            "polyBaseSettings": {
                                                "rejectValue": 0,
                                                "rejectType": "value",
                                                "useTypeDefault": false
                                            },
                                            "tableOption": "autoCreate",
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": true,
                                        "stagingSettings": {
                                            "linkedServiceName": {
                                                "referenceName": "AzureDataLakeStorage1",
                                                "type": "LinkedServiceReference"
                                            },
                                            "path": {
                                                "value": "@concat(pipeline().globalParameters.DWHContainerName, '/Stage/PolyBase')",
                                                "type": "Expression"
                                            },
                                            "enableCompression": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_DL_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "@item().schema",
                                                "TableName": "@item().source_table"
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADWH_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "stage",
                                                "TableName": "@item().dest_table"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "TablesToCopy": {
                        "type": "array",
                        "defaultValue": [
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "Calendar",
                                "dest_table": "CorebaseCalendar"
                            }
                        ]
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_GoogleCalendarEvents')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled GoogleCalendarEvents",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Type]\n\t  ,[Kind]\n      ,[EventId]\n      ,[Status]\n      ,[UpdatedDate]\n      ,[StartTime]\n      ,[EndTime]\n      ,[Email] =\n\t\t\tCONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT([Email], CHARINDEX('@', [Email]) - 1)), 2),\n\t\t\t\tCASE\n\t\t\t\t\tWHEN RIGHT([Email], LEN([Email]) - CHARINDEX('@', [Email])) = 'avenga.com' THEN '@avenga.com.dev'\n\t\t\t\t\tELSE RIGHT([Email], LEN([Email]) - CHARINDEX('@', [Email]) + 1)\n\t\t\t\tEND)\n      ,[UserId]\n      ,[SyncToken]\nFROM [gsuite].[GoogleCalendarEvents]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [gsuite].[GoogleCalendarEvents];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleCalendarEvents"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleCalendarEvents"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Google"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Fact_CalendarEvent')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Calendar Event Fact",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactCalendarEvent]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DL_GoogleCalendarEvents')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get_GSA_PrivateKey",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/GoogleServiceAccountPrivateKey?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_GSA_Auth_Token",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_GSA_PrivateKey",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetGoogleServiceAccountAuthToken",
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "value": "{\"private_key\":\"@{activity('Get_GSA_PrivateKey').output.value}\",\"client_email\":\"@{pipeline().parameters.ParamClientEmail}\",\"user\":\"@{pipeline().parameters.ParamUserEmail}\",\"scopes\":[\"https://www.googleapis.com/auth/calendar.events.readonly\"]}",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_AF_AvengaAnaliticsFuncApp",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Get User IDs",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Get_GSA_Auth_Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "IF OBJECT_ID(N'gsuite.GoogleCalendarEvents') IS NOT NULL \nTRUNCATE TABLE [gsuite].[GoogleCalendarEvents];\n\nSELECT gu.[id], gu.[email]\nFROM [gsuite].[GoogleUsers] gu\n\tINNER JOIN [DE_BambooHR_ADACH].[Employees] e ON gu.[email] = e.[workEmail]\nWHERE gu.[suspended] <> 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleUsers"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachUser",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get User IDs",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get User IDs').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Get User Events Sync Token",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT SyncToken FROM [gsuite].[GoogleCalendarSyncTokens] WHERE UserId = @{item().id}",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_DL_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "gsuite",
                                                "TableName": "GoogleCalendarSyncTokens"
                                            }
                                        },
                                        "firstRowOnly": false
                                    }
                                },
                                {
                                    "name": "Set Calendar Events Sync Token",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Get User Events Sync Token",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "CalendarEventsSyncToken",
                                        "value": {
                                            "value": "@if(empty(activity('Get User Events Sync Token').output.value),'',activity('Get User Events Sync Token').output.value[0].SyncToken)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Copy User Event Data",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Set Calendar Events Sync Token",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "additionalColumns": [
                                                {
                                                    "name": "UserId",
                                                    "value": {
                                                        "value": "@item().Id",
                                                        "type": "Expression"
                                                    }
                                                }
                                            ],
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "QueryParameters.pageToken": "$.nextPageToken"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureSqlSink",
                                            "tableOption": "autoCreate",
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['kind']"
                                                    },
                                                    "sink": {
                                                        "name": "Kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['eventType']"
                                                    },
                                                    "sink": {
                                                        "name": "Type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "EventId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['status']"
                                                    },
                                                    "sink": {
                                                        "name": "Status",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['updated']"
                                                    },
                                                    "sink": {
                                                        "name": "UpdatedDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['start']['dateTime']"
                                                    },
                                                    "sink": {
                                                        "name": "StartTime",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['end']['dateTime']"
                                                    },
                                                    "sink": {
                                                        "name": "EndTime",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['summary']"
                                                    },
                                                    "sink": {
                                                        "name": "Email",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['UserId']"
                                                    },
                                                    "sink": {
                                                        "name": "UserId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['nextSyncToken']"
                                                    },
                                                    "sink": {
                                                        "name": "SyncToken",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['items']",
                                            "mapComplexValuesToString": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_API_GoogleAdmin",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "API_URL": {
                                                    "value": "@concat('https://www.googleapis.com/calendar/v3/calendars/', item().email, '/events?&maxResults=2500&syncToken=',variables('CalendarEventsSyncToken'))",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_DL_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "gsuite",
                                                "TableName": "GoogleCalendarEvents"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "If SyncToken expired",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy User Event Data",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@contains(activity('Copy User Event Data').output.errors[0].Message, 'Sync token is no longer valid, a full sync is required')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Clean User SyncToken",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "UPDATE [gsuite].[GoogleCalendarSyncTokens] SET SyncToken = NULL OUTPUT inserted.* WHERE UserId = @{item().id};",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "DS_DL_Database",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SchemaName": "gsuite",
                                                            "TableName": "GoogleCalendarSyncTokens"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Copy All User Event Data",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Clean User SyncToken",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "RestSource",
                                                        "additionalColumns": [
                                                            {
                                                                "name": "UserId",
                                                                "value": {
                                                                    "value": "@item().Id",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        ],
                                                        "httpRequestTimeout": "00:01:40",
                                                        "requestInterval": "00.00:00:00.010",
                                                        "requestMethod": "GET",
                                                        "additionalHeaders": {
                                                            "Authorization": {
                                                                "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                                "type": "Expression"
                                                            }
                                                        },
                                                        "paginationRules": {
                                                            "QueryParameters.pageToken": "$.nextPageToken"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "AzureSqlSink",
                                                        "tableOption": "autoCreate",
                                                        "disableMetricsCollection": false
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "path": "[['kind']"
                                                                },
                                                                "sink": {
                                                                    "name": "Kind",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['eventType']"
                                                                },
                                                                "sink": {
                                                                    "name": "Type",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['id']"
                                                                },
                                                                "sink": {
                                                                    "name": "EventId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['status']"
                                                                },
                                                                "sink": {
                                                                    "name": "Status",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['updated']"
                                                                },
                                                                "sink": {
                                                                    "name": "UpdatedDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['start']['dateTime']"
                                                                },
                                                                "sink": {
                                                                    "name": "StartTime",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['end']['dateTime']"
                                                                },
                                                                "sink": {
                                                                    "name": "EndTime",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['summary']"
                                                                },
                                                                "sink": {
                                                                    "name": "Email",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['UserId']"
                                                                },
                                                                "sink": {
                                                                    "name": "UserId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['nextSyncToken']"
                                                                },
                                                                "sink": {
                                                                    "name": "SyncToken",
                                                                    "type": "String"
                                                                }
                                                            }
                                                        ],
                                                        "collectionReference": "$['items']",
                                                        "mapComplexValuesToString": true
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "DS_API_GoogleAdmin",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "API_URL": {
                                                                "value": "@concat('https://www.googleapis.com/calendar/v3/calendars/', item().email, '/events?maxResults=2500')",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "DS_DL_Database",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SchemaName": "gsuite",
                                                            "TableName": "GoogleCalendarEvents"
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Sync New Tokens",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "ForEachUser",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": ";WITH select_user_token AS (\n\tSELECT DISTINCT UserId, Email, SyncToken\n\tFROM [gsuite].[GoogleCalendarEvents]\n\tWHERE SyncToken IS NOT NULL\n)\nMERGE [gsuite].[GoogleCalendarSyncTokens] AS tgt  \nUSING select_user_token AS src\nON (tgt.UserId = src.UserId)  \nWHEN MATCHED THEN\n    UPDATE SET SyncToken = src.SyncToken,\n\t\t\t   Email= src.Email\nWHEN NOT MATCHED THEN  \n    INSERT (UserId, Email, SyncToken)  \n    VALUES (src.UserId, src.Email, src.SyncToken)\n\tOUTPUT inserted.*, $action;",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleCalendarSyncTokens"
                                }
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "KeyVaultName": {
                        "type": "string",
                        "defaultValue": "kv-avenga-analytics-dev"
                    },
                    "ParamClientEmail": {
                        "type": "string",
                        "defaultValue": "avenga-dwh-account@avengadwh.iam.gserviceaccount.com"
                    },
                    "ParamUserEmail": {
                        "type": "string",
                        "defaultValue": "avenga.dwh.account@avenga.com"
                    }
                },
                "variables": {
                    "CalendarEventsSyncToken": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "DataLake"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AF_AvengaAnaliticsFuncApp')]",
                "[concat(variables('factoryId'), '/datasets/DS_DL_Database')]",
                "[concat(variables('factoryId'), '/datasets/DS_API_GoogleAdmin')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DL_GoogleUsersMain')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute PL_DL_GoogleUsers",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DLS_GoogleUsers",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "PL_DL_GoogleCalendarEvents",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Execute PL_DL_GoogleUsers",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_DL_GoogleCalendarEvents",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLake"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:26Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_DLS_GoogleUsers')]",
                "[concat(variables('factoryId'), '/pipelines/PL_DL_GoogleCalendarEvents')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleCorebaseEmployeeRecord')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase EmployeeRecord",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "DROP TABLE IF EXISTS #EmployeeRecordTypeTemp;\n\nCREATE TABLE #EmployeeRecordTypeTemp (\n\tSequentialId INT,\n\tOriginalTypeId INT,\n\tTypeName NVARCHAR(50)\n);\n\nDROP TABLE IF EXISTS #EmployeeRecordStatusTemp;\n\nCREATE TABLE #EmployeeRecordStatusTemp (\n\tSequentialId INT,\n\tOriginalStatusId INT,\n\tStatusName NVARCHAR(50)\n);\n\nINSERT INTO #EmployeeRecordTypeTemp (SequentialId, OriginalTypeId, TypeName)\nSELECT ROW_NUMBER() OVER(ORDER BY Id) AS SequentialId\n\t  ,Id\n\t  ,[Name]\nFROM [UA_CoreBase_staging_dbo].[EmployeeRecordType];\n\nINSERT INTO #EmployeeRecordStatusTemp (SequentialId, OriginalStatusId, StatusName)\nSELECT ROW_NUMBER() OVER(ORDER BY Id) AS SequentialId\n\t  ,Id\n\t  ,[Name]\nFROM [UA_CoreBase_staging_dbo].[EmployeeRecordStatus];\n\nDECLARE @MaxSequentialTypeId INT, @MaxSequentialStatusId INT;\n\nSELECT @MaxSequentialTypeId = MAX(SequentialId) \nFROM #EmployeeRecordTypeTemp;\n\nSELECT @MaxSequentialStatusId = MAX(SequentialId) \nFROM #EmployeeRecordStatusTemp;\n\n;WITH cte_employee_record_random AS (\n\tSELECT er.[Id]\n\t\t  ,er.[EmployeeId]\n\t\t  ,er.[AuthorId]\n\t\t  ,er.[SuperiorId]\n\t\t  ,er.[Date]\n\t\t  ,er.[TypeId]\n\t\t  ,er.[StatusId]\n\t\t  ,er.[Comment]\n\t\t  ,ABS(CHECKSUM(NEWID())) % @MaxSequentialTypeId + 1 AS SequentialTypeId\n\t\t  ,ABS(CHECKSUM(NEWID())) % @MaxSequentialStatusId + 1 AS SequentialStatusId\n\t\t  ,ert.[TypeName]\n  FROM [UA_CoreBase_staging_dbo].[EmployeeRecord] AS er\n  INNER JOIN #EmployeeRecordTypeTemp AS ert ON ert.OriginalTypeId = er.TypeId\n)\nSELECT err.[Id]\n\t  ,err.[EmployeeId]\n\t  ,err.[AuthorId]\n\t  ,err.[SuperiorId]\n\t  ,CASE WHEN err.[TypeName] IN ('Onboarding', 'End of probation', 'Exit interview')\n\t\t\t\tTHEN err.[TypeId]\n\t\t\tELSE ert.[OriginalTypeId]\n\t   END AS TypeId\n\t  ,ers.[OriginalStatusId] AS StatusId\n\t  ,err.[Date]\n\t  ,err.[Comment]\nFROM cte_employee_record_random AS err\nLEFT JOIN #EmployeeRecordTypeTemp AS ert ON ert.SequentialId = err.SequentialTypeId\nLEFT JOIN #EmployeeRecordStatusTemp AS ers ON ers.SequentialId = err.SequentialStatusId;\n\nDROP TABLE IF EXISTS #EmployeeRecordTypeTemp;\n\nDROP TABLE IF EXISTS #EmployeeRecordStatusTemp;",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [UA_CoreBase_staging_dbo].[EmployeeRecord];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "EmployeeRecord"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "EmployeeRecord"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Fact_EmployeeFeedback')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Fact Employee Feedback",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactEmployeeFeedbackCorebaseUA]",
                            "storedProcedureParameters": {
                                "MonthBack": {
                                    "value": "1",
                                    "type": "Int32"
                                },
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleCorebaseEmployeeKids')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase EmployeeKids",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": ";WITH cte_get_randomized_names AS (\n\tSELECT [Id]\n\t\t  ,[Name]\n\t\t  ,[Birthdate]\n\t\t  ,[EmployeeId]\n\t\t  ,ROW_NUMBER () OVER(ORDER BY [Id]) AS original_seq_id\n\t\t  ,ROW_NUMBER () OVER(ORDER BY NEWID()) AS random_id\n\tFROM [UA_CoreBase_staging_dbo].[EmployeeKids]\n)\nSELECT grn1.[Id]\n\t  ,grn2.[Name]\n\t  ,grn1.[Birthdate]\n\t  ,grn1.[EmployeeId]\nFROM cte_get_randomized_names AS grn1\nINNER JOIN cte_get_randomized_names AS grn2 ON grn1.original_seq_id = grn2.random_id;",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [UA_CoreBase_staging_dbo].[EmployeeKids];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "EmployeeKids"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "EmployeeKids"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:24Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Dim_EmployeeCar')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Employee Car Dimension",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadEmployeeCarCorebaseUA]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Dim_EmployeeKid')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Employee Kid Dimension",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadEmployeeKidCorebaseUA]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Dim_EmployeeVisa')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Employee Visa Dimension",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadEmployeeVisaCorebaseUA]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleCorebasePassport')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase Passport",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Id]\n      ,[Biometrical]\n      ,[ExpirationDate]\n      ,[EmployeeId]\n      ,[Number] = CONVERT(NVARCHAR(20), HashBytes('MD5', [Number]), 2)\n      ,[CountryId]\n      ,[CreatedOn]\n      ,[CreatedBy]\n      ,[ModifiedOn]\n      ,[ModifiedBy]\n      ,[DeletedOn]\n      ,[AttachmentId]\nFROM [UA_CoreBase_staging_dbo].[Passport]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [UA_CoreBase_staging_dbo].[Passport];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "Passport"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "Passport"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Fact_EmployeeCertification')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Employee Certification Fact",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactEmployeeCertificationCorebaseUA]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Process_Stage')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Process Bullhorn Stage Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_Bullhorn_AllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Process Projectile Stage Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_Projectile_AllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Refresh Stage Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_SimpleCopy",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "TablesToCopy": {
                                    "value": "@variables('StageTablesToCopy')",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Process Manually Inputed Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_MI_AllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Process Corebase Stage Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_Corebase_AllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Process BambooHR Stage Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_SimpleCopy",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "TablesToCopy": {
                                    "value": "@variables('BambooHRTablesToCopy')",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Process Salesforce Stage Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_Salesforce_AllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Process GSuite Stage Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_GSuite_AllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Process 1C Stage Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_1C_AllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Process Asseco Stage Tables",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "PL_ADWH_Stage_Asseco_AllTables",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "variables": {
                    "StageTablesToCopy": {
                        "type": "Array",
                        "defaultValue": [
                            {
                                "schema": "UA_1C_staging_dbo",
                                "source_table": "_InfoRg24610",
                                "dest_table": "OneCInfoRg24610"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "source_table": "ForecastingQuota",
                                "dest_table": "SalesforceForecastingQuota"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "source_table": "Forecast__History",
                                "dest_table": "SalesforceForecastHistory"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "source_table": "Project_Team_Member__c",
                                "dest_table": "SalesforceProjectTeamMember"
                            },
                            {
                                "schema": "GLO_Salesforce",
                                "source_table": "Sales_Team_Member__c",
                                "dest_table": "SalesforceSalesTeamMember"
                            },
                            {
                                "schema": "DE_datalakesftp",
                                "source_table": "Export_DATA_RAW_2020_DE",
                                "dest_table": "DatalakeSFTPExportDataRaw2020DE"
                            },
                            {
                                "schema": "DE_datalakesftp",
                                "source_table": "RAW_DATEV_ACC_AVD_2021",
                                "dest_table": "DatalakeSFTPRawDatevAccAvd2021"
                            },
                            {
                                "schema": "DE_datalakesftp",
                                "source_table": "RAW_DATEV_ACC_AVG_2021",
                                "dest_table": "DatalakeSFTPRawDatevAccAvg2021"
                            },
                            {
                                "schema": "GLO_AzureAD",
                                "source_table": "AzureGroups",
                                "dest_table": "AzureADGroups"
                            },
                            {
                                "schema": "GLO_AzureAD",
                                "source_table": "AzureGroupMembers",
                                "dest_table": "AzureADGroupMembers"
                            },
                            {
                                "schema": "UA_1C_staging_dbo",
                                "source_table": "_AccumRg24640",
                                "dest_table": "OneCProjectForecast_AccumRg24640"
                            },
                            {
                                "schema": "projectile",
                                "source_table": "temployee",
                                "dest_table": "ProjectileTEmployee"
                            },
                            {
                                "schema": "projectile",
                                "source_table": "tworkingtime",
                                "dest_table": "ProjectileTWorkingTime"
                            }
                        ]
                    },
                    "BambooHRTablesToCopy": {
                        "type": "Array",
                        "defaultValue": [
                            {
                                "schema": "DE_BambooHR_ADACH",
                                "source_table": "Employees",
                                "dest_table": "BambooHRADACHEmployee"
                            },
                            {
                                "schema": "DE_BambooHR_ADACH",
                                "source_table": "TiersTitles",
                                "dest_table": "BambooHRADACHTierTitle"
                            },
                            {
                                "schema": "DE_BambooHR_ADACH",
                                "source_table": "EmployeeEmploymentStatuses",
                                "dest_table": "BambooHRADACHEmployeeEmploymentStatuses"
                            },
                            {
                                "schema": "PL_BambooHR_SDC",
                                "source_table": "Employees",
                                "dest_table": "BambooHRSDCEmployee"
                            },
                            {
                                "schema": "PL_BambooHR_SDC",
                                "source_table": "TiersTitles",
                                "dest_table": "BambooHRSDCTierTitle"
                            },
                            {
                                "schema": "PL_BambooHR_AITP",
                                "source_table": "Employees",
                                "dest_table": "BambooHRAITPEmployee"
                            },
                            {
                                "schema": "PL_BambooHR_AITP",
                                "source_table": "TiersTitles",
                                "dest_table": "BambooHRAITPTierTitle"
                            }
                        ]
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-24T10:49:03Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_Bullhorn_AllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_Projectile_AllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_SimpleCopy')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_MI_AllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_Corebase_AllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_Salesforce_AllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_GSuite_AllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_1C_AllTables')]",
                "[concat(variables('factoryId'), '/pipelines/PL_ADWH_Stage_Asseco_AllTables')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Dim_EmployeePassport')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Employee Passport Dimension",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadEmployeePassportCorebaseUA]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_CompetencyMatrixEnglishSkills')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Competency Matrix English Skills",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadCompetencyMatrixEnglishSkills]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_CompetencyMatrixEnglishSkills')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute Logic App",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_Logic_App_URL",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Get_Google_Sheet_ID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@activity('Get_Logic_App_URL').output.value",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "value": "@concat('{\"googleSheetID\":\"', activity('Get_Google_Sheet_ID').output.value, '\",\"storageFolder\":\"CompetencyMatrixEnglishSkills\",\t\"sheetList\": [\"Sheet1\"]}')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Get_Logic_App_URL",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/LogicAppReadGoogleSheetsURL?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_Google_Sheet_ID",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/GoogleSheetIDCompetencyMatrixEnglishSkills?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Wait 60 seconds",
                        "type": "Wait",
                        "dependsOn": [
                            {
                                "activity": "Execute Logic App",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "waitTimeInSeconds": 60
                        }
                    },
                    {
                        "name": "Copy Competency Matrix English Skills",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Wait 60 seconds",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "maxConcurrentConnections": 0,
                                    "recursive": false,
                                    "wildcardFolderPath": "Stage/CSV/CompetencyMatrixEnglishSkills",
                                    "wildcardFileName": "CompetencyMatrixEnglishSkills_*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[CompetencyMatrixEnglishSkills]",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "Technology",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Technology",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Skill_x0020_",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Skill",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Tier_x0020_1",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Tier1",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Tier_x0020_2",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Tier2",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Tier_x0020_3",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Tier3",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Tier_x0020_4",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Tier4",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Tier_x0020_5",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Tier5",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Tier_x0020_6",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Tier6",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Tier_x0020_7",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Tier7",
                                            "type": "String"
                                        }
                                    }
                                ]
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_ADLS_CSVFile",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().globalParameters.DWHContainerName",
                                        "type": "Expression"
                                    },
                                    "Path": "Stage/CSV/CompetencyMatrixEnglishSkills",
                                    "FileName": "CompetencyMatrixEnglishSkills_*"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "CompetencyMatrixEnglishSkills"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Trim whitespaces in stage",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Copy Competency Matrix English Skills",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "UPDATE [stage].[CompetencyMatrixEnglishSkills]\nSET [Technology] = TRIM([Technology]),\n    [Skill] = TRIM([Skill]),\n    [Tier1] = TRIM([Tier1]),\n    [Tier2] = TRIM([Tier2]),\n    [Tier3] = TRIM([Tier3]),\n    [Tier4] = TRIM([Tier4]),\n    [Tier5] = TRIM([Tier5]),\n    [Tier6] = TRIM([Tier6]),\n    [Tier7] = TRIM([Tier7])\n\n\nSELECT *\nFROM [stage].[CompetencyMatrixEnglishSkills]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "CompetencyMatrixEnglishSkills"
                                }
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/ManualInput"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ADLS_CSVFile')]",
                "[concat(variables('factoryId'), '/datasets/DS_ADWH_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Fact_LanguageReview')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Load Fact Language Review",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[LoadFactLanguageReviewCorebaseUA]",
                            "storedProcedureParameters": {
                                "ParentProcessTree": {
                                    "value": {
                                        "value": "@pipeline().parameters.LogProcessTree",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_ASDW_AnalyticsDWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "LogProcessTree": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-18T10:09:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ASDW_AnalyticsDWH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleADACHEmployeeEmploymentStatus')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy DE ADACH Employee Employment Status",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n      [id]\n      ,[employmentHistoryStatus]\n      ,[workEmail] =\n\t\tCASE WHEN COALESCE([workEmail], '') = ''\n\t\t\t\tTHEN [workEmail]\n\t\t\tWHEN CHARINDEX('@', [workEmail]) = 0\n\t\t\t\tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([workEmail])), 2), '@avenga.com.dev')\n\t\t\tELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([workEmail]), CHARINDEX('@', [workEmail]) - 1)), 2),\n\t\t\t\t\tCASE WHEN RIGHT([workEmail], LEN([workEmail]) - CHARINDEX('@', [workEmail])) = 'avenga.com' \n\t\t\t\t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t\t\t\tELSE RIGHT([workEmail], LEN([workEmail]) - CHARINDEX('@', [workEmail]) + 1)\n\t\t\t\t\tEND) \n\t\tEND\n  FROM [DE_BambooHR_ADACH].[EmployeeEmploymentStatuses]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [DE_BambooHR_ADACH].[EmployeeEmploymentStatuses];",
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_BambooHR_ADACH",
                                    "TableName": "EmployeeEmploymentStatuses"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_BambooHR_ADACH",
                                    "TableName": "EmployeeEmploymentStatuses"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/BambooHR"
                },
                "annotations": [],
                "lastPublishTime": "2022-05-24T10:49:03Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_DLS_DatalakeRep')]",
                "[concat(variables('factoryId'), '/datasets/DS_DLD_DatalakeDev')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_AF_AvengaAnaliticsFuncApp')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureFunction",
                "typeProperties": {
                    "functionAppUrl": "[parameters('LS_AF_AvengaAnaliticsFuncApp_properties_typeProperties_functionAppUrl')]",
                    "functionKey": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_AKV_AvengaAnalytics",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "AzureAppFunctionMasterKey"
                    },
                    "authentication": "Anonymous"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AKV_AvengaAnalytics')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_AKV_AvengaAnalytics')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureKeyVault",
                "typeProperties": {
                    "baseUrl": "[parameters('LS_AKV_AvengaAnalytics_properties_typeProperties_baseUrl')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_REST_GoogleUsersList')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('LS_REST_GoogleUsersList_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_ASQL_ScrambleDataLake')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_AKV_AvengaAnalytics",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "[parameters('LS_ASQL_ScrambleDataLake_properties_typeProperties_connectionString_secretName')]"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AKV_AvengaAnalytics')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_ASQL_DataLake')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_AKV_AvengaAnalytics",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "[parameters('LS_ASQL_DataLake_properties_typeProperties_connectionString_secretName')]"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AKV_AvengaAnalytics')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_ASDW_AnalyticsDWH')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDW",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_AKV_AvengaAnalytics",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "[parameters('LS_ASDW_AnalyticsDWH_properties_typeProperties_connectionString_secretName')]"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AKV_AvengaAnalytics')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_ASQL_ScrambleDataLakeDev')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_AKV_AvengaAnalytics",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "[parameters('LS_ASQL_ScrambleDataLakeDev_properties_typeProperties_connectionString_secretName')]"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AKV_AvengaAnalytics')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Sftp1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "Sftp",
                "typeProperties": {
                    "host": "[parameters('Sftp1_properties_typeProperties_host')]",
                    "port": 22,
                    "skipHostKeyValidation": true,
                    "authenticationType": "Basic",
                    "userName": "[parameters('Sftp1_properties_typeProperties_userName')]",
                    "password": {
                        "type": "SecureString",
                        "value": "[parameters('Sftp1_password')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
                    "accountKey": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_AKV_AvengaAnalytics",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "AzureDataLakeDWHBlobStorageKey"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AKV_AvengaAnalytics')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Hubspot1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "Hubspot",
                "typeProperties": {
                    "clientId": "[parameters('Hubspot1_properties_typeProperties_clientId')]",
                    "clientSecret": {
                        "type": "SecureString",
                        "value": "[parameters('Hubspot1_clientSecret')]"
                    },
                    "accessToken": {
                        "type": "SecureString",
                        "value": "[parameters('Hubspot1_accessToken')]"
                    },
                    "refreshToken": {
                        "type": "SecureString",
                        "value": "[parameters('Hubspot1_refreshToken')]"
                    },
                    "useEncryptedEndpoints": true,
                    "useHostVerification": true,
                    "usePeerVerification": true
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_REST_MicrosoftGraph')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('LS_REST_MicrosoftGraph_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_ADLS_DataLakeDWHStorage')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[parameters('LS_ADLS_DataLakeDWHStorage_properties_typeProperties_url')]",
                    "accountKey": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "LS_AKV_AvengaAnalytics",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "AzureDataLakeStorageKey"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AKV_AvengaAnalytics')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_REST_CoreBase_TimeOff')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('LS_REST_CoreBase_TimeOff_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous",
                    "authHeaders": {
                        "secret": {
                            "type": "SecureString",
                            "value": "**********"
                        }
                    }
                }
            },
            "dependsOn": []
        }
    ]
}