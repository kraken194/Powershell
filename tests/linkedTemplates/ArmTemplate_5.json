{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "adf-avenga-analytics-dev"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/PL_GS_UploadBacklogDE')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get_GSA_PrivateKey",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/GoogleServiceAccountPrivateKey?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_GSA_Auth_Token",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_GSA_PrivateKey",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetGoogleServiceAccountAuthToken",
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "value": "{\"private_key\":\"@{activity('Get_GSA_PrivateKey').output.value}\",\"client_email\":\"@{pipeline().parameters.ParamClientEmail}\",\"user\":\"@{pipeline().parameters.ParamUserEmail}\",\"scopes\":[\"https://www.googleapis.com/auth/spreadsheets\"]}",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_AF_AvengaAnaliticsFuncApp",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Get current date",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Upload previous months",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "DECLARE @CurrentDate DATE = GETDATE();\nSELECT \n\t[Today] = @CurrentDate\n\t,[MonthName] = DATENAME(month,@CurrentDate)\n\t,[PreviousMonthName] = DATENAME(month, DATEADD(month, -1, @CurrentDate))\n\t,[DayNumber] = DATEPART(day, @CurrentDate)\n\t,[WorkingDayNumber] = MAX([BusinessDayNo])\nFROM [pbi].[vCalendar]\nWHERE [Date] <= @CurrentDate\n\tAND [LastDayOfMonth] = EOMONTH(@CurrentDate)",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "pbi",
                                    "TableName": "vCalendar"
                                }
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "Upload current month",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get current date",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@less(activity('Get current date').output.firstRow.WorkingDayNumber, 6)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Get data from DWH",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Clear spreadsheet",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": "WITH CTE_ProjectForecast AS\n(\nSELECT\n\t[Const] = 1\n\t,[ArrayValue] = CAST(\n\tCONCAT(\n\t\t'[\"', ISNULL([Customer as reported (grouped)], '')\n\t\t,'\", \"', ISNULL([Customer (as reported)], '')\n\t\t,'\", \"', REPLACE([ProjectName], '\"', '\\\"')\n\t\t,'\", \"', [ProjectID]\n\t\t,'\", \"', ISNULL([ProjectManager], '')\n\t\t,'\", \"', DATEADD(day, -1, fpf.[Date])\n\t\t--,'\", \"', [Currency]\n\t\t,'\", ', ISNULL([Actuals MD rate (calc.)], 0)\n\t\t,', ', ISNULL([ManDaysRemaining], 0)\n\t\t,', ', ISNULL([ManDaysSpent], 0)\n\t\t--,'\", \"', [Code]\n\t\t,', \"=H2-SUM(R2:AH2)\"' -- Divergence\n\t\t,', ', ISNULL([January], 0)\n\t\t,', ', ISNULL([February], 0)\n\t\t,', ', ISNULL([March], 0)\n\t\t,', ', ISNULL([April], 0)\n\t\t,', ', ISNULL([May], 0)\n\t\t,', ', ISNULL([June], 0)\n\t\t,', ', ISNULL([July], 0)\n\t\t,', ', ISNULL([August], 0)\n\t\t,', ', ISNULL([September], 0)\n\t\t,', ', ISNULL([October], 0)\n\t\t,', ', ISNULL([November], 0)\n\t\t,', ', ISNULL([December], 0)\n\t\t,', ', ISNULL([Next FY January], 0)\n\t\t,', ', ISNULL([Next FY February], 0)\n\t\t,', ', ISNULL([Next FY March], 0)\n\t\t,', ', ISNULL([Next FY April], 0)\n\t\t,', ', ISNULL([Next FY May], 0)\n\t\t,', ', ISNULL([Next FY June], 0)\n\t\t,', ', ISNULL([Next FY July], 0)\n\t\t,', ', ISNULL([Next FY August], 0)\n\t\t,', ', ISNULL([Next FY September], 0)\n\t\t,', ', ISNULL([Next FY October], 0)\n\t\t,', ', ISNULL([Next FY November], 0)\n\t\t,', ', ISNULL([Next FY December], 0)\n\t\t--,'\", \"', [ManDaysPlanningTotal]\n\t\t, ']'\n\t) AS NVARCHAR(MAX))\nFROM [pbi].[vFactProjectForecastMI] fpf\n\tINNER JOIN [dbo].[Calendar] c ON fpf.[Date] = c.[Date]\nWHERE c.[LastDayOfMonth] = EOMONTH(GETDATE())\n)\nSELECT [ArrayList] = STRING_AGG([ArrayValue], ',')\nFROM CTE_ProjectForecast\nGROUP BY [Const]\n",
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_ADWH_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "pbi",
                                                "TableName": "vFactProjectForecastMI"
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "Insert data into Google Sheets",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Get data from DWH",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://sheets.googleapis.com/v4/spreadsheets/', activity('Get_Google_Sheet_ID').output.value, '/values/', activity('Get current date').output.firstRow.PreviousMonthName, '!A2%3AZZ999999?valueInputOption=RAW')",
                                            "type": "Expression"
                                        },
                                        "method": "PUT",
                                        "headers": {
                                            "Authorization": {
                                                "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                "type": "Expression"
                                            },
                                            "valueInputOption": "RAW"
                                        },
                                        "body": {
                                            "value": "@concat('{\n    \"values\": [',\nactivity('Get data from DWH').output.firstRow.ArrayList,\n    ']\n}')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Clear spreadsheet",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://sheets.googleapis.com/v4/spreadsheets/', activity('Get_Google_Sheet_ID').output.value, '/values/', activity('Get current date').output.firstRow.PreviousMonthName, '!A2%3AZZ999999:clear')",
                                            "type": "Expression"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Authorization": {
                                                "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                "type": "Expression"
                                            }
                                        },
                                        "body": {
                                            "value": "{}",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Upload previous months",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get_GSA_Auth_Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Get_Google_Sheet_ID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@range(1, int(pipeline().parameters.MonthBack))",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Get previous month name",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "@concat('DECLARE @PreviousMonth DATE = DATEADD(month, -', string(add(item(), 1)), ', GETDATE());\nSELECT \n    [Date] = @PreviousMonth\n    ,[MonthName] = DATENAME(month, @PreviousMonth)')",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_ADWH_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "dbo",
                                                "TableName": "parameter"
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "Get previous month data from DWH",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Clear previous month sheet",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "@concat(variables('SubSelectQuery'), \n'WHERE c.[LastDayOfMonth] = EOMONTH(DATEADD(month, -', item(), ', GETDATE()))\n)',\nvariables('SelectQuery'))",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_ADWH_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "dbo",
                                                "TableName": "FactProjectForecastMI"
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "Insert prev month data into Google Sheets",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Get previous month data from DWH",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://sheets.googleapis.com/v4/spreadsheets/', activity('Get_Google_Sheet_ID').output.value, '/values/', activity('Get previous month name').output.firstRow.MonthName, '!A2%3AZZ999999?valueInputOption=RAW')",
                                            "type": "Expression"
                                        },
                                        "method": "PUT",
                                        "headers": {
                                            "Authorization": {
                                                "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                "type": "Expression"
                                            },
                                            "valueInputOption": "RAW"
                                        },
                                        "body": {
                                            "value": "@concat('{\n    \"values\": [',\nactivity('Get previous month data from DWH').output.firstRow.ArrayList,\n    ']\n}')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Clear previous month sheet",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Get previous month name",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://sheets.googleapis.com/v4/spreadsheets/', activity('Get_Google_Sheet_ID').output.value, '/values/', activity('Get previous month name').output.firstRow.MonthName, '!A2%3AZZ999999:clear')",
                                            "type": "Expression"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Authorization": {
                                                "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                "type": "Expression"
                                            }
                                        },
                                        "body": {
                                            "value": "{}",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get_Google_Sheet_ID",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/GoogleSheetIDBacklogDE?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "MonthBack": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "ParamClientEmail": {
                        "type": "string",
                        "defaultValue": "avenga-dwh-account@avengadwh.iam.gserviceaccount.com"
                    },
                    "ParamUserEmail": {
                        "type": "string",
                        "defaultValue": "avenga.dwh.account@avenga.com"
                    }
                },
                "variables": {
                    "SubSelectQuery": {
                        "type": "String",
                        "defaultValue": "WITH CTE_ProjectForecast AS ( SELECT [Const] = 1 ,[ArrayValue] = CAST( CONCAT('[\"', ISNULL([Customer as reported (grouped)], '')   ,'\", \"', ISNULL([Customer (as reported)], '')   ,'\", \"', REPLACE([ProjectName], '\"', '\\\"')   ,'\", \"', [ProjectID]   ,'\", \"', ISNULL([ProjectManager], '')   ,'\", \"', DATEADD(day, -1, fpf.[Date])   ,'\", ', ISNULL([Actuals MD rate (calc.)], '0')   ,', ', ISNULL([ManDaysRemaining], '0')   ,', ', ISNULL([ManDaysSpent], '0')   ,', \"=H2-SUM(R2:AH2)\", ', ISNULL([January], '0')   ,', ', ISNULL([February], '0')   ,', ', ISNULL([March], '0')   ,', ', ISNULL([April], '0')   ,', ', ISNULL([May], '0')   ,', ', ISNULL([June], '0')   ,', ', ISNULL([July], '0')   ,', ', ISNULL([August], '0')   ,', ', ISNULL([September], '0')   ,', ', ISNULL([October], '0')   ,', ', ISNULL([November], '0')   ,', ', ISNULL([December], '0')   ,', ', ISNULL([Next FY January], '0')   ,', ', ISNULL([Next FY February], '0')   ,', ', ISNULL([Next FY March], '0')   ,', ', ISNULL([Next FY April], '0')   ,', ', ISNULL([Next FY May], '0')   ,', ', ISNULL([Next FY June], '0')   ,', ', ISNULL([Next FY July], '0')   ,', ', ISNULL([Next FY August], '0')   ,', ', ISNULL([Next FY September], '0')   ,', ', ISNULL([Next FY October], '0')   ,', ', ISNULL([Next FY November], '0')   ,', ', ISNULL([Next FY December], '0')   , ']'  ) AS NVARCHAR(MAX)) FROM [dbo].[vFactProjectForecastMI] fpf  INNER JOIN [dbo].[Calendar] c ON fpf.[Date] = c.[Date] "
                    },
                    "SelectQuery": {
                        "type": "String",
                        "defaultValue": " SELECT [ArrayList] = STRING_AGG([ArrayValue], ',') FROM CTE_ProjectForecast GROUP BY [Const] "
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH/Export/GoogleSheets"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:19Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_Asseco_wusr_TBL_ObrotyWKNew')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy wusr_TBL_ObrotyWKNew",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT \n\t [Gniazdo;PR]\n\t,[konto]\n\t,[GI]\n\t,[DataRRMM]\n\t,[symwl]\n\t,[kwota]\n       ,[gniazdo;KL]\n       ,[data]\nFROM [PL_Asseco_staging_dbo].[wusr_TBL_ObrotyWKNew]\nWHERE ([Gniazdo;PR] <> 'NOM' OR [Gniazdo;PR] IS NULL)\nAND [konto] IN ('700-100','700-110','701-100')\nAND [Gniazdo;TP] = 'ND'\nAND [status] = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[Asseco_wusr_TBL_ObrotyWKNew];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_Asseco_staging_dbo",
                                    "TableName": "wusr_TBL_ObrotyWKNew"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "Asseco_wusr_TBL_ObrotyWKNew"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Asseco"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:20Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSalesforceProjectTeamMember')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Project Team Member",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "WITH ScrambledCTE AS\n(\n\tSELECT\n\t\t[Id]\n\t\t,[Adjusted_Rate__c] = CASE WHEN ISNULL([Adjusted_Rate__c], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 61) + 40 ELSE 0 END\n\t\t,[Default_Org_Adjusted_Amount__c] = CASE WHEN ISNULL([Default_Org_Adjusted_Amount__c], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 61) + 40 ELSE 0 END\n\t\t,[Default_Org_Cost_Amount__c] = CASE WHEN ISNULL([Default_Org_Cost_Amount__c], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 61) + 40 ELSE 0 END\n\t\t,[Default_Org_Rate_Amount__c] = CASE WHEN ISNULL([Default_Org_Rate_Amount__c], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 61) + 40 ELSE 0 END\n\t\t,[Hourly_Cost__c] = CASE WHEN ISNULL([Hourly_Cost__c], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 61) + 40 ELSE 0 END\n\t\t,[Hourly_Rate__c] = CASE WHEN ISNULL([Hourly_Rate__c], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 61) + 40 ELSE 0 END\n\t\t,[Duration_Hours] =\n\t\t\tCASE\n\t\t\t\tWHEN [Duration_Unit__c] = 'Days' THEN CAST([Duration__c] AS DECIMAL(9,2)) * 8\n\t\t\t\tWHEN [Duration_Unit__c] = 'Months' THEN CAST([Duration__c] AS DECIMAL(9,2)) * 168\n\t\t\t\tELSE CAST([Duration__c] AS DECIMAL(9,2))\n\t\t\tEND\n\tFROM [GLO_Salesforce].[Project_Team_Member__c]\n)\nSELECT\n\tp.[Id]\n    ,[IsDeleted]\n    ,[Name]\n    ,[CurrencyIsoCode]\n    ,[CreatedDate]\n    ,[CreatedById]\n    ,[LastModifiedDate]\n    ,[LastModifiedById]\n    ,[SystemModstamp]\n    ,[LastActivityDate]\n    ,[Opportunity__c]\n    ,s.[Adjusted_Rate__c]\n    ,[Comment__c]\n    ,[Contribution__c]\n    ,s.[Default_Org_Adjusted_Amount__c]\n    ,s.[Default_Org_Cost_Amount__c]\n    ,s.[Default_Org_Rate_Amount__c]\n    ,[Duration_Unit__c]\n    ,[Duration__c]\n    ,s.[Hourly_Cost__c]\n    ,s.[Hourly_Rate__c]\n    ,[Is_Invalid_Duration__c]\n    ,[Location__c]\n    ,[Opportunity_Stage__c]\n    ,[Project_Start__c]\n    ,[Quantity__c]\n    ,[Senioryty__c]\n    ,[Technology__c]\n    ,[Tier__c]\n    ,[Total_Adjusted_Rate__c] = s.[Adjusted_Rate__c] * s.[Duration_Hours]\n    ,[Total_Cost__c] = s.[Hourly_Cost__c] * s.[Duration_Hours]\n    ,[Total_Rate__c] = s.[Hourly_Rate__c] * s.[Duration_Hours]\nFROM [GLO_Salesforce].[Project_Team_Member__c] p\n\tINNER JOIN ScrambledCTE s ON p.Id = s.Id",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_Salesforce].[Project_Team_Member__c];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Project_Team_Member__c"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Project_Team_Member__c"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:21Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_AzureADGroupMembers')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Group Members",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[OdataType]\n\t,[OdataID]\n\t,[MemberID]\n\t,[BusinessPhones]\n\t,[DisplayName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [DisplayName]), 2)\n\t,[GivenName] = CONVERT(NVARCHAR(32), HashBytes('MD5', [GivenName]), 2)\n\t,[JobTitle]\n\t,[Mail] = NULLIF(CONCAT(\n\t\tCONVERT(NVARCHAR(32), HashBytes('MD5', LEFT([Mail], CHARINDEX('@', [Mail]) - 1)), 2),\n\t\tCASE\n\t\t\tWHEN RIGHT([Mail], LEN([Mail]) - CHARINDEX('@', [Mail])) = 'avenga.com' THEN '@avenga.com.dev'\n\t\t\tELSE RIGHT([Mail], LEN([Mail]) - CHARINDEX('@', [Mail]) + 1)\n\t\tEND), '')\n\t,[MobilePhone]\n\t,[OfficeLocation]\n\t,[PreferredLanguage]\n\t,[Surname] = CONVERT(NVARCHAR(32), HashBytes('MD5', [Surname]), 2)\n\t,[UserPrincipalName] = NULLIF(CONCAT(\n\t\tCONVERT(NVARCHAR(32), HashBytes('MD5', LEFT([UserPrincipalName], CHARINDEX('@', [UserPrincipalName]) - 1)), 2),\n\t\tCASE\n\t\t\tWHEN RIGHT([UserPrincipalName], LEN([UserPrincipalName]) - CHARINDEX('@', [UserPrincipalName])) = 'avenga.com' THEN '@avenga.com.dev'\n\t\t\tELSE RIGHT([UserPrincipalName], LEN([UserPrincipalName]) - CHARINDEX('@', [UserPrincipalName]) + 1)\n\t\tEND), '')\n\t,[GroupID]\nFROM [GLO_AzureAD].[AzureGroupMembers]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_AzureAD].[AzureGroupMembers];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_AzureAD",
                                    "TableName": "AzureGroupMembers"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_AzureAD",
                                    "TableName": "AzureGroupMembers"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/AzureAD"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:19Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DL_AzureADGroups')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get_App_ClientID",
                        "description": "Get Azure application (client) ID",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/ServicePrincipalClientID?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Copy AAD Groups",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Get_Bearer_Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET",
                                "additionalHeaders": {
                                    "Authorization": {
                                        "value": "@concat('Bearer ', activity('Get_Bearer_Token').output.access_token)",
                                        "type": "Expression"
                                    }
                                },
                                "paginationRules": {
                                    "AbsoluteURL": "$['@odata.nextLink']"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_AzureAD].[AzureGroups];\n--TRUNCATE TABLE [GLO_AzureAD].[AzureGroupMembers]",
                                "tableOption": "autoCreate",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "path": "[['@odata.id']"
                                        },
                                        "sink": {
                                            "name": "OdataID",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['id']"
                                        },
                                        "sink": {
                                            "name": "GroupID",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['deletedDateTime']"
                                        },
                                        "sink": {
                                            "name": "DeletedDateTime",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['classification']"
                                        },
                                        "sink": {
                                            "name": "Classification",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['createdDateTime']"
                                        },
                                        "sink": {
                                            "name": "CreatedDateTime",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['creationOptions']"
                                        },
                                        "sink": {
                                            "name": "CreationOptions",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['description']"
                                        },
                                        "sink": {
                                            "name": "Description",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['displayName']"
                                        },
                                        "sink": {
                                            "name": "DisplayName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['expirationDateTime']"
                                        },
                                        "sink": {
                                            "name": "ExpirationDateTime",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['groupTypes']"
                                        },
                                        "sink": {
                                            "name": "GroupTypes",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['isAssignableToRole']"
                                        },
                                        "sink": {
                                            "name": "IsAssignableToRole",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['mail']"
                                        },
                                        "sink": {
                                            "name": "Mail",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['mailEnabled']"
                                        },
                                        "sink": {
                                            "name": "MailEnabled",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['mailNickname']"
                                        },
                                        "sink": {
                                            "name": "MailNickname",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['membershipRule']"
                                        },
                                        "sink": {
                                            "name": "MembershipRule",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['membershipRuleProcessingState']"
                                        },
                                        "sink": {
                                            "name": "MembershipRuleProcessingState",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesDomainName']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesDomainName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesLastSyncDateTime']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesLastSyncDateTime",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesNetBiosName']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesNetBiosName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesSamAccountName']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesSamAccountName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesSecurityIdentifier']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesSecurityIdentifier",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesSyncEnabled']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesSyncEnabled",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['preferredDataLocation']"
                                        },
                                        "sink": {
                                            "name": "PreferredDataLocation",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['preferredLanguage']"
                                        },
                                        "sink": {
                                            "name": "PreferredLanguage",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['proxyAddresses']"
                                        },
                                        "sink": {
                                            "name": "ProxyAddresses",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['renewedDateTime']"
                                        },
                                        "sink": {
                                            "name": "RenewedDateTime",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['resourceBehaviorOptions']"
                                        },
                                        "sink": {
                                            "name": "ResourceBehaviorOptions",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['resourceProvisioningOptions']"
                                        },
                                        "sink": {
                                            "name": "ResourceProvisioningOptions",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['securityEnabled']"
                                        },
                                        "sink": {
                                            "name": "SecurityEnabled",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['securityIdentifier']"
                                        },
                                        "sink": {
                                            "name": "SecurityIdentifier",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['theme']"
                                        },
                                        "sink": {
                                            "name": "Theme",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['visibility']"
                                        },
                                        "sink": {
                                            "name": "Visibility",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['onPremisesProvisioningErrors']"
                                        },
                                        "sink": {
                                            "name": "OnPremisesProvisioningErrors",
                                            "type": "String"
                                        }
                                    }
                                ],
                                "collectionReference": "$['value']",
                                "mapComplexValuesToString": true
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_API_MicrosoftGraph",
                                "type": "DatasetReference",
                                "parameters": {
                                    "RelativeURL": "v1.0/groups"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_AzureAD",
                                    "TableName": "AzureGroups"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Get_App_ClientSecret",
                        "description": "Get Azure app client secret",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/ServicePrincipalClientSecret?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_Tenant_ID",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/AzureTenantId?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_Bearer_Token",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_Tenant_ID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Get_App_ClientSecret",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Get_App_ClientID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": true
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://login.microsoftonline.com/', activity('Get_Tenant_ID').output.value, '/oauth2/v2.0/token')",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            "body": {
                                "value": "@concat('grant_type=client_credentials&scope=https%3A%2F%2Fgraph.microsoft.com%2F.default&client_id=', activity('Get_App_ClientID').output.value, '&client_secret=', activity('Get_App_ClientSecret').output.value)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Get Group IDs",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Copy AAD Groups",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT DISTINCT GroupID\nFROM [GLO_AzureAD].[AzureGroups]",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_AzureAD",
                                    "TableName": "AzureGroups"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachGroup",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Group IDs",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Group IDs').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Copy Azure Group Members",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "additionalColumns": [
                                                {
                                                    "name": "GroupID",
                                                    "value": {
                                                        "value": "@item().GroupID",
                                                        "type": "Expression"
                                                    }
                                                }
                                            ],
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@concat('Bearer ', activity('Get_Bearer_Token').output.access_token)",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "AbsoluteURL": "$['@odata.nextLink']"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureSqlSink",
                                            "tableOption": "autoCreate",
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['@odata.type']"
                                                    },
                                                    "sink": {
                                                        "name": "OdataType",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['@odata.id']"
                                                    },
                                                    "sink": {
                                                        "name": "OdataID",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "MemberID",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['businessPhones']"
                                                    },
                                                    "sink": {
                                                        "name": "BusinessPhones",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['displayName']"
                                                    },
                                                    "sink": {
                                                        "name": "DisplayName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['givenName']"
                                                    },
                                                    "sink": {
                                                        "name": "GivenName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['jobTitle']"
                                                    },
                                                    "sink": {
                                                        "name": "JobTitle",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['mail']"
                                                    },
                                                    "sink": {
                                                        "name": "Mail",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['mobilePhone']"
                                                    },
                                                    "sink": {
                                                        "name": "MobilePhone",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['officeLocation']"
                                                    },
                                                    "sink": {
                                                        "name": "OfficeLocation",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['preferredLanguage']"
                                                    },
                                                    "sink": {
                                                        "name": "PreferredLanguage",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['surname']"
                                                    },
                                                    "sink": {
                                                        "name": "Surname",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['userPrincipalName']"
                                                    },
                                                    "sink": {
                                                        "name": "UserPrincipalName",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['GroupID']"
                                                    },
                                                    "sink": {
                                                        "name": "GroupID",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['value']",
                                            "mapComplexValuesToString": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_API_MicrosoftGraph",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "RelativeURL": {
                                                    "value": "@concat('v1.0/groups/', item().GroupID, '/members')",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_DL_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "GLO_AzureAD",
                                                "TableName": "AzureGroupMembers"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLake"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:18Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_MIBullhornCustomerMapping')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Customer Mapping",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Wait 60 seconds",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "maxConcurrentConnections": 0,
                                    "recursive": false,
                                    "wildcardFolderPath": "Stage/CSV/CustomerMapping",
                                    "wildcardFileName": "CustomerMapping_*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[BullhornCustomerMappingMI]",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "ABBR",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "CustomerCode",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Projectile_x0020_customer_x0020_name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Debtor_x0020_No_x002e_",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "CustomerID",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Customer_x0020_as_x0020_reported_x0020_(grouped)",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "CustomerGroup",
                                            "type": "String"
                                        }
                                    }
                                ]
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_ADLS_CSVFile",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().globalParameters.DWHContainerName",
                                        "type": "Expression"
                                    },
                                    "Path": "Stage/CSV/CustomerMapping",
                                    "FileName": "CustomerMapping_*"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "BullhornCustomerMappingMI"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Execute Logic App",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_Logic_App_URL",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Get_Google_Sheet_ID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@activity('Get_Logic_App_URL').output.value",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "value": "@concat('{\"googleSheetID\":\"', activity('Get_Google_Sheet_ID').output.value, '\",\"storageFolder\":\"CustomerMapping\",\t\"sheetList\": [\n                \"mapping\"\n        ]}')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Get_Logic_App_URL",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/LogicAppReadGoogleSheetsURL?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_Google_Sheet_ID",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/GoogleSheetIDCustomerMappingDE?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Wait 60 seconds",
                        "type": "Wait",
                        "dependsOn": [
                            {
                                "activity": "Execute Logic App",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "waitTimeInSeconds": 60
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/ManualInput"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:20Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_MIProjectForecast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Project Forecast Manual Adjustments",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Wait 60 seconds",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 2,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "maxConcurrentConnections": 0,
                                    "recursive": false,
                                    "wildcardFolderPath": "Stage/CSV/ProjectForecastMI",
                                    "wildcardFileName": "ProjectForecastMI_*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[ProjectForecastMI]",
                                "maxConcurrentConnections": 0,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "Customer_x0020_(Grouped)",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "CustomerGroup",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Customer",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "CustomerName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Project_x0020_Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ProjectName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Project_x0020_Code",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ProjectID",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Project_x0020_Manager",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ProjectManager",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Backlog_x0020_Reporting_x0020_Month",
                                            "type": "DateTime"
                                        },
                                        "sink": {
                                            "name": "ReportingMonth",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Actuals_x0020_MD_x0020_rate_x0020_(calc_x002e_)",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ActualsMDRateCalc"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Man_x0020_Days_x0020_Remaining",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ManDaysRemaining",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Man_x0020_Days_x0020_Spent",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ManDaysSpent",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "PT_x0020_to_x0020_be_x0020_planned",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Divergence",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "January",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "January",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "February",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "February",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "March",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "March",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "April",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "April",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "May",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "May",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "June",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "June",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "July",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "July",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "August",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "August",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "September",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "September",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "October",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "October",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "November",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "November",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "December",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "December",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_January",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYJanuary",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_February",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYFebruary",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_March",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYMarch",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_April",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYApril",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_May",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYMay",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_June",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYJune",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_July",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYJuly",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_August",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYAugust",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_September",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYSeptember",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_October",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYOctober",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_November",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYNovember",
                                            "type": "Decimal"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Next_x0020_FY_x0020_December",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "NextFYDecember",
                                            "type": "Decimal"
                                        }
                                    }
                                ]
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_ADLS_CSVFile",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().globalParameters.DWHContainerName",
                                        "type": "Expression"
                                    },
                                    "Path": "Stage/CSV/ProjectForecastMI",
                                    "FileName": "ProjectForecastMI_*"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "ProjectForecastMI"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Execute Logic App",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_Logic_App_URL",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Get_Google_Sheet_ID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@activity('Get_Logic_App_URL').output.value",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "value": "@concat('{\"googleSheetID\":\"', activity('Get_Google_Sheet_ID').output.value, '\",\"storageFolder\":\"ProjectForecastMI\",\t\"sheetList\": [\n\t\"January\",\n\t\"February\",\n\t\"March\",\n\t\"April\",\n\t\"May\",\n\t\"June\",\n\t\"July\",\n\t\"August\",\n\t\"September\",\n\t\"October\",\n\t\"November\",\n\t\"December\"\n        ]}')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Get_Logic_App_URL",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/LogicAppReadGoogleSheetsURL?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_Google_Sheet_ID",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().globalParameters.KeyVaultName, '.vault.azure.net/secrets/GoogleSheetIDBacklogDE?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Wait 60 seconds",
                        "type": "Wait",
                        "dependsOn": [
                            {
                                "activity": "Execute Logic App",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "waitTimeInSeconds": 60
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/ManualInput"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:19Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_SalesforceForecast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy SF Forecast__c",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Id]\n      ,[IsDeleted]\n      ,[Name]\n      ,[CurrencyIsoCode]\n      ,[CreatedDate]\n      ,[LastModifiedDate]\n      ,[Opportunity__c]\n      ,[Active_Months__c]\n      ,[Apr__c]\n      ,[Aug__c]\n      ,[Dec__c]\n      ,[Feb__c]\n      ,[First_Year__c]\n      ,[Jan__c]\n      ,[July__c]\n      ,[June__c]\n      ,[Mar__c]\n      ,[May__c]\n      ,[Nov__c]\n      ,[Oct__c]\n      ,[Sept__c]\n      ,[Total_Amount__c]\n      ,[Year__c]\n  FROM [GLO_Salesforce].[Forecast__c]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "TRUNCATE TABLE [stage].[SalesforceForecast__c];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Forecast__c"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "SalesforceForecast__c"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:19Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSalesforceForecastHistory')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled Salesforce Forecast History",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[Id]\n\t,[IsDeleted]\n\t,[ParentId]\n\t,[CreatedById]\n\t,[CreatedDate]\n\t,[Field]\n\t,[DataType]\n\t,[OldValue]\n\t,[NewValue]\nFROM [GLO_Salesforce].[Forecast__History]\nWHERE [DataType] <> 'Currency'\nUNION\nSELECT\n\t[Id]\n\t,[IsDeleted]\n\t,[ParentId]\n\t,[CreatedById]\n\t,[CreatedDate]\n\t,[Field]\n\t,[DataType]\n\t,[OldValue] = CASE WHEN [OldValue] <> '0' THEN CAST((ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 AS NVARCHAR(765)) ELSE '0' END\n\t,[NewValue] = CASE WHEN [NewValue] <> '0' THEN CAST((ABS(CHECKSUM(NEWID())) % 190000.0) + 10000.0 AS NVARCHAR(765)) ELSE '0' END\nFROM [GLO_Salesforce].[Forecast__History]\nWHERE [DataType] = 'Currency'",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [GLO_Salesforce].[Forecast__History];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Forecast__History"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "GLO_Salesforce",
                                    "TableName": "Forecast__History"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Salesforce"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:18Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADLS_Employee')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Employee",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT \n      [EmployeeKey]\n      ,[EmployeeID]\n      ,[FirstName]\n      ,[LastName]\n      ,[FullName]\n      ,[Email]\n      ,[IsActive]\n      ,[PositionName]\n      ,[TierName]\n      ,[SeniorityName]\n      ,[CompetencyName]\n      ,[CountryName]\n      ,[BranchName]\n      ,[DepartmentName]\n      ,[WorkPhone]\n      ,[MobilePhone]\n      ,[Gender]\n      ,[IsCertified]\n      ,[StartDate]\n      ,[EndDate]\n      ,[ExternalID]\n      ,[ExternalSystemName]\n      ,[EmploymentType]\n      ,[HRPartnerKey]\n      ,[ManagerKey]\n      ,[Billable]\n      ,[FullTimeEquivalent]\n      ,[DepartmentNameSales]\n      ,[BusinessLine]\n      ,[SAMAccountName]\nFROM dbo.Employee\nWHERE IsCurrent = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "dbo",
                                    "TableName": "Employee"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADLS_ParquetFile",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FileName": "Employee"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "AnalyticsDWH/Export/AzureStorage"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:21Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_Scramble1C_InfoRg24484')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled InfoRg24484",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [_Fld24485]\n      ,[_Fld24486]\n      ,[_Fld24487]\n      ,[_Fld24488]\n      ,[_Fld24489]\n      ,[_Fld24490]\n      ,[_Fld24491]\n      ,[_Fld24492]\n      ,[_Fld24493]\n      ,[_Fld24494]\n      ,[_Fld24495]\n      ,[_Fld24496]\n      ,[_Fld24497]\n      ,[_Fld24498]\n      ,[_Fld24499]\n      ,[_Fld24500]\n      ,[_Fld24501]\n      ,[_Fld24502]\n      ,[_Fld24503]\n      ,[_Fld24504]\n      ,[_Fld24505]\n      ,[_Fld24506]\n      ,[_Fld24507]\n      ,[_Fld24508]\n      ,[_Fld24509]\n      ,[_Fld24510]\n      ,[_Fld24511]\n      ,[_Fld24512]\n      ,[_Fld24513]\n      ,[_Fld24514]\n      ,[_Fld24515]\n      ,[_Fld24516]\n      ,[_Fld24517]\n      ,[_Fld24518]\n      ,[_Fld24519]\n      ,[_Fld24520]\n      ,[_Fld24521]\n      ,[_Fld24522]\n      ,[_Fld24523]\n      ,[_Fld24524]\n      ,[_Fld24525]\n      ,[_Fld24526]\n      ,[_Fld24527]\n      ,[_Fld24528]\n      ,[_Fld24529]\n      ,[_Fld24530]\n      ,[_Fld24531]\n      ,[_Fld24532]\n      ,[_Fld24533]\n      ,[_Fld24534]\n      ,[_Fld24535]\n      ,[_Fld24536] = [_Fld24536] * R.RN\n      ,[_Fld24537] = [_Fld24537] * R.RN\n      ,[_Fld24538] = [_Fld24538] * R.RN\n      ,[_Fld24539]\n      ,[_SimpleKey]\n  FROM [UA_1C_staging_dbo].[_InfoRg24484]\n\tCROSS APPLY (SELECT (1.0 * ((ABS(CHECKSUM(NEWID())) % 99) + 1)) / 100 AS RN) R",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [UA_1C_staging_dbo].[_InfoRg24484];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_1C_staging_dbo",
                                    "TableName": "_InfoRg24484"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_1C_staging_dbo",
                                    "TableName": "_InfoRg24484"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/1C"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:21Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_Scramble1C_AccumRg24640')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled _AccumRg24640",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[_Period]\n\t,[_RecorderRRef]\n\t,[_LineNo]\n\t,[_Active]\n\t,[_Fld24641RRef]\n\t,[_Fld24642RRef]\n\t,[_Fld24643]\n\t,[_Fld24644]\n\t,[_Fld24647RRef]\n\t,[_Fld24645] = CASE WHEN ISNULL([_Fld24645], 0) <> 0 THEN (ABS(CHECKSUM(NEWID())) % 49000) + 1000 ELSE 0 END\n\t,[_Fld24721]\n\t,[_Fld24722]\n\t,[_Fld24723]\n\t,[_Fld24724]\n\t,[_Fld24725]\n\t,[_Fld24726]\nFROM [UA_1C_staging_dbo].[_AccumRg24640]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [UA_1C_staging_dbo].[_AccumRg24640];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_1C_staging_dbo",
                                    "TableName": "_AccumRg24640"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_1C_staging_dbo",
                                    "TableName": "_AccumRg24640"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/1C"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:20Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleADACHTierTitle')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy DE ADACH TiersTitles",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT \n\t[id]\n\t,[gid]\n\t,[effectiveDate]\n\t,[Department2]\n\t,[Competency1]\n\t,[Competency2]\n\t,[Competency3]\n\t,[Tier1]\n\t,[Tier2]\n\t,[employeeNumber]\n\t,[status]\n\t,[hire_date]\n\t,[job_title]\n\t,[location]\n\t,[division]\n\t,[department]\n\t,[supervisor_id]\n\t,[termination_date]\n\t,[supervisor_eid]\n\t,[group_manager_email] =\n\t\tCASE WHEN COALESCE([group_manager_email], '') = ''\n\t\t\t\tTHEN [group_manager_email]\n\t\t\t WHEN CHARINDEX('@', [group_manager_email]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([group_manager_email])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([group_manager_email]), CHARINDEX('@', [group_manager_email]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([group_manager_email], LEN([group_manager_email]) - CHARINDEX('@', [group_manager_email])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([group_manager_email], LEN([group_manager_email]) - CHARINDEX('@', [group_manager_email]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n\t,[gm_ad_username] = CONVERT(NVARCHAR(32), HashBytes('MD5', [gm_ad_username]), 2)\nFROM [DE_BambooHR_ADACH].[TiersTitles]\norder by [gm_ad_username]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [DE_BambooHR_ADACH].[TiersTitles];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_BambooHR_ADACH",
                                    "TableName": "TiersTitles"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "DE_BambooHR_ADACH",
                                    "TableName": "TiersTitles"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/BambooHR"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:19Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleAITPTierTitle')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy PL_BambooHR_AITP TiersTitles",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[id]\n\t,[gid]\n\t,[status]\n\t,[location]\n\t,[division]\n\t,[department]\n\t,[job_title]\n\t,[supervisor_id]\n\t,[hire_date]\n\t,[termination_date]\n\t,[group_manager_email] =\n\t\tCASE WHEN COALESCE([group_manager_email], '') = ''\n\t\t\t\tTHEN [group_manager_email]\n\t\t\t WHEN CHARINDEX('@', [group_manager_email]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([group_manager_email])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([group_manager_email]), CHARINDEX('@', [group_manager_email]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([group_manager_email], LEN([group_manager_email]) - CHARINDEX('@', [group_manager_email])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([group_manager_email], LEN([group_manager_email]) - CHARINDEX('@', [group_manager_email]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n\t,[gm_ad_username] = CONVERT(NVARCHAR(32), HashBytes('MD5', [gm_ad_username]), 2)\nFROM [PL_BambooHR_AITP].[TiersTitles]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [PL_BambooHR_AITP].[TiersTitles];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_BambooHR_AITP",
                                    "TableName": "TiersTitles"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_BambooHR_AITP",
                                    "TableName": "TiersTitles"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/BambooHR"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:18Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleSDCTierTitle')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy PL SDC TierTitle",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT\n\t[employee_id]\n\t,[tier]\n\t,[competency]\n\t,[job_info_date]\n\t,[location]\n\t,[division]\n\t,[department]\n\t,[job_title]\n\t,[id]\n\t,[supervisor_id]\n\t,[status]\n\t,[hire_date]\n\t,[termination_date]\n\t,[payRate]\n\t,[payType]\n\t,[payStartDate]\n\t,[group_manager_email] =\n\t\tCASE WHEN COALESCE([group_manager_email], '') = ''\n\t\t\t\tTHEN [group_manager_email]\n\t\t\t WHEN CHARINDEX('@', [group_manager_email]) = 0\n\t\t\t \tTHEN CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LOWER([group_manager_email])), 2), '@avenga.com.dev')\n\t\t\t ELSE CONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT(LOWER([group_manager_email]), CHARINDEX('@', [group_manager_email]) - 1)), 2),\n\t\t\t \t\tCASE WHEN RIGHT([group_manager_email], LEN([group_manager_email]) - CHARINDEX('@', [group_manager_email])) = 'avenga.com' \n\t\t\t \t\t\t\tTHEN '@avenga.com.dev'\n\t\t\t \t\t\t ELSE RIGHT([group_manager_email], LEN([group_manager_email]) - CHARINDEX('@', [group_manager_email]) + 1)\n\t\t\t \t\tEND) \n\t\tEND\n\t,[gm_ad_username] = CONVERT(NVARCHAR(32), HashBytes('MD5', [gm_ad_username]), 2)\n\t,[unified_job_title]\nFROM [PL_BambooHR_SDC].[TiersTitles]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [PL_BambooHR_SDC].[TiersTitles];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_BambooHR_SDC",
                                    "TableName": "TiersTitles"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "PL_BambooHR_SDC",
                                    "TableName": "TiersTitles"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/BambooHR"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:18Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_CorebaseTimeReport')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase TimeReport",
                        "description": "",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Get start processing date",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@concat('\nSELECT\n\t[Id]\n\t,[ProjectPositionPeriodId]\n\t,[ResourceId]\n\t,[ProjectId]\n\t,[ReportDay]\n\t,[SpentHours]\n\t,[ConfirmedSpentHours]\n\t,[ConfirmedByEmployeeId]\n\t,[ConfirmedByEmployeeDate]\n\t,[ConfirmedByTeamleadId]\n\t,[ConfirmedByTeamleadDate]\n\t,[CasesMask]\n\t,[EmployeeId]\nFROM [UA_CoreBase_staging_dbo].[TimeReport]\nWHERE [ReportDay] > ''', activity('Get start processing date').output.firstRow.StartDate, ''';')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": {
                                    "value": "@{concat('\nDELETE\nFROM [stage].[CorebaseTimeReport]\nWHERE [ReportDay] > ''', activity('Get start processing date').output.firstRow.StartDate, ''';')}",
                                    "type": "Expression"
                                },
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "TimeReport"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_ADWH_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "stage",
                                    "TableName": "CorebaseTimeReport"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Get start processing date",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@concat('SELECT StartDate = CONVERT(CHAR(10), EOMONTH(DATEADD(month, -', string(pipeline().parameters.MonthBack), ', CAST(GETDATE() AS DATE))) , 120);')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "FreeTimeManagement"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "MonthBack": {
                        "type": "int",
                        "defaultValue": 2
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:19Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_ADWH_Stage_SimpleCopyPolyBase')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach Table",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.TablesToCopy",
                                "type": "Expression"
                            },
                            "batchCount": 50,
                            "activities": [
                                {
                                    "name": "Copy table from DL into DWH stage",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "SqlDWSink",
                                            "preCopyScript": {
                                                "value": "@{concat('IF OBJECT_ID(N''stage.', item().dest_table, ''', N''U'') IS NOT NULL TRUNCATE TABLE [stage].[', item().dest_table, ']')}",
                                                "type": "Expression"
                                            },
                                            "allowPolyBase": true,
                                            "polyBaseSettings": {
                                                "rejectValue": 0,
                                                "rejectType": "value",
                                                "useTypeDefault": false
                                            },
                                            "tableOption": "autoCreate",
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": true,
                                        "stagingSettings": {
                                            "linkedServiceName": {
                                                "referenceName": "AzureDataLakeStorage1",
                                                "type": "LinkedServiceReference"
                                            },
                                            "path": {
                                                "value": "@concat(pipeline().globalParameters.DWHContainerName, '/Stage/PolyBase')",
                                                "type": "Expression"
                                            },
                                            "enableCompression": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_DL_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "@item().schema",
                                                "TableName": "@item().source_table"
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_ADWH_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "stage",
                                                "TableName": "@item().dest_table"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "TablesToCopy": {
                        "type": "array",
                        "defaultValue": [
                            {
                                "schema": "UA_CoreBase_staging_dbo",
                                "source_table": "Calendar",
                                "dest_table": "CorebaseCalendar"
                            }
                        ]
                    }
                },
                "folder": {
                    "name": "AnalyticsDWH/Stage"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:19Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_GoogleCalendarEvents')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Scrambled GoogleCalendarEvents",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT [Type]\n\t  ,[Kind]\n      ,[EventId]\n      ,[Status]\n      ,[UpdatedDate]\n      ,[StartTime]\n      ,[EndTime]\n      ,[Email] =\n\t\t\tCONCAT(CONVERT(NVARCHAR(32), HashBytes('MD5', LEFT([Email], CHARINDEX('@', [Email]) - 1)), 2),\n\t\t\t\tCASE\n\t\t\t\t\tWHEN RIGHT([Email], LEN([Email]) - CHARINDEX('@', [Email])) = 'avenga.com' THEN '@avenga.com.dev'\n\t\t\t\t\tELSE RIGHT([Email], LEN([Email]) - CHARINDEX('@', [Email]) + 1)\n\t\t\t\tEND)\n      ,[UserId]\n      ,[SyncToken]\nFROM [gsuite].[GoogleCalendarEvents]",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [gsuite].[GoogleCalendarEvents];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleCalendarEvents"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleCalendarEvents"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Google"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:19Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DL_GoogleCalendarEvents')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get_GSA_PrivateKey",
                        "description": "Get google service account private key",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://', pipeline().parameters.KeyVaultName, '.vault.azure.net/secrets/GoogleServiceAccountPrivateKey?api-version=7.0')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get_GSA_Auth_Token",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [
                            {
                                "activity": "Get_GSA_PrivateKey",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetGoogleServiceAccountAuthToken",
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "value": "{\"private_key\":\"@{activity('Get_GSA_PrivateKey').output.value}\",\"client_email\":\"@{pipeline().parameters.ParamClientEmail}\",\"user\":\"@{pipeline().parameters.ParamUserEmail}\",\"scopes\":[\"https://www.googleapis.com/auth/calendar.events.readonly\"]}",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_AF_AvengaAnaliticsFuncApp",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Get User IDs",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Get_GSA_Auth_Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "IF OBJECT_ID(N'gsuite.GoogleCalendarEvents') IS NOT NULL \nTRUNCATE TABLE [gsuite].[GoogleCalendarEvents];\n\nSELECT gu.[id], gu.[email]\nFROM [gsuite].[GoogleUsers] gu\n\tINNER JOIN [DE_BambooHR_ADACH].[Employees] e ON gu.[email] = e.[workEmail]\nWHERE gu.[suspended] <> 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleUsers"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachUser",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get User IDs",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get User IDs').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Get User Events Sync Token",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT SyncToken FROM [gsuite].[GoogleCalendarSyncTokens] WHERE UserId = @{item().id}",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "DS_DL_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "gsuite",
                                                "TableName": "GoogleCalendarSyncTokens"
                                            }
                                        },
                                        "firstRowOnly": false
                                    }
                                },
                                {
                                    "name": "Set Calendar Events Sync Token",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Get User Events Sync Token",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "CalendarEventsSyncToken",
                                        "value": {
                                            "value": "@if(empty(activity('Get User Events Sync Token').output.value),'',activity('Get User Events Sync Token').output.value[0].SyncToken)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Copy User Event Data",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Set Calendar Events Sync Token",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "additionalColumns": [
                                                {
                                                    "name": "UserId",
                                                    "value": {
                                                        "value": "@item().Id",
                                                        "type": "Expression"
                                                    }
                                                }
                                            ],
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "QueryParameters.pageToken": "$.nextPageToken"
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureSqlSink",
                                            "tableOption": "autoCreate",
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['kind']"
                                                    },
                                                    "sink": {
                                                        "name": "Kind",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['eventType']"
                                                    },
                                                    "sink": {
                                                        "name": "Type",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "EventId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['status']"
                                                    },
                                                    "sink": {
                                                        "name": "Status",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['updated']"
                                                    },
                                                    "sink": {
                                                        "name": "UpdatedDate",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['start']['dateTime']"
                                                    },
                                                    "sink": {
                                                        "name": "StartTime",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['end']['dateTime']"
                                                    },
                                                    "sink": {
                                                        "name": "EndTime",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['summary']"
                                                    },
                                                    "sink": {
                                                        "name": "Email",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['UserId']"
                                                    },
                                                    "sink": {
                                                        "name": "UserId",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "$['nextSyncToken']"
                                                    },
                                                    "sink": {
                                                        "name": "SyncToken",
                                                        "type": "String"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['items']",
                                            "mapComplexValuesToString": true
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DS_API_GoogleAdmin",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "API_URL": {
                                                    "value": "@concat('https://www.googleapis.com/calendar/v3/calendars/', item().email, '/events?&maxResults=2500&syncToken=',variables('CalendarEventsSyncToken'))",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DS_DL_Database",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SchemaName": "gsuite",
                                                "TableName": "GoogleCalendarEvents"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "If SyncToken expired",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy User Event Data",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@contains(activity('Copy User Event Data').output.errors[0].Message, 'Sync token is no longer valid, a full sync is required')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Clean User SyncToken",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "UPDATE [gsuite].[GoogleCalendarSyncTokens] SET SyncToken = NULL OUTPUT inserted.* WHERE UserId = @{item().id};",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "DS_DL_Database",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SchemaName": "gsuite",
                                                            "TableName": "GoogleCalendarSyncTokens"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Copy All User Event Data",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Clean User SyncToken",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "RestSource",
                                                        "additionalColumns": [
                                                            {
                                                                "name": "UserId",
                                                                "value": {
                                                                    "value": "@item().Id",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        ],
                                                        "httpRequestTimeout": "00:01:40",
                                                        "requestInterval": "00.00:00:00.010",
                                                        "requestMethod": "GET",
                                                        "additionalHeaders": {
                                                            "Authorization": {
                                                                "value": "@concat('Bearer ', activity('Get_GSA_Auth_Token').output.access_token)",
                                                                "type": "Expression"
                                                            }
                                                        },
                                                        "paginationRules": {
                                                            "QueryParameters.pageToken": "$.nextPageToken"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "AzureSqlSink",
                                                        "tableOption": "autoCreate",
                                                        "disableMetricsCollection": false
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "path": "[['kind']"
                                                                },
                                                                "sink": {
                                                                    "name": "Kind",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['eventType']"
                                                                },
                                                                "sink": {
                                                                    "name": "Type",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['id']"
                                                                },
                                                                "sink": {
                                                                    "name": "EventId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['status']"
                                                                },
                                                                "sink": {
                                                                    "name": "Status",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['updated']"
                                                                },
                                                                "sink": {
                                                                    "name": "UpdatedDate",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['start']['dateTime']"
                                                                },
                                                                "sink": {
                                                                    "name": "StartTime",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "[['end']['dateTime']"
                                                                },
                                                                "sink": {
                                                                    "name": "EndTime",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['summary']"
                                                                },
                                                                "sink": {
                                                                    "name": "Email",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['UserId']"
                                                                },
                                                                "sink": {
                                                                    "name": "UserId",
                                                                    "type": "String"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "path": "$['nextSyncToken']"
                                                                },
                                                                "sink": {
                                                                    "name": "SyncToken",
                                                                    "type": "String"
                                                                }
                                                            }
                                                        ],
                                                        "collectionReference": "$['items']",
                                                        "mapComplexValuesToString": true
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "DS_API_GoogleAdmin",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "API_URL": {
                                                                "value": "@concat('https://www.googleapis.com/calendar/v3/calendars/', item().email, '/events?maxResults=2500')",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "DS_DL_Database",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SchemaName": "gsuite",
                                                            "TableName": "GoogleCalendarEvents"
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Sync New Tokens",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "ForEachUser",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": ";WITH select_user_token AS (\n\tSELECT DISTINCT UserId, Email, SyncToken\n\tFROM [gsuite].[GoogleCalendarEvents]\n\tWHERE SyncToken IS NOT NULL\n)\nMERGE [gsuite].[GoogleCalendarSyncTokens] AS tgt  \nUSING select_user_token AS src\nON (tgt.UserId = src.UserId)  \nWHEN MATCHED THEN\n    UPDATE SET SyncToken = src.SyncToken,\n\t\t\t   Email= src.Email\nWHEN NOT MATCHED THEN  \n    INSERT (UserId, Email, SyncToken)  \n    VALUES (src.UserId, src.Email, src.SyncToken)\n\tOUTPUT inserted.*, $action;",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_DL_Database",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "gsuite",
                                    "TableName": "GoogleCalendarSyncTokens"
                                }
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "KeyVaultName": {
                        "type": "string",
                        "defaultValue": "kv-avenga-analytics-dev"
                    },
                    "ParamClientEmail": {
                        "type": "string",
                        "defaultValue": "avenga-dwh-account@avengadwh.iam.gserviceaccount.com"
                    },
                    "ParamUserEmail": {
                        "type": "string",
                        "defaultValue": "avenga.dwh.account@avenga.com"
                    }
                },
                "variables": {
                    "CalendarEventsSyncToken": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "DataLake"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:18Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/PL_DLS_ScrambleCorebaseEmployeeRecord')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Corebase EmployeeRecord",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "DROP TABLE IF EXISTS #EmployeeRecordTypeTemp;\n\nCREATE TABLE #EmployeeRecordTypeTemp (\n\tSequentialId INT,\n\tOriginalTypeId INT,\n\tTypeName NVARCHAR(50)\n);\n\nDROP TABLE IF EXISTS #EmployeeRecordStatusTemp;\n\nCREATE TABLE #EmployeeRecordStatusTemp (\n\tSequentialId INT,\n\tOriginalStatusId INT,\n\tStatusName NVARCHAR(50)\n);\n\nINSERT INTO #EmployeeRecordTypeTemp (SequentialId, OriginalTypeId, TypeName)\nSELECT ROW_NUMBER() OVER(ORDER BY Id) AS SequentialId\n\t  ,Id\n\t  ,[Name]\nFROM [UA_CoreBase_staging_dbo].[EmployeeRecordType];\n\nINSERT INTO #EmployeeRecordStatusTemp (SequentialId, OriginalStatusId, StatusName)\nSELECT ROW_NUMBER() OVER(ORDER BY Id) AS SequentialId\n\t  ,Id\n\t  ,[Name]\nFROM [UA_CoreBase_staging_dbo].[EmployeeRecordStatus];\n\nDECLARE @MaxSequentialTypeId INT, @MaxSequentialStatusId INT;\n\nSELECT @MaxSequentialTypeId = MAX(SequentialId) \nFROM #EmployeeRecordTypeTemp;\n\nSELECT @MaxSequentialStatusId = MAX(SequentialId) \nFROM #EmployeeRecordStatusTemp;\n\n;WITH cte_employee_record_random AS (\n\tSELECT er.[Id]\n\t\t  ,er.[EmployeeId]\n\t\t  ,er.[AuthorId]\n\t\t  ,er.[SuperiorId]\n\t\t  ,er.[Date]\n\t\t  ,er.[TypeId]\n\t\t  ,er.[StatusId]\n\t\t  ,er.[Comment]\n\t\t  ,ABS(CHECKSUM(NEWID())) % @MaxSequentialTypeId + 1 AS SequentialTypeId\n\t\t  ,ABS(CHECKSUM(NEWID())) % @MaxSequentialStatusId + 1 AS SequentialStatusId\n\t\t  ,ert.[TypeName]\n  FROM [UA_CoreBase_staging_dbo].[EmployeeRecord] AS er\n  INNER JOIN #EmployeeRecordTypeTemp AS ert ON ert.OriginalTypeId = er.TypeId\n)\nSELECT err.[Id]\n\t  ,err.[EmployeeId]\n\t  ,err.[AuthorId]\n\t  ,err.[SuperiorId]\n\t  ,CASE WHEN err.[TypeName] IN ('Onboarding', 'End of probation', 'Exit interview')\n\t\t\t\tTHEN err.[TypeId]\n\t\t\tELSE ert.[OriginalTypeId]\n\t   END AS TypeId\n\t  ,ers.[OriginalStatusId] AS StatusId\n\t  ,err.[Date]\n\t  ,err.[Comment]\nFROM cte_employee_record_random AS err\nLEFT JOIN #EmployeeRecordTypeTemp AS ert ON ert.SequentialId = err.SequentialTypeId\nLEFT JOIN #EmployeeRecordStatusTemp AS ers ON ers.SequentialId = err.SequentialStatusId;\n\nDROP TABLE IF EXISTS #EmployeeRecordTypeTemp;\n\nDROP TABLE IF EXISTS #EmployeeRecordStatusTemp;",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE [UA_CoreBase_staging_dbo].[EmployeeRecord];",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_DLS_DatalakeRep",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "EmployeeRecord"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_DLD_DatalakeDev",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SchemaName": "UA_CoreBase_staging_dbo",
                                    "TableName": "EmployeeRecord"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "DataLakeScramble/Corebase"
                },
                "annotations": [],
                "lastPublishTime": "2022-06-21T14:36:20Z"
            },
            "dependsOn": []
        }
    ]
}